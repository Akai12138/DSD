#include <stdlib.h>
#include <sys/alt_stdio.h>
#include <sys/alt_alarm.h>
#include <sys/times.h>
#include <alt_types.h>
#include <system.h>
#include <stdio.h>
#include <unistd.h>
#include <math.h>

// Test case 1
//#define step 5
//#define N 52

// Test case 2
//#define step 1/8.0
//#define N 2041

//Test case 3
#define step 1/1024.0
#define N 261121

// Test Case 4
//#define N 2323
//#define RANDSEED 334


// Generates the vector x and stores it in the memory
void generateVector(float x[N])
{
	int i;
	x[0] = 0;
	for (i=1; i<N; i++)
		x[i] = x[i-1] + step;
}

//void generateRandomVector(float x[N])
//{
//	int i;
//	srand(RANDSEED);
//	for (i=0; i<N; i++)
//	{
//		x[i] = ((float) rand()/ (float) RAND_MAX) * MAXVAL;
//	}
//}

float sumVector(float x[], int M)
{
	// YOUR CODE GOES HERE
	float sum = 0.0;
	for(int i=0; i < M; i++) {
		sum += 0.5*x[i] + x[i]*x[i]*cos((x[i]-128)/128);
	}
	return sum;
}

//float sumVector(float x[], unsigned int M) {
//    float result = 0;
//    for (int i = 0; i < M; i++) {
//        // Calculate the argument for the cosine function
//        float argument = (x[i] - 128) / 128;
//        // Extended Taylor expansion of cos(argument), up to the x^8 term
//        float cosApprox = 1 - (argument * argument) / 2
//                          + (argument * argument * argument * argument) / 24
//                          - (argument * argument * argument * argument * argument * argument) / 720;                          + (argument * argument * argument * argument * argument * argument * argument * argument) / 40320;
//
//        // Using the approximation in the original formula
//        float term = (0.5 * x[i]) + (x[i] * x[i] * cosApprox);
//
//        // Summing up the results
//        result += term;
//    }
//    return result;
//}


int main()
{

  alt_putstr("Task 4!\n");

  // Define input vector
  float x[N];

  // Returned result
  float y;

  generateVector(x);

  // The following is used for timing
  char buf[50];
  clock_t exec_t1, exec_t2;

  exec_t1 = times(NULL); // get system time before starting the process

  // The code that you want to time goes here
  y = sumVector(x, N);

  // till here
  exec_t2 = times(NULL); // get system time after finishing the process

  printf(" proc time = %d ticks \n", (unsigned int) (exec_t2-exec_t1));

  int i;
  for (i=0; i<10; i++)
  	y = y/2.0;

  printf(" Result (divided by 1024) = %d \n", (int) y);

  return 0;
}
