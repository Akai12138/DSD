
hello_world.elf:     file format elf32-littlenios2
hello_world.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010244

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00010020 paddr 0x00010020 align 2**12
         filesz 0x0000977c memsz 0x0000977c flags r-x
    LOAD off    0x0000a79c vaddr 0x0001979c paddr 0x00019a80 align 2**12
         filesz 0x000002e4 memsz 0x000002e4 flags rw-
    LOAD off    0x0000ad64 vaddr 0x00019d64 paddr 0x00019d64 align 2**12
         filesz 0x00000000 memsz 0x00000128 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00010000  00010000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  00010020  00010020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000092bc  00010244  00010244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000029c  00019500  00019500  0000a500  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000002e4  0001979c  00019a80  0000a79c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000128  00019d64  00019d64  0000ad64  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_mem   00000000  00019e8c  00019e8c  0000aa80  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  0000aa80  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000b38  00000000  00000000  0000aaa8  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000124de  00000000  00000000  0000b5e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00005c90  00000000  00000000  0001dabe  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00007187  00000000  00000000  0002374e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001764  00000000  00000000  0002a8d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002d33  00000000  00000000  0002c03c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000dc10  00000000  00000000  0002ed6f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000030  00000000  00000000  0003c980  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001180  00000000  00000000  0003c9b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0004005a  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  0004005d  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00040060  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00040061  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  00040062  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00040066  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0004006a  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  0004006e  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  00040077  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  00040080  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000012  00000000  00000000  00040089  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000045  00000000  00000000  0004009b  2**0
                  CONTENTS, READONLY
 29 .jdi          000058e3  00000000  00000000  000400e0  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     0003cd04  00000000  00000000  000459c3  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00010000 l    d  .entry	00000000 .entry
00010020 l    d  .exceptions	00000000 .exceptions
00010244 l    d  .text	00000000 .text
00019500 l    d  .rodata	00000000 .rodata
0001979c l    d  .rwdata	00000000 .rwdata
00019d64 l    d  .bss	00000000 .bss
00019e8c l    d  .onchip_mem	00000000 .onchip_mem
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../hello_world_bsp//obj/HAL/src/crt0.o
0001028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 addsf3.c
00000000 l    df *ABS*	00000000 divsf3.c
00000000 l    df *ABS*	00000000 mulsf3.c
00000000 l    df *ABS*	00000000 fixsfsi.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 efgcvt.c
00000000 l    df *ABS*	00000000 impure.c
0001979c l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00011730 l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 ecvtbuf.c
00011ce4 l     F .text	000001e4 print_e
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 mprec.c
00019638 l     O .rodata	0000000c p05.2796
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 dtoa.c
00013a98 l     F .text	00000220 quorem
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 extendsfdf2.c
00000000 l    df *ABS*	00000000 alt_load.c
00017b7c l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00019a58 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_times.c
00017dc0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_write.c
00017e74 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00017fb0 l     F .text	00000034 alt_dev_reg
0001987c l     O .rwdata	0000002c jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
000182ac l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_close.c
000183a0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
000184fc l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00018528 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
000188dc l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00018a3c l     F .text	0000003c alt_get_errno
00018a78 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 fputs.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00019d88 g     O .bss	00000004 alt_instruction_exception_handler
00015104 g     F .text	0000001c _malloc_usable_size_r
00013638 g     F .text	00000068 _mprec_log10
000136f8 g     F .text	00000070 __any_on
00019644 g     O .rodata	00000028 __mprec_tinytens
00017c68 g     F .text	0000006c alt_main
00013a14 g     F .text	0000002c strcpy
00011680 g     F .text	00000080 _puts_r
00019d8c g     O .bss	00000100 alt_irq
00019a80 g       *ABS*	00000000 __flash_rwdata_start
00016550 g     F .text	00000088 .hidden __eqdf2
00019e8c g       *ABS*	00000000 __alt_heap_start
00011634 g     F .text	0000004c printf
00011ec8 g     F .text	0000016c fcvtbuf
00010a14 g     F .text	00000440 .hidden __divsf3
00012758 g     F .text	000000e4 _Balloc
00011284 g     F .text	00000070 .hidden __fixsfsi
00017cd4 g     F .text	0000003c alt_putstr
000165d8 g     F .text	000000dc .hidden __gtdf2
00018ee8 g     F .text	00000024 altera_nios2_gen2_irq_init
00010000 g     F .entry	0000001c __reset
00017dfc g     F .text	00000078 times
00010020 g       *ABS*	00000000 __flash_exceptions_start
00019d6c g     O .bss	00000004 errno
00019d74 g     O .bss	00000004 alt_argv
00021a50 g       *ABS*	00000000 _gp
000198d0 g     O .rwdata	00000180 alt_fd_list
00018f0c g     F .text	00000090 alt_find_dev
00014fd8 g     F .text	00000028 memcpy
00017990 g     F .text	000000dc .hidden __floatsidf
000189c0 g     F .text	0000007c alt_io_redirect
000166b4 g     F .text	000000f4 .hidden __ltdf2
00011700 g     F .text	00000014 puts
000191f8 g     F .text	0000009c alt_exception_cause_generated_bad_addr
00013594 g     F .text	000000a4 __ratio
0001812c g     F .text	000000ec altera_avalon_jtag_uart_read
00014fb0 g     F .text	00000014 malloc
000115f8 g     F .text	0000003c _printf_r
00015218 g     F .text	00000064 .hidden __udivsi3
00019694 g     O .rodata	000000c8 __mprec_tens
000115b8 g     F .text	00000040 gcvtf
00019168 g     F .text	00000090 alt_icache_flush
00012bfc g     F .text	0000003c __i2b
000139c4 g     F .text	00000050 _sbrk_r
00019a6c g     O .rwdata	00000004 alt_max_fd
00017a6c g     F .text	00000110 .hidden __extendsfdf2
000152d4 g     F .text	000008ac .hidden __adddf3
00013350 g     F .text	00000104 __b2d
00019a50 g     O .rwdata	00000004 _global_impure_ptr
00013920 g     F .text	000000a4 _realloc_r
00019e8c g       *ABS*	00000000 __bss_end
000187ec g     F .text	000000f0 alt_iic_isr_register
00018de0 g     F .text	00000108 alt_tick
0001966c g     O .rodata	00000028 __mprec_bigtens
000129e0 g     F .text	00000104 __s2b
000112f4 g     F .text	000000a8 .hidden __floatunsidf
0001312c g     F .text	0000005c __mcmp
000187a0 g     F .text	0000004c alt_ic_irq_enabled
00018d44 g     F .text	0000009c alt_alarm_stop
00019d7c g     O .bss	00000004 alt_irq_active
00010000 g       *ABS*	00000000 __alt_mem_onchip_mem
000100fc g     F .exceptions	000000d4 alt_irq_handler
000198a8 g     O .rwdata	00000028 alt_dev_null
000184b4 g     F .text	00000048 alt_dcache_flush_all
00012ae4 g     F .text	00000068 __hi0bits
00017910 g     F .text	00000080 .hidden __fixdfsi
00019a80 g       *ABS*	00000000 __ram_rwdata_end
00019a64 g     O .rwdata	00000008 alt_dev_list
00017eb0 g     F .text	00000100 write
0001979c g       *ABS*	00000000 __ram_rodata_end
000166b4 g     F .text	000000f4 .hidden __ledf2
00012eb0 g     F .text	00000134 __pow5mult
0001527c g     F .text	00000058 .hidden __umodsi3
00019e8c g       *ABS*	00000000 end
000101d0 g     F .exceptions	00000074 alt_instruction_exception_entry
00020000 g       *ABS*	00000000 __alt_stack_pointer
00012434 g     F .text	0000026c _dcvt
00018324 g     F .text	0000007c alt_avalon_timer_sc_init
0001139c g     F .text	00000064 .hidden __clzsi2
00018218 g     F .text	00000094 altera_avalon_jtag_uart_write
0001179c g     F .text	0000052c ___vfprintf_internal_r
00015020 g     F .text	000000e4 _free_r
0001933c g     F .text	00000190 __call_exitprocs
00010244 g     F .text	0000004c _start
00019d80 g     O .bss	00000004 _alt_tick_rate
0001213c g     F .text	000002f8 _gcvt
00012fe4 g     F .text	00000148 __lshift
00019d84 g     O .bss	00000004 _alt_nticks
0001801c g     F .text	00000050 alt_sys_init
00012c38 g     F .text	00000278 __multiply
00011400 g     F .text	00000028 .hidden __mulsi3
0001979c g       *ABS*	00000000 __ram_rwdata_start
00019500 g       *ABS*	00000000 __ram_rodata_start
00013454 g     F .text	00000140 __d2b
0001806c g     F .text	00000060 altera_avalon_jtag_uart_read_fd
000190a4 g     F .text	000000c4 alt_get_fd
00010290 g     F .text	000000b8 generateVector
0001930c g     F .text	00000030 memcmp
00019e8c g       *ABS*	00000000 __alt_stack_base
00015b80 g     F .text	000009d0 .hidden __divdf3
000136a0 g     F .text	00000058 __copybits
000167a8 g     F .text	0000086c .hidden __muldf3
00018f9c g     F .text	00000108 alt_find_file
00018564 g     F .text	000000a4 alt_dev_llist_insert
00017d10 g     F .text	000000b0 sbrk
00013768 g     F .text	00000060 _calloc_r
000126a0 g     F .text	000000b8 __sfvwrite_small_dev
00019d64 g       *ABS*	00000000 __bss_start
00015000 g     F .text	00000020 memset
0001043c g     F .text	00000110 main
00011428 g     F .text	00000024 fcvt
00019d78 g     O .bss	00000004 alt_envp
000180cc g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00012034 g     F .text	00000108 ecvtbuf
00020000 g       *ABS*	00000000 __alt_heap_limit
00013cb8 g     F .text	000012f8 _dtoa_r
000137c8 g     F .text	00000158 _malloc_r
00019a70 g     O .rwdata	00000004 alt_errno
000114c4 g     F .text	00000054 ecvtf
00015120 g     F .text	00000084 .hidden __divsi3
00010e54 g     F .text	00000430 .hidden __mulsf3
00019500 g       *ABS*	00000000 __flash_rodata_start
00016550 g     F .text	00000088 .hidden __nedf2
00017fe4 g     F .text	00000038 alt_irq_init
00018cc0 g     F .text	00000084 alt_release_fd
00019531 g     O .rodata	00000100 .hidden __clz_tab
00010348 g     F .text	000000f4 sumVector
00013a40 g     F .text	00000058 _write_r
00019a54 g     O .rwdata	00000004 _impure_ptr
00019d70 g     O .bss	00000004 alt_argc
00010020 g       .exceptions	00000000 alt_irq_entry
000132fc g     F .text	00000054 __ulp
000114a0 g     F .text	00000024 ecvt
00019a5c g     O .rwdata	00000008 alt_fs_list
00010020 g       *ABS*	00000000 __ram_exceptions_start
0001863c g     F .text	00000050 alt_ic_isr_register
00019a80 g       *ABS*	00000000 _edata
00019e8c g       *ABS*	00000000 _end
00010244 g       *ABS*	00000000 __ram_exceptions_end
00018714 g     F .text	0000008c alt_ic_irq_disable
0001144c g     F .text	00000054 fcvtf
00019294 g     F .text	00000020 exit
00013188 g     F .text	00000174 __mdiff
000151a4 g     F .text	00000074 .hidden __modsi3
00020000 g       *ABS*	00000000 __alt_data_end
00010020 g     F .exceptions	00000000 alt_exception
00011518 g     F .text	000000a0 gcvt
000194cc g     F .text	00000034 _exit
00011714 g     F .text	0000001c strlen
00018b64 g     F .text	0000015c open
000165d8 g     F .text	000000dc .hidden __gedf2
00019d64 g     O .bss	00000004 __malloc_sbrk_start
00018608 g     F .text	00000034 alt_icache_flush_all
000192b4 g     F .text	00000058 fputs
00019a74 g     O .rwdata	00000004 alt_priority_mask
00019d68 g     O .bss	00000004 __malloc_free_list
0001868c g     F .text	00000088 alt_ic_irq_enable
00011cc8 g     F .text	0000001c __vfprintf_internal
00017014 g     F .text	000008fc .hidden __subdf3
00012b4c g     F .text	000000b0 __lo0bits
00019a78 g     O .rwdata	00000008 alt_alarm_list
000183dc g     F .text	000000d8 close
0001054c g     F .text	000004c8 .hidden __addsf3
00017be4 g     F .text	00000084 alt_load
00014fc4 g     F .text	00000014 free
000128b4 g     F .text	0000012c __multadd
0001283c g     F .text	00000078 _Bfree



Disassembly of section .entry:

00010000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   10000:	00808014 	movui	r2,512
#endif

0:
    initi r2
   10004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   10008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   1000c:	00bffd16 	blt	zero,r2,10004 <_gp+0xfffee5b4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   10010:	00400074 	movhi	at,1
    ori r1, r1, %lo(_start)
   10014:	08409114 	ori	at,at,580
    jmp r1
   10018:	0800683a 	jmp	at
   1001c:	00000000 	call	0 <__alt_mem_onchip_mem-0x10000>

Disassembly of section .exceptions:

00010020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   10020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   10024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   10028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   1002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   10030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   10034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   10038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   1003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   10040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   10044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   10048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   1004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   10050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   10054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   10058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   1005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   10060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   10064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   10068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   1006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   10070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   10074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   10078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   1007c:	10000326 	beq	r2,zero,1008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   10080:	20000226 	beq	r4,zero,1008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   10084:	00100fc0 	call	100fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   10088:	00000706 	br	100a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   1008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   10090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   10094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   10098:	00101d00 	call	101d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   1009c:	1000021e 	bne	r2,zero,100a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   100a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   100a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   100a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   100ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   100b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   100b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   100b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   100bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   100c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   100c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   100c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   100cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   100d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   100d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   100d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   100dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   100e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   100e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   100e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   100ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   100f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   100f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   100f8:	ef80083a 	eret

000100fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   100fc:	defff904 	addi	sp,sp,-28
   10100:	dfc00615 	stw	ra,24(sp)
   10104:	df000515 	stw	fp,20(sp)
   10108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   1010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   10110:	0005313a 	rdctl	r2,ipending
   10114:	e0bffe15 	stw	r2,-8(fp)

  return active;
   10118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   1011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   10120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   10124:	00800044 	movi	r2,1
   10128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   1012c:	e0fffb17 	ldw	r3,-20(fp)
   10130:	e0bffc17 	ldw	r2,-16(fp)
   10134:	1884703a 	and	r2,r3,r2
   10138:	10001426 	beq	r2,zero,1018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   1013c:	008000b4 	movhi	r2,2
   10140:	10a76304 	addi	r2,r2,-25204
   10144:	e0fffd17 	ldw	r3,-12(fp)
   10148:	180690fa 	slli	r3,r3,3
   1014c:	10c5883a 	add	r2,r2,r3
   10150:	10c00017 	ldw	r3,0(r2)
   10154:	008000b4 	movhi	r2,2
   10158:	10a76304 	addi	r2,r2,-25204
   1015c:	e13ffd17 	ldw	r4,-12(fp)
   10160:	200890fa 	slli	r4,r4,3
   10164:	1105883a 	add	r2,r2,r4
   10168:	10800104 	addi	r2,r2,4
   1016c:	10800017 	ldw	r2,0(r2)
   10170:	1009883a 	mov	r4,r2
   10174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   10178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   1017c:	0005313a 	rdctl	r2,ipending
   10180:	e0bfff15 	stw	r2,-4(fp)

  return active;
   10184:	e0bfff17 	ldw	r2,-4(fp)
   10188:	00000706 	br	101a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
   1018c:	e0bffc17 	ldw	r2,-16(fp)
   10190:	1085883a 	add	r2,r2,r2
   10194:	e0bffc15 	stw	r2,-16(fp)
      i++;
   10198:	e0bffd17 	ldw	r2,-12(fp)
   1019c:	10800044 	addi	r2,r2,1
   101a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   101a4:	003fe106 	br	1012c <_gp+0xfffee6dc>

    active = alt_irq_pending ();
   101a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   101ac:	e0bffb17 	ldw	r2,-20(fp)
   101b0:	103fdb1e 	bne	r2,zero,10120 <_gp+0xfffee6d0>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   101b4:	0001883a 	nop
}
   101b8:	0001883a 	nop
   101bc:	e037883a 	mov	sp,fp
   101c0:	dfc00117 	ldw	ra,4(sp)
   101c4:	df000017 	ldw	fp,0(sp)
   101c8:	dec00204 	addi	sp,sp,8
   101cc:	f800283a 	ret

000101d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   101d0:	defffb04 	addi	sp,sp,-20
   101d4:	dfc00415 	stw	ra,16(sp)
   101d8:	df000315 	stw	fp,12(sp)
   101dc:	df000304 	addi	fp,sp,12
   101e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
   101e4:	000531fa 	rdctl	r2,exception
   101e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
   101ec:	e0bffd17 	ldw	r2,-12(fp)
   101f0:	10801f0c 	andi	r2,r2,124
   101f4:	1004d0ba 	srli	r2,r2,2
   101f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
   101fc:	0005333a 	rdctl	r2,badaddr
   10200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   10204:	d0a0ce17 	ldw	r2,-31944(gp)
   10208:	10000726 	beq	r2,zero,10228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   1020c:	d0a0ce17 	ldw	r2,-31944(gp)
   10210:	e0fffd17 	ldw	r3,-12(fp)
   10214:	e1bffe17 	ldw	r6,-8(fp)
   10218:	e17fff17 	ldw	r5,-4(fp)
   1021c:	1809883a 	mov	r4,r3
   10220:	103ee83a 	callr	r2
   10224:	00000206 	br	10230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   10228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   1022c:	0005883a 	mov	r2,zero
}
   10230:	e037883a 	mov	sp,fp
   10234:	dfc00117 	ldw	ra,4(sp)
   10238:	df000017 	ldw	fp,0(sp)
   1023c:	dec00204 	addi	sp,sp,8
   10240:	f800283a 	ret

Disassembly of section .text:

00010244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
   10244:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
   10248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
   1024c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
   10250:	00bffd16 	blt	zero,r2,10248 <_gp+0xfffee7f8>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   10254:	06c000b4 	movhi	sp,2
    ori sp, sp, %lo(__alt_stack_pointer)
   10258:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
   1025c:	068000b4 	movhi	gp,2
    ori gp, gp, %lo(_gp)
   10260:	d6869414 	ori	gp,gp,6736
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   10264:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
   10268:	10a75914 	ori	r2,r2,40292

    movhi r3, %hi(__bss_end)
   1026c:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
   10270:	18e7a314 	ori	r3,r3,40588

    beq r2, r3, 1f
   10274:	10c00326 	beq	r2,r3,10284 <_start+0x40>

0:
    stw zero, (r2)
   10278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   1027c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   10280:	10fffd36 	bltu	r2,r3,10278 <_gp+0xfffee828>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   10284:	0017be40 	call	17be4 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   10288:	0017c680 	call	17c68 <alt_main>

0001028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   1028c:	003fff06 	br	1028c <_gp+0xfffee83c>

00010290 <generateVector>:
//#define step 1/1024.0
//#define N 261121

// Generates the vector x and stores it in the memory
void generateVector(float x[N])
{
   10290:	defffb04 	addi	sp,sp,-20
   10294:	dfc00415 	stw	ra,16(sp)
   10298:	df000315 	stw	fp,12(sp)
   1029c:	dc000215 	stw	r16,8(sp)
   102a0:	df000304 	addi	fp,sp,12
   102a4:	e13ffe15 	stw	r4,-8(fp)
	int i;
	x[0] = 0;
   102a8:	e0bffe17 	ldw	r2,-8(fp)
   102ac:	10000015 	stw	zero,0(r2)
	for (i=1;i<N;i++)
   102b0:	00800044 	movi	r2,1
   102b4:	e0bffd15 	stw	r2,-12(fp)
   102b8:	00001906 	br	10320 <generateVector+0x90>
		x[i] = x[i-1] + step;
   102bc:	e0bffd17 	ldw	r2,-12(fp)
   102c0:	1085883a 	add	r2,r2,r2
   102c4:	1085883a 	add	r2,r2,r2
   102c8:	1007883a 	mov	r3,r2
   102cc:	e0bffe17 	ldw	r2,-8(fp)
   102d0:	10e1883a 	add	r16,r2,r3
   102d4:	e0fffd17 	ldw	r3,-12(fp)
   102d8:	00900034 	movhi	r2,16384
   102dc:	10bfffc4 	addi	r2,r2,-1
   102e0:	1885883a 	add	r2,r3,r2
   102e4:	1085883a 	add	r2,r2,r2
   102e8:	1085883a 	add	r2,r2,r2
   102ec:	1007883a 	mov	r3,r2
   102f0:	e0bffe17 	ldw	r2,-8(fp)
   102f4:	10c5883a 	add	r2,r2,r3
   102f8:	10c00017 	ldw	r3,0(r2)
   102fc:	014f8034 	movhi	r5,15872
   10300:	1809883a 	mov	r4,r3
   10304:	001054c0 	call	1054c <__addsf3>
   10308:	1007883a 	mov	r3,r2
   1030c:	1805883a 	mov	r2,r3
   10310:	80800015 	stw	r2,0(r16)
// Generates the vector x and stores it in the memory
void generateVector(float x[N])
{
	int i;
	x[0] = 0;
	for (i=1;i<N;i++)
   10314:	e0bffd17 	ldw	r2,-12(fp)
   10318:	10800044 	addi	r2,r2,1
   1031c:	e0bffd15 	stw	r2,-12(fp)
   10320:	e0bffd17 	ldw	r2,-12(fp)
   10324:	1081fe50 	cmplti	r2,r2,2041
   10328:	103fe41e 	bne	r2,zero,102bc <_gp+0xfffee86c>
		x[i] = x[i-1] + step;

}
   1032c:	0001883a 	nop
   10330:	e6ffff04 	addi	sp,fp,-4
   10334:	dfc00217 	ldw	ra,8(sp)
   10338:	df000117 	ldw	fp,4(sp)
   1033c:	dc000017 	ldw	r16,0(sp)
   10340:	dec00304 	addi	sp,sp,12
   10344:	f800283a 	ret

00010348 <sumVector>:

float sumVector(float x[], int M)
{
   10348:	defff904 	addi	sp,sp,-28
   1034c:	dfc00615 	stw	ra,24(sp)
   10350:	df000515 	stw	fp,20(sp)
   10354:	dc000415 	stw	r16,16(sp)
   10358:	df000504 	addi	fp,sp,20
   1035c:	e13ffd15 	stw	r4,-12(fp)
   10360:	e17ffe15 	stw	r5,-8(fp)
	float sum = 0.0;
   10364:	e03ffb15 	stw	zero,-20(fp)
	int i;
	for (i=0; i<=M; i++) {
   10368:	e03ffc15 	stw	zero,-16(fp)
   1036c:	00002706 	br	1040c <sumVector+0xc4>
		sum += x[i] + x[i] * x[i];
   10370:	e0bffc17 	ldw	r2,-16(fp)
   10374:	1085883a 	add	r2,r2,r2
   10378:	1085883a 	add	r2,r2,r2
   1037c:	1007883a 	mov	r3,r2
   10380:	e0bffd17 	ldw	r2,-12(fp)
   10384:	10c5883a 	add	r2,r2,r3
   10388:	14000017 	ldw	r16,0(r2)
   1038c:	e0bffc17 	ldw	r2,-16(fp)
   10390:	1085883a 	add	r2,r2,r2
   10394:	1085883a 	add	r2,r2,r2
   10398:	1007883a 	mov	r3,r2
   1039c:	e0bffd17 	ldw	r2,-12(fp)
   103a0:	10c5883a 	add	r2,r2,r3
   103a4:	10c00017 	ldw	r3,0(r2)
   103a8:	e0bffc17 	ldw	r2,-16(fp)
   103ac:	1085883a 	add	r2,r2,r2
   103b0:	1085883a 	add	r2,r2,r2
   103b4:	1009883a 	mov	r4,r2
   103b8:	e0bffd17 	ldw	r2,-12(fp)
   103bc:	1105883a 	add	r2,r2,r4
   103c0:	11000017 	ldw	r4,0(r2)
   103c4:	200b883a 	mov	r5,r4
   103c8:	1809883a 	mov	r4,r3
   103cc:	0010e540 	call	10e54 <__mulsf3>
   103d0:	1007883a 	mov	r3,r2
   103d4:	1805883a 	mov	r2,r3
   103d8:	100b883a 	mov	r5,r2
   103dc:	8009883a 	mov	r4,r16
   103e0:	001054c0 	call	1054c <__addsf3>
   103e4:	1007883a 	mov	r3,r2
   103e8:	1805883a 	mov	r2,r3
   103ec:	100b883a 	mov	r5,r2
   103f0:	e13ffb17 	ldw	r4,-20(fp)
   103f4:	001054c0 	call	1054c <__addsf3>
   103f8:	1007883a 	mov	r3,r2
   103fc:	e0fffb15 	stw	r3,-20(fp)

float sumVector(float x[], int M)
{
	float sum = 0.0;
	int i;
	for (i=0; i<=M; i++) {
   10400:	e0bffc17 	ldw	r2,-16(fp)
   10404:	10800044 	addi	r2,r2,1
   10408:	e0bffc15 	stw	r2,-16(fp)
   1040c:	e0bffc17 	ldw	r2,-16(fp)
   10410:	e0fffe17 	ldw	r3,-8(fp)
   10414:	18bfd60e 	bge	r3,r2,10370 <_gp+0xfffee920>
		sum += x[i] + x[i] * x[i];
	}
	return sum;
   10418:	e0bffb17 	ldw	r2,-20(fp)
   1041c:	1007883a 	mov	r3,r2
}
   10420:	1805883a 	mov	r2,r3
   10424:	e6ffff04 	addi	sp,fp,-4
   10428:	dfc00217 	ldw	ra,8(sp)
   1042c:	df000117 	ldw	fp,4(sp)
   10430:	dc000017 	ldw	r16,0(sp)
   10434:	dec00304 	addi	sp,sp,12
   10438:	f800283a 	ret

0001043c <main>:

int main()
{
   1043c:	def7f704 	addi	sp,sp,-8228
   10440:	dfc80815 	stw	ra,8224(sp)
   10444:	df080715 	stw	fp,8220(sp)
   10448:	df080704 	addi	fp,sp,8220
	 printf("Task 2!\n");
   1044c:	010000b4 	movhi	r4,2
   10450:	21254004 	addi	r4,r4,-27392
   10454:	00117000 	call	11700 <puts>
	 // Define input vector
	 float x[N];

	 // Returned result
	 float y;
	 generateVector(x);
   10458:	e0b7fd04 	addi	r2,fp,-8204
   1045c:	1009883a 	mov	r4,r2
   10460:	00102900 	call	10290 <generateVector>
//
//	 for (int i=0; i<10; i++){
//	 exec_t1 = times(NULL); // get system time before starting the process
	 char buf[40];
	 clock_t exec_t1, exec_t2;
	 exec_t1 = times(NULL); // get system time before starting the process
   10464:	0009883a 	mov	r4,zero
   10468:	0017dfc0 	call	17dfc <times>
   1046c:	e0b7fb15 	stw	r2,-8212(fp)

	 // The code that you want to time goes here
	 y = sumVector(x, N);
   10470:	e0b7fd04 	addi	r2,fp,-8204
   10474:	0141fe44 	movi	r5,2041
   10478:	1009883a 	mov	r4,r2
   1047c:	00103480 	call	10348 <sumVector>
   10480:	e0b7f915 	stw	r2,-8220(fp)
//
//	 long average_ticks = total_ticks / 10;
//	 gcvt(average_ticks, 10, buf);
//	 alt_putstr("Average proc time = "); alt_putstr(buf); alt_putstr(" ticks\n");
//
	 exec_t2 = times(NULL); // get system time after finishing the process
   10484:	0009883a 	mov	r4,zero
   10488:	0017dfc0 	call	17dfc <times>
   1048c:	e0b7fc15 	stw	r2,-8208(fp)
	 gcvt((exec_t2 - exec_t1), 10, buf);
   10490:	e0f7fc17 	ldw	r3,-8208(fp)
   10494:	e0b7fb17 	ldw	r2,-8212(fp)
   10498:	1885c83a 	sub	r2,r3,r2
   1049c:	1009883a 	mov	r4,r2
   104a0:	00112f40 	call	112f4 <__floatunsidf>
   104a4:	1011883a 	mov	r8,r2
   104a8:	1813883a 	mov	r9,r3
   104ac:	e0bff604 	addi	r2,fp,-40
   104b0:	100f883a 	mov	r7,r2
   104b4:	01800284 	movi	r6,10
   104b8:	4009883a 	mov	r4,r8
   104bc:	480b883a 	mov	r5,r9
   104c0:	00115180 	call	11518 <gcvt>
	 alt_putstr(" proc time = "); alt_putstr(buf); alt_putstr(" ticks \n");
   104c4:	010000b4 	movhi	r4,2
   104c8:	21254204 	addi	r4,r4,-27384
   104cc:	0017cd40 	call	17cd4 <alt_putstr>
   104d0:	e0bff604 	addi	r2,fp,-40
   104d4:	1009883a 	mov	r4,r2
   104d8:	0017cd40 	call	17cd4 <alt_putstr>
   104dc:	010000b4 	movhi	r4,2
   104e0:	21254604 	addi	r4,r4,-27368
   104e4:	0017cd40 	call	17cd4 <alt_putstr>

	 int i;
	 for (i=0; i<10; i++){
   104e8:	e037fa15 	stw	zero,-8216(fp)
   104ec:	00000806 	br	10510 <main+0xd4>
		 y = y/2.0;
   104f0:	01500034 	movhi	r5,16384
   104f4:	e137f917 	ldw	r4,-8220(fp)
   104f8:	0010a140 	call	10a14 <__divsf3>
   104fc:	1007883a 	mov	r3,r2
   10500:	e0f7f915 	stw	r3,-8220(fp)
	 exec_t2 = times(NULL); // get system time after finishing the process
	 gcvt((exec_t2 - exec_t1), 10, buf);
	 alt_putstr(" proc time = "); alt_putstr(buf); alt_putstr(" ticks \n");

	 int i;
	 for (i=0; i<10; i++){
   10504:	e0b7fa17 	ldw	r2,-8216(fp)
   10508:	10800044 	addi	r2,r2,1
   1050c:	e0b7fa15 	stw	r2,-8216(fp)
   10510:	e0b7fa17 	ldw	r2,-8216(fp)
   10514:	10800290 	cmplti	r2,r2,10
   10518:	103ff51e 	bne	r2,zero,104f0 <_gp+0xfffeeaa0>
		 y = y/2.0;
	 }

	 printf("Result: %d \n",(int) y);
   1051c:	e137f917 	ldw	r4,-8220(fp)
   10520:	00112840 	call	11284 <__fixsfsi>
   10524:	100b883a 	mov	r5,r2
   10528:	010000b4 	movhi	r4,2
   1052c:	21254904 	addi	r4,r4,-27356
   10530:	00116340 	call	11634 <printf>

	 return 0;
   10534:	0005883a 	mov	r2,zero
}
   10538:	e037883a 	mov	sp,fp
   1053c:	dfc00117 	ldw	ra,4(sp)
   10540:	df000017 	ldw	fp,0(sp)
   10544:	dec00204 	addi	sp,sp,8
   10548:	f800283a 	ret

0001054c <__addsf3>:
   1054c:	defffc04 	addi	sp,sp,-16
   10550:	2004d7fa 	srli	r2,r4,31
   10554:	280cd5fa 	srli	r6,r5,23
   10558:	dc000015 	stw	r16,0(sp)
   1055c:	00c02034 	movhi	r3,128
   10560:	2020d5fa 	srli	r16,r4,23
   10564:	280ed7fa 	srli	r7,r5,31
   10568:	18ffffc4 	addi	r3,r3,-1
   1056c:	dc400115 	stw	r17,4(sp)
   10570:	1908703a 	and	r4,r3,r4
   10574:	194a703a 	and	r5,r3,r5
   10578:	dfc00315 	stw	ra,12(sp)
   1057c:	dc800215 	stw	r18,8(sp)
   10580:	14403fcc 	andi	r17,r2,255
   10584:	84003fcc 	andi	r16,r16,255
   10588:	200890fa 	slli	r4,r4,3
   1058c:	31803fcc 	andi	r6,r6,255
   10590:	280a90fa 	slli	r5,r5,3
   10594:	89c05026 	beq	r17,r7,106d8 <__addsf3+0x18c>
   10598:	8185c83a 	sub	r2,r16,r6
   1059c:	00807a0e 	bge	zero,r2,10788 <__addsf3+0x23c>
   105a0:	30001e1e 	bne	r6,zero,1061c <__addsf3+0xd0>
   105a4:	28006d1e 	bne	r5,zero,1075c <__addsf3+0x210>
   105a8:	208001cc 	andi	r2,r4,7
   105ac:	10000426 	beq	r2,zero,105c0 <__addsf3+0x74>
   105b0:	208003cc 	andi	r2,r4,15
   105b4:	00c00104 	movi	r3,4
   105b8:	10c00126 	beq	r2,r3,105c0 <__addsf3+0x74>
   105bc:	20c9883a 	add	r4,r4,r3
   105c0:	2081002c 	andhi	r2,r4,1024
   105c4:	10003926 	beq	r2,zero,106ac <__addsf3+0x160>
   105c8:	84000044 	addi	r16,r16,1
   105cc:	00803fc4 	movi	r2,255
   105d0:	80807826 	beq	r16,r2,107b4 <__addsf3+0x268>
   105d4:	200891ba 	slli	r4,r4,6
   105d8:	8805883a 	mov	r2,r17
   105dc:	2008d27a 	srli	r4,r4,9
   105e0:	84003fcc 	andi	r16,r16,255
   105e4:	800695fa 	slli	r3,r16,23
   105e8:	10803fcc 	andi	r2,r2,255
   105ec:	04002034 	movhi	r16,128
   105f0:	843fffc4 	addi	r16,r16,-1
   105f4:	100497fa 	slli	r2,r2,31
   105f8:	2408703a 	and	r4,r4,r16
   105fc:	20e0b03a 	or	r16,r4,r3
   10600:	8084b03a 	or	r2,r16,r2
   10604:	dfc00317 	ldw	ra,12(sp)
   10608:	dc800217 	ldw	r18,8(sp)
   1060c:	dc400117 	ldw	r17,4(sp)
   10610:	dc000017 	ldw	r16,0(sp)
   10614:	dec00404 	addi	sp,sp,16
   10618:	f800283a 	ret
   1061c:	00c03fc4 	movi	r3,255
   10620:	80ffe126 	beq	r16,r3,105a8 <_gp+0xfffeeb58>
   10624:	29410034 	orhi	r5,r5,1024
   10628:	00c006c4 	movi	r3,27
   1062c:	18807516 	blt	r3,r2,10804 <__addsf3+0x2b8>
   10630:	00c00804 	movi	r3,32
   10634:	1887c83a 	sub	r3,r3,r2
   10638:	28c6983a 	sll	r3,r5,r3
   1063c:	288ad83a 	srl	r5,r5,r2
   10640:	1804c03a 	cmpne	r2,r3,zero
   10644:	288ab03a 	or	r5,r5,r2
   10648:	2149c83a 	sub	r4,r4,r5
   1064c:	2081002c 	andhi	r2,r4,1024
   10650:	10001426 	beq	r2,zero,106a4 <__addsf3+0x158>
   10654:	04810034 	movhi	r18,1024
   10658:	94bfffc4 	addi	r18,r18,-1
   1065c:	24a4703a 	and	r18,r4,r18
   10660:	9009883a 	mov	r4,r18
   10664:	001139c0 	call	1139c <__clzsi2>
   10668:	10bffec4 	addi	r2,r2,-5
   1066c:	90a4983a 	sll	r18,r18,r2
   10670:	14005416 	blt	r2,r16,107c4 <__addsf3+0x278>
   10674:	1405c83a 	sub	r2,r2,r16
   10678:	11000044 	addi	r4,r2,1
   1067c:	00800804 	movi	r2,32
   10680:	1105c83a 	sub	r2,r2,r4
   10684:	9084983a 	sll	r2,r18,r2
   10688:	9124d83a 	srl	r18,r18,r4
   1068c:	0021883a 	mov	r16,zero
   10690:	1008c03a 	cmpne	r4,r2,zero
   10694:	9108b03a 	or	r4,r18,r4
   10698:	003fc306 	br	105a8 <_gp+0xfffeeb58>
   1069c:	1000db26 	beq	r2,zero,10a0c <__addsf3+0x4c0>
   106a0:	1009883a 	mov	r4,r2
   106a4:	208001cc 	andi	r2,r4,7
   106a8:	103fc11e 	bne	r2,zero,105b0 <_gp+0xfffeeb60>
   106ac:	2006d0fa 	srli	r3,r4,3
   106b0:	01003fc4 	movi	r4,255
   106b4:	8805883a 	mov	r2,r17
   106b8:	8100241e 	bne	r16,r4,1074c <__addsf3+0x200>
   106bc:	18006e26 	beq	r3,zero,10878 <__addsf3+0x32c>
   106c0:	19001034 	orhi	r4,r3,64
   106c4:	00c02034 	movhi	r3,128
   106c8:	18ffffc4 	addi	r3,r3,-1
   106cc:	043fffc4 	movi	r16,-1
   106d0:	20c8703a 	and	r4,r4,r3
   106d4:	003fc206 	br	105e0 <_gp+0xfffeeb90>
   106d8:	8187c83a 	sub	r3,r16,r6
   106dc:	00c03e0e 	bge	zero,r3,107d8 <__addsf3+0x28c>
   106e0:	30002326 	beq	r6,zero,10770 <__addsf3+0x224>
   106e4:	01803fc4 	movi	r6,255
   106e8:	81bfaf26 	beq	r16,r6,105a8 <_gp+0xfffeeb58>
   106ec:	29410034 	orhi	r5,r5,1024
   106f0:	018006c4 	movi	r6,27
   106f4:	30c07416 	blt	r6,r3,108c8 <__addsf3+0x37c>
   106f8:	01800804 	movi	r6,32
   106fc:	30cdc83a 	sub	r6,r6,r3
   10700:	298c983a 	sll	r6,r5,r6
   10704:	28cad83a 	srl	r5,r5,r3
   10708:	3006c03a 	cmpne	r3,r6,zero
   1070c:	28cab03a 	or	r5,r5,r3
   10710:	2149883a 	add	r4,r4,r5
   10714:	20c1002c 	andhi	r3,r4,1024
   10718:	183fe226 	beq	r3,zero,106a4 <_gp+0xfffeec54>
   1071c:	84000044 	addi	r16,r16,1
   10720:	00c03fc4 	movi	r3,255
   10724:	80c05426 	beq	r16,r3,10878 <__addsf3+0x32c>
   10728:	00bf0034 	movhi	r2,64512
   1072c:	10bfffc4 	addi	r2,r2,-1
   10730:	20c0004c 	andi	r3,r4,1
   10734:	2088703a 	and	r4,r4,r2
   10738:	2008d07a 	srli	r4,r4,1
   1073c:	20c8b03a 	or	r4,r4,r3
   10740:	003f9906 	br	105a8 <_gp+0xfffeeb58>
   10744:	0007883a 	mov	r3,zero
   10748:	0005883a 	mov	r2,zero
   1074c:	01002034 	movhi	r4,128
   10750:	213fffc4 	addi	r4,r4,-1
   10754:	1908703a 	and	r4,r3,r4
   10758:	003fa106 	br	105e0 <_gp+0xfffeeb90>
   1075c:	10bfffc4 	addi	r2,r2,-1
   10760:	103fb926 	beq	r2,zero,10648 <_gp+0xfffeebf8>
   10764:	00c03fc4 	movi	r3,255
   10768:	80ffaf1e 	bne	r16,r3,10628 <_gp+0xfffeebd8>
   1076c:	003f8e06 	br	105a8 <_gp+0xfffeeb58>
   10770:	283f8d26 	beq	r5,zero,105a8 <_gp+0xfffeeb58>
   10774:	18ffffc4 	addi	r3,r3,-1
   10778:	183fe526 	beq	r3,zero,10710 <_gp+0xfffeecc0>
   1077c:	01803fc4 	movi	r6,255
   10780:	81bfdb1e 	bne	r16,r6,106f0 <_gp+0xfffeeca0>
   10784:	003f8806 	br	105a8 <_gp+0xfffeeb58>
   10788:	1000201e 	bne	r2,zero,1080c <__addsf3+0x2c0>
   1078c:	80800044 	addi	r2,r16,1
   10790:	10803fcc 	andi	r2,r2,255
   10794:	01800044 	movi	r6,1
   10798:	3080450e 	bge	r6,r2,108b0 <__addsf3+0x364>
   1079c:	2165c83a 	sub	r18,r4,r5
   107a0:	90c1002c 	andhi	r3,r18,1024
   107a4:	18002b26 	beq	r3,zero,10854 <__addsf3+0x308>
   107a8:	2925c83a 	sub	r18,r5,r4
   107ac:	3823883a 	mov	r17,r7
   107b0:	003fab06 	br	10660 <_gp+0xfffeec10>
   107b4:	8805883a 	mov	r2,r17
   107b8:	043fffc4 	movi	r16,-1
   107bc:	0009883a 	mov	r4,zero
   107c0:	003f8706 	br	105e0 <_gp+0xfffeeb90>
   107c4:	013f0034 	movhi	r4,64512
   107c8:	213fffc4 	addi	r4,r4,-1
   107cc:	80a1c83a 	sub	r16,r16,r2
   107d0:	9108703a 	and	r4,r18,r4
   107d4:	003f7406 	br	105a8 <_gp+0xfffeeb58>
   107d8:	1800411e 	bne	r3,zero,108e0 <__addsf3+0x394>
   107dc:	80c00044 	addi	r3,r16,1
   107e0:	19c03fcc 	andi	r7,r3,255
   107e4:	01800044 	movi	r6,1
   107e8:	31c0260e 	bge	r6,r7,10884 <__addsf3+0x338>
   107ec:	01803fc4 	movi	r6,255
   107f0:	19802126 	beq	r3,r6,10878 <__addsf3+0x32c>
   107f4:	2149883a 	add	r4,r4,r5
   107f8:	2008d07a 	srli	r4,r4,1
   107fc:	1821883a 	mov	r16,r3
   10800:	003f6906 	br	105a8 <_gp+0xfffeeb58>
   10804:	01400044 	movi	r5,1
   10808:	003f8f06 	br	10648 <_gp+0xfffeebf8>
   1080c:	8000151e 	bne	r16,zero,10864 <__addsf3+0x318>
   10810:	20002f26 	beq	r4,zero,108d0 <__addsf3+0x384>
   10814:	0084303a 	nor	r2,zero,r2
   10818:	10000a26 	beq	r2,zero,10844 <__addsf3+0x2f8>
   1081c:	00c03fc4 	movi	r3,255
   10820:	30c02b26 	beq	r6,r3,108d0 <__addsf3+0x384>
   10824:	00c006c4 	movi	r3,27
   10828:	18806d16 	blt	r3,r2,109e0 <__addsf3+0x494>
   1082c:	00c00804 	movi	r3,32
   10830:	1887c83a 	sub	r3,r3,r2
   10834:	20c6983a 	sll	r3,r4,r3
   10838:	2084d83a 	srl	r2,r4,r2
   1083c:	1808c03a 	cmpne	r4,r3,zero
   10840:	1108b03a 	or	r4,r2,r4
   10844:	2909c83a 	sub	r4,r5,r4
   10848:	3021883a 	mov	r16,r6
   1084c:	3823883a 	mov	r17,r7
   10850:	003f7e06 	br	1064c <_gp+0xfffeebfc>
   10854:	903f821e 	bne	r18,zero,10660 <_gp+0xfffeec10>
   10858:	0005883a 	mov	r2,zero
   1085c:	0021883a 	mov	r16,zero
   10860:	003fba06 	br	1074c <_gp+0xfffeecfc>
   10864:	00c03fc4 	movi	r3,255
   10868:	30c01926 	beq	r6,r3,108d0 <__addsf3+0x384>
   1086c:	0085c83a 	sub	r2,zero,r2
   10870:	21010034 	orhi	r4,r4,1024
   10874:	003feb06 	br	10824 <_gp+0xfffeedd4>
   10878:	043fffc4 	movi	r16,-1
   1087c:	0009883a 	mov	r4,zero
   10880:	003f5706 	br	105e0 <_gp+0xfffeeb90>
   10884:	80004a1e 	bne	r16,zero,109b0 <__addsf3+0x464>
   10888:	20005926 	beq	r4,zero,109f0 <__addsf3+0x4a4>
   1088c:	283f4626 	beq	r5,zero,105a8 <_gp+0xfffeeb58>
   10890:	2149883a 	add	r4,r4,r5
   10894:	2081002c 	andhi	r2,r4,1024
   10898:	103f8226 	beq	r2,zero,106a4 <_gp+0xfffeec54>
   1089c:	00bf0034 	movhi	r2,64512
   108a0:	10bfffc4 	addi	r2,r2,-1
   108a4:	3021883a 	mov	r16,r6
   108a8:	2088703a 	and	r4,r4,r2
   108ac:	003f3e06 	br	105a8 <_gp+0xfffeeb58>
   108b0:	8000121e 	bne	r16,zero,108fc <__addsf3+0x3b0>
   108b4:	2000261e 	bne	r4,zero,10950 <__addsf3+0x404>
   108b8:	283fa226 	beq	r5,zero,10744 <_gp+0xfffeecf4>
   108bc:	2809883a 	mov	r4,r5
   108c0:	3823883a 	mov	r17,r7
   108c4:	003f3806 	br	105a8 <_gp+0xfffeeb58>
   108c8:	01400044 	movi	r5,1
   108cc:	003f9006 	br	10710 <_gp+0xfffeecc0>
   108d0:	2809883a 	mov	r4,r5
   108d4:	3021883a 	mov	r16,r6
   108d8:	3823883a 	mov	r17,r7
   108dc:	003f3206 	br	105a8 <_gp+0xfffeeb58>
   108e0:	80000c1e 	bne	r16,zero,10914 <__addsf3+0x3c8>
   108e4:	20002f26 	beq	r4,zero,109a4 <__addsf3+0x458>
   108e8:	00c6303a 	nor	r3,zero,r3
   108ec:	18002b1e 	bne	r3,zero,1099c <__addsf3+0x450>
   108f0:	2149883a 	add	r4,r4,r5
   108f4:	3021883a 	mov	r16,r6
   108f8:	003f8606 	br	10714 <_gp+0xfffeecc4>
   108fc:	20001b1e 	bne	r4,zero,1096c <__addsf3+0x420>
   10900:	28003926 	beq	r5,zero,109e8 <__addsf3+0x49c>
   10904:	2809883a 	mov	r4,r5
   10908:	3823883a 	mov	r17,r7
   1090c:	04003fc4 	movi	r16,255
   10910:	003f2506 	br	105a8 <_gp+0xfffeeb58>
   10914:	01c03fc4 	movi	r7,255
   10918:	31c02226 	beq	r6,r7,109a4 <__addsf3+0x458>
   1091c:	00c7c83a 	sub	r3,zero,r3
   10920:	21010034 	orhi	r4,r4,1024
   10924:	01c006c4 	movi	r7,27
   10928:	38c03616 	blt	r7,r3,10a04 <__addsf3+0x4b8>
   1092c:	01c00804 	movi	r7,32
   10930:	38cfc83a 	sub	r7,r7,r3
   10934:	21ce983a 	sll	r7,r4,r7
   10938:	20c6d83a 	srl	r3,r4,r3
   1093c:	3808c03a 	cmpne	r4,r7,zero
   10940:	1906b03a 	or	r3,r3,r4
   10944:	1949883a 	add	r4,r3,r5
   10948:	3021883a 	mov	r16,r6
   1094c:	003f7106 	br	10714 <_gp+0xfffeecc4>
   10950:	283f1526 	beq	r5,zero,105a8 <_gp+0xfffeeb58>
   10954:	2145c83a 	sub	r2,r4,r5
   10958:	10c1002c 	andhi	r3,r2,1024
   1095c:	183f4f26 	beq	r3,zero,1069c <_gp+0xfffeec4c>
   10960:	2909c83a 	sub	r4,r5,r4
   10964:	3823883a 	mov	r17,r7
   10968:	003f0f06 	br	105a8 <_gp+0xfffeeb58>
   1096c:	28001a26 	beq	r5,zero,109d8 <__addsf3+0x48c>
   10970:	2008d0fa 	srli	r4,r4,3
   10974:	2080102c 	andhi	r2,r4,64
   10978:	10000526 	beq	r2,zero,10990 <__addsf3+0x444>
   1097c:	280ad0fa 	srli	r5,r5,3
   10980:	2880102c 	andhi	r2,r5,64
   10984:	1000021e 	bne	r2,zero,10990 <__addsf3+0x444>
   10988:	2809883a 	mov	r4,r5
   1098c:	3823883a 	mov	r17,r7
   10990:	200890fa 	slli	r4,r4,3
   10994:	04003fc4 	movi	r16,255
   10998:	003f0306 	br	105a8 <_gp+0xfffeeb58>
   1099c:	01c03fc4 	movi	r7,255
   109a0:	31ffe01e 	bne	r6,r7,10924 <_gp+0xfffeeed4>
   109a4:	2809883a 	mov	r4,r5
   109a8:	3021883a 	mov	r16,r6
   109ac:	003efe06 	br	105a8 <_gp+0xfffeeb58>
   109b0:	20001126 	beq	r4,zero,109f8 <__addsf3+0x4ac>
   109b4:	28000826 	beq	r5,zero,109d8 <__addsf3+0x48c>
   109b8:	2008d0fa 	srli	r4,r4,3
   109bc:	2080102c 	andhi	r2,r4,64
   109c0:	103ff326 	beq	r2,zero,10990 <_gp+0xfffeef40>
   109c4:	280ad0fa 	srli	r5,r5,3
   109c8:	2880102c 	andhi	r2,r5,64
   109cc:	103ff01e 	bne	r2,zero,10990 <_gp+0xfffeef40>
   109d0:	2809883a 	mov	r4,r5
   109d4:	003fee06 	br	10990 <_gp+0xfffeef40>
   109d8:	04003fc4 	movi	r16,255
   109dc:	003ef206 	br	105a8 <_gp+0xfffeeb58>
   109e0:	01000044 	movi	r4,1
   109e4:	003f9706 	br	10844 <_gp+0xfffeedf4>
   109e8:	0005883a 	mov	r2,zero
   109ec:	003f3406 	br	106c0 <_gp+0xfffeec70>
   109f0:	2809883a 	mov	r4,r5
   109f4:	003eec06 	br	105a8 <_gp+0xfffeeb58>
   109f8:	2809883a 	mov	r4,r5
   109fc:	04003fc4 	movi	r16,255
   10a00:	003ee906 	br	105a8 <_gp+0xfffeeb58>
   10a04:	00c00044 	movi	r3,1
   10a08:	003fce06 	br	10944 <_gp+0xfffeeef4>
   10a0c:	0005883a 	mov	r2,zero
   10a10:	003f4e06 	br	1074c <_gp+0xfffeecfc>

00010a14 <__divsf3>:
   10a14:	defff504 	addi	sp,sp,-44
   10a18:	200cd5fa 	srli	r6,r4,23
   10a1c:	dcc00415 	stw	r19,16(sp)
   10a20:	2026d7fa 	srli	r19,r4,31
   10a24:	00c02034 	movhi	r3,128
   10a28:	dd800715 	stw	r22,28(sp)
   10a2c:	dd000515 	stw	r20,20(sp)
   10a30:	dc800315 	stw	r18,12(sp)
   10a34:	18ffffc4 	addi	r3,r3,-1
   10a38:	dfc00a15 	stw	ra,40(sp)
   10a3c:	df000915 	stw	fp,36(sp)
   10a40:	ddc00815 	stw	r23,32(sp)
   10a44:	dd400615 	stw	r21,24(sp)
   10a48:	dc400215 	stw	r17,8(sp)
   10a4c:	dc000115 	stw	r16,4(sp)
   10a50:	35003fcc 	andi	r20,r6,255
   10a54:	1924703a 	and	r18,r3,r4
   10a58:	9d803fcc 	andi	r22,r19,255
   10a5c:	a0005226 	beq	r20,zero,10ba8 <__divsf3+0x194>
   10a60:	00803fc4 	movi	r2,255
   10a64:	a0802e26 	beq	r20,r2,10b20 <__divsf3+0x10c>
   10a68:	91002034 	orhi	r4,r18,128
   10a6c:	202490fa 	slli	r18,r4,3
   10a70:	a53fe044 	addi	r20,r20,-127
   10a74:	0021883a 	mov	r16,zero
   10a78:	002f883a 	mov	r23,zero
   10a7c:	280cd5fa 	srli	r6,r5,23
   10a80:	282ad7fa 	srli	r21,r5,31
   10a84:	00c02034 	movhi	r3,128
   10a88:	18ffffc4 	addi	r3,r3,-1
   10a8c:	31803fcc 	andi	r6,r6,255
   10a90:	1962703a 	and	r17,r3,r5
   10a94:	af003fcc 	andi	fp,r21,255
   10a98:	30004a26 	beq	r6,zero,10bc4 <__divsf3+0x1b0>
   10a9c:	00803fc4 	movi	r2,255
   10aa0:	30804526 	beq	r6,r2,10bb8 <__divsf3+0x1a4>
   10aa4:	89402034 	orhi	r5,r17,128
   10aa8:	282290fa 	slli	r17,r5,3
   10aac:	31bfe044 	addi	r6,r6,-127
   10ab0:	000b883a 	mov	r5,zero
   10ab4:	2c20b03a 	or	r16,r5,r16
   10ab8:	802090ba 	slli	r16,r16,2
   10abc:	00800074 	movhi	r2,1
   10ac0:	1082b804 	addi	r2,r2,2784
   10ac4:	80a1883a 	add	r16,r16,r2
   10ac8:	81000017 	ldw	r4,0(r16)
   10acc:	9d46f03a 	xor	r3,r19,r21
   10ad0:	180f883a 	mov	r7,r3
   10ad4:	18803fcc 	andi	r2,r3,255
   10ad8:	a18dc83a 	sub	r6,r20,r6
   10adc:	2000683a 	jmp	r4
   10ae0:	00010cc4 	movi	zero,1075
   10ae4:	00010b48 	cmpgei	zero,zero,1069
   10ae8:	00010cb8 	rdprs	zero,zero,1074
   10aec:	00010b34 	movhi	zero,1068
   10af0:	00010cb8 	rdprs	zero,zero,1074
   10af4:	00010c90 	cmplti	zero,zero,1074
   10af8:	00010cb8 	rdprs	zero,zero,1074
   10afc:	00010b34 	movhi	zero,1068
   10b00:	00010b48 	cmpgei	zero,zero,1069
   10b04:	00010b48 	cmpgei	zero,zero,1069
   10b08:	00010c90 	cmplti	zero,zero,1074
   10b0c:	00010b34 	movhi	zero,1068
   10b10:	00010da4 	muli	zero,zero,1078
   10b14:	00010da4 	muli	zero,zero,1078
   10b18:	00010da4 	muli	zero,zero,1078
   10b1c:	00010d58 	cmpnei	zero,zero,1077
   10b20:	9000581e 	bne	r18,zero,10c84 <__divsf3+0x270>
   10b24:	04000204 	movi	r16,8
   10b28:	05c00084 	movi	r23,2
   10b2c:	003fd306 	br	10a7c <_gp+0xfffef02c>
   10b30:	0023883a 	mov	r17,zero
   10b34:	e02d883a 	mov	r22,fp
   10b38:	282f883a 	mov	r23,r5
   10b3c:	00800084 	movi	r2,2
   10b40:	b8808f1e 	bne	r23,r2,10d80 <__divsf3+0x36c>
   10b44:	b005883a 	mov	r2,r22
   10b48:	11c0004c 	andi	r7,r2,1
   10b4c:	013fffc4 	movi	r4,-1
   10b50:	000d883a 	mov	r6,zero
   10b54:	21003fcc 	andi	r4,r4,255
   10b58:	200895fa 	slli	r4,r4,23
   10b5c:	38803fcc 	andi	r2,r7,255
   10b60:	00c02034 	movhi	r3,128
   10b64:	100497fa 	slli	r2,r2,31
   10b68:	18ffffc4 	addi	r3,r3,-1
   10b6c:	30c6703a 	and	r3,r6,r3
   10b70:	1906b03a 	or	r3,r3,r4
   10b74:	1884b03a 	or	r2,r3,r2
   10b78:	dfc00a17 	ldw	ra,40(sp)
   10b7c:	df000917 	ldw	fp,36(sp)
   10b80:	ddc00817 	ldw	r23,32(sp)
   10b84:	dd800717 	ldw	r22,28(sp)
   10b88:	dd400617 	ldw	r21,24(sp)
   10b8c:	dd000517 	ldw	r20,20(sp)
   10b90:	dcc00417 	ldw	r19,16(sp)
   10b94:	dc800317 	ldw	r18,12(sp)
   10b98:	dc400217 	ldw	r17,8(sp)
   10b9c:	dc000117 	ldw	r16,4(sp)
   10ba0:	dec00b04 	addi	sp,sp,44
   10ba4:	f800283a 	ret
   10ba8:	90002b1e 	bne	r18,zero,10c58 <__divsf3+0x244>
   10bac:	04000104 	movi	r16,4
   10bb0:	05c00044 	movi	r23,1
   10bb4:	003fb106 	br	10a7c <_gp+0xfffef02c>
   10bb8:	8800251e 	bne	r17,zero,10c50 <__divsf3+0x23c>
   10bbc:	01400084 	movi	r5,2
   10bc0:	00000206 	br	10bcc <__divsf3+0x1b8>
   10bc4:	88001a1e 	bne	r17,zero,10c30 <__divsf3+0x21c>
   10bc8:	01400044 	movi	r5,1
   10bcc:	8160b03a 	or	r16,r16,r5
   10bd0:	802090ba 	slli	r16,r16,2
   10bd4:	00c00074 	movhi	r3,1
   10bd8:	18c2fc04 	addi	r3,r3,3056
   10bdc:	80e1883a 	add	r16,r16,r3
   10be0:	80c00017 	ldw	r3,0(r16)
   10be4:	9d44f03a 	xor	r2,r19,r21
   10be8:	a18dc83a 	sub	r6,r20,r6
   10bec:	1800683a 	jmp	r3
   10bf0:	00010b48 	cmpgei	zero,zero,1069
   10bf4:	00010b48 	cmpgei	zero,zero,1069
   10bf8:	00010d94 	movui	zero,1078
   10bfc:	00010b30 	cmpltui	zero,zero,1068
   10c00:	00010d94 	movui	zero,1078
   10c04:	00010c90 	cmplti	zero,zero,1074
   10c08:	00010d94 	movui	zero,1078
   10c0c:	00010b30 	cmpltui	zero,zero,1068
   10c10:	00010b48 	cmpgei	zero,zero,1069
   10c14:	00010b48 	cmpgei	zero,zero,1069
   10c18:	00010c90 	cmplti	zero,zero,1074
   10c1c:	00010b30 	cmpltui	zero,zero,1068
   10c20:	00010da4 	muli	zero,zero,1078
   10c24:	00010da4 	muli	zero,zero,1078
   10c28:	00010da4 	muli	zero,zero,1078
   10c2c:	00010dbc 	xorhi	zero,zero,1078
   10c30:	8809883a 	mov	r4,r17
   10c34:	001139c0 	call	1139c <__clzsi2>
   10c38:	10fffec4 	addi	r3,r2,-5
   10c3c:	10801d84 	addi	r2,r2,118
   10c40:	88e2983a 	sll	r17,r17,r3
   10c44:	008dc83a 	sub	r6,zero,r2
   10c48:	000b883a 	mov	r5,zero
   10c4c:	003f9906 	br	10ab4 <_gp+0xfffef064>
   10c50:	014000c4 	movi	r5,3
   10c54:	003f9706 	br	10ab4 <_gp+0xfffef064>
   10c58:	9009883a 	mov	r4,r18
   10c5c:	d9400015 	stw	r5,0(sp)
   10c60:	001139c0 	call	1139c <__clzsi2>
   10c64:	10fffec4 	addi	r3,r2,-5
   10c68:	11801d84 	addi	r6,r2,118
   10c6c:	90e4983a 	sll	r18,r18,r3
   10c70:	01a9c83a 	sub	r20,zero,r6
   10c74:	0021883a 	mov	r16,zero
   10c78:	002f883a 	mov	r23,zero
   10c7c:	d9400017 	ldw	r5,0(sp)
   10c80:	003f7e06 	br	10a7c <_gp+0xfffef02c>
   10c84:	04000304 	movi	r16,12
   10c88:	05c000c4 	movi	r23,3
   10c8c:	003f7b06 	br	10a7c <_gp+0xfffef02c>
   10c90:	01802034 	movhi	r6,128
   10c94:	000f883a 	mov	r7,zero
   10c98:	31bfffc4 	addi	r6,r6,-1
   10c9c:	013fffc4 	movi	r4,-1
   10ca0:	003fac06 	br	10b54 <_gp+0xfffef104>
   10ca4:	01400044 	movi	r5,1
   10ca8:	2909c83a 	sub	r4,r5,r4
   10cac:	00c006c4 	movi	r3,27
   10cb0:	19004b0e 	bge	r3,r4,10de0 <__divsf3+0x3cc>
   10cb4:	114e703a 	and	r7,r2,r5
   10cb8:	0009883a 	mov	r4,zero
   10cbc:	000d883a 	mov	r6,zero
   10cc0:	003fa406 	br	10b54 <_gp+0xfffef104>
   10cc4:	9006917a 	slli	r3,r18,5
   10cc8:	8822917a 	slli	r17,r17,5
   10ccc:	1c40372e 	bgeu	r3,r17,10dac <__divsf3+0x398>
   10cd0:	31bfffc4 	addi	r6,r6,-1
   10cd4:	010006c4 	movi	r4,27
   10cd8:	000b883a 	mov	r5,zero
   10cdc:	180f883a 	mov	r7,r3
   10ce0:	294b883a 	add	r5,r5,r5
   10ce4:	18c7883a 	add	r3,r3,r3
   10ce8:	38000116 	blt	r7,zero,10cf0 <__divsf3+0x2dc>
   10cec:	1c400236 	bltu	r3,r17,10cf8 <__divsf3+0x2e4>
   10cf0:	1c47c83a 	sub	r3,r3,r17
   10cf4:	29400054 	ori	r5,r5,1
   10cf8:	213fffc4 	addi	r4,r4,-1
   10cfc:	203ff71e 	bne	r4,zero,10cdc <_gp+0xfffef28c>
   10d00:	1806c03a 	cmpne	r3,r3,zero
   10d04:	1962b03a 	or	r17,r3,r5
   10d08:	31001fc4 	addi	r4,r6,127
   10d0c:	013fe50e 	bge	zero,r4,10ca4 <_gp+0xfffef254>
   10d10:	88c001cc 	andi	r3,r17,7
   10d14:	18000426 	beq	r3,zero,10d28 <__divsf3+0x314>
   10d18:	88c003cc 	andi	r3,r17,15
   10d1c:	01400104 	movi	r5,4
   10d20:	19400126 	beq	r3,r5,10d28 <__divsf3+0x314>
   10d24:	8963883a 	add	r17,r17,r5
   10d28:	88c2002c 	andhi	r3,r17,2048
   10d2c:	18000426 	beq	r3,zero,10d40 <__divsf3+0x32c>
   10d30:	00fe0034 	movhi	r3,63488
   10d34:	18ffffc4 	addi	r3,r3,-1
   10d38:	31002004 	addi	r4,r6,128
   10d3c:	88e2703a 	and	r17,r17,r3
   10d40:	00c03f84 	movi	r3,254
   10d44:	193f8016 	blt	r3,r4,10b48 <_gp+0xfffef0f8>
   10d48:	880c91ba 	slli	r6,r17,6
   10d4c:	11c0004c 	andi	r7,r2,1
   10d50:	300cd27a 	srli	r6,r6,9
   10d54:	003f7f06 	br	10b54 <_gp+0xfffef104>
   10d58:	9080102c 	andhi	r2,r18,64
   10d5c:	10000226 	beq	r2,zero,10d68 <__divsf3+0x354>
   10d60:	8880102c 	andhi	r2,r17,64
   10d64:	10001826 	beq	r2,zero,10dc8 <__divsf3+0x3b4>
   10d68:	00802034 	movhi	r2,128
   10d6c:	91801034 	orhi	r6,r18,64
   10d70:	10bfffc4 	addi	r2,r2,-1
   10d74:	980f883a 	mov	r7,r19
   10d78:	308c703a 	and	r6,r6,r2
   10d7c:	003fc706 	br	10c9c <_gp+0xfffef24c>
   10d80:	008000c4 	movi	r2,3
   10d84:	b8802d26 	beq	r23,r2,10e3c <__divsf3+0x428>
   10d88:	00c00044 	movi	r3,1
   10d8c:	b005883a 	mov	r2,r22
   10d90:	b8ffdd1e 	bne	r23,r3,10d08 <_gp+0xfffef2b8>
   10d94:	11c0004c 	andi	r7,r2,1
   10d98:	0009883a 	mov	r4,zero
   10d9c:	000d883a 	mov	r6,zero
   10da0:	003f6c06 	br	10b54 <_gp+0xfffef104>
   10da4:	9023883a 	mov	r17,r18
   10da8:	003f6406 	br	10b3c <_gp+0xfffef0ec>
   10dac:	1c47c83a 	sub	r3,r3,r17
   10db0:	01000684 	movi	r4,26
   10db4:	01400044 	movi	r5,1
   10db8:	003fc806 	br	10cdc <_gp+0xfffef28c>
   10dbc:	9080102c 	andhi	r2,r18,64
   10dc0:	103fe926 	beq	r2,zero,10d68 <_gp+0xfffef318>
   10dc4:	0023883a 	mov	r17,zero
   10dc8:	00802034 	movhi	r2,128
   10dcc:	89801034 	orhi	r6,r17,64
   10dd0:	10bfffc4 	addi	r2,r2,-1
   10dd4:	a80f883a 	mov	r7,r21
   10dd8:	308c703a 	and	r6,r6,r2
   10ddc:	003faf06 	br	10c9c <_gp+0xfffef24c>
   10de0:	01c00804 	movi	r7,32
   10de4:	390fc83a 	sub	r7,r7,r4
   10de8:	89ce983a 	sll	r7,r17,r7
   10dec:	890ad83a 	srl	r5,r17,r4
   10df0:	380ec03a 	cmpne	r7,r7,zero
   10df4:	29cab03a 	or	r5,r5,r7
   10df8:	28c001cc 	andi	r3,r5,7
   10dfc:	18000426 	beq	r3,zero,10e10 <__divsf3+0x3fc>
   10e00:	28c003cc 	andi	r3,r5,15
   10e04:	01000104 	movi	r4,4
   10e08:	19000126 	beq	r3,r4,10e10 <__divsf3+0x3fc>
   10e0c:	290b883a 	add	r5,r5,r4
   10e10:	28c1002c 	andhi	r3,r5,1024
   10e14:	18000426 	beq	r3,zero,10e28 <__divsf3+0x414>
   10e18:	11c0004c 	andi	r7,r2,1
   10e1c:	01000044 	movi	r4,1
   10e20:	000d883a 	mov	r6,zero
   10e24:	003f4b06 	br	10b54 <_gp+0xfffef104>
   10e28:	280a91ba 	slli	r5,r5,6
   10e2c:	11c0004c 	andi	r7,r2,1
   10e30:	0009883a 	mov	r4,zero
   10e34:	280cd27a 	srli	r6,r5,9
   10e38:	003f4606 	br	10b54 <_gp+0xfffef104>
   10e3c:	00802034 	movhi	r2,128
   10e40:	89801034 	orhi	r6,r17,64
   10e44:	10bfffc4 	addi	r2,r2,-1
   10e48:	b00f883a 	mov	r7,r22
   10e4c:	308c703a 	and	r6,r6,r2
   10e50:	003f9206 	br	10c9c <_gp+0xfffef24c>

00010e54 <__mulsf3>:
   10e54:	defff504 	addi	sp,sp,-44
   10e58:	dc000115 	stw	r16,4(sp)
   10e5c:	2020d5fa 	srli	r16,r4,23
   10e60:	dd400615 	stw	r21,24(sp)
   10e64:	202ad7fa 	srli	r21,r4,31
   10e68:	dc800315 	stw	r18,12(sp)
   10e6c:	04802034 	movhi	r18,128
   10e70:	df000915 	stw	fp,36(sp)
   10e74:	dd000515 	stw	r20,20(sp)
   10e78:	94bfffc4 	addi	r18,r18,-1
   10e7c:	dfc00a15 	stw	ra,40(sp)
   10e80:	ddc00815 	stw	r23,32(sp)
   10e84:	dd800715 	stw	r22,28(sp)
   10e88:	dcc00415 	stw	r19,16(sp)
   10e8c:	dc400215 	stw	r17,8(sp)
   10e90:	84003fcc 	andi	r16,r16,255
   10e94:	9124703a 	and	r18,r18,r4
   10e98:	a829883a 	mov	r20,r21
   10e9c:	af003fcc 	andi	fp,r21,255
   10ea0:	80005426 	beq	r16,zero,10ff4 <__mulsf3+0x1a0>
   10ea4:	00803fc4 	movi	r2,255
   10ea8:	80802f26 	beq	r16,r2,10f68 <__mulsf3+0x114>
   10eac:	91002034 	orhi	r4,r18,128
   10eb0:	202490fa 	slli	r18,r4,3
   10eb4:	843fe044 	addi	r16,r16,-127
   10eb8:	0023883a 	mov	r17,zero
   10ebc:	002f883a 	mov	r23,zero
   10ec0:	2804d5fa 	srli	r2,r5,23
   10ec4:	282cd7fa 	srli	r22,r5,31
   10ec8:	01002034 	movhi	r4,128
   10ecc:	213fffc4 	addi	r4,r4,-1
   10ed0:	10803fcc 	andi	r2,r2,255
   10ed4:	2166703a 	and	r19,r4,r5
   10ed8:	b1803fcc 	andi	r6,r22,255
   10edc:	10004c26 	beq	r2,zero,11010 <__mulsf3+0x1bc>
   10ee0:	00c03fc4 	movi	r3,255
   10ee4:	10c04726 	beq	r2,r3,11004 <__mulsf3+0x1b0>
   10ee8:	99002034 	orhi	r4,r19,128
   10eec:	202690fa 	slli	r19,r4,3
   10ef0:	10bfe044 	addi	r2,r2,-127
   10ef4:	0007883a 	mov	r3,zero
   10ef8:	80a1883a 	add	r16,r16,r2
   10efc:	010003c4 	movi	r4,15
   10f00:	1c44b03a 	or	r2,r3,r17
   10f04:	b56af03a 	xor	r21,r22,r21
   10f08:	81c00044 	addi	r7,r16,1
   10f0c:	20806b36 	bltu	r4,r2,110bc <__mulsf3+0x268>
   10f10:	100490ba 	slli	r2,r2,2
   10f14:	01000074 	movhi	r4,1
   10f18:	2103ca04 	addi	r4,r4,3880
   10f1c:	1105883a 	add	r2,r2,r4
   10f20:	10800017 	ldw	r2,0(r2)
   10f24:	1000683a 	jmp	r2
   10f28:	000110bc 	xorhi	zero,zero,1090
   10f2c:	00010f7c 	xorhi	zero,zero,1085
   10f30:	00010f7c 	xorhi	zero,zero,1085
   10f34:	00010f78 	rdprs	zero,zero,1085
   10f38:	000110a0 	cmpeqi	zero,zero,1090
   10f3c:	000110a0 	cmpeqi	zero,zero,1090
   10f40:	0001108c 	andi	zero,zero,1090
   10f44:	00010f78 	rdprs	zero,zero,1085
   10f48:	000110a0 	cmpeqi	zero,zero,1090
   10f4c:	0001108c 	andi	zero,zero,1090
   10f50:	000110a0 	cmpeqi	zero,zero,1090
   10f54:	00010f78 	rdprs	zero,zero,1085
   10f58:	000110ac 	andhi	zero,zero,1090
   10f5c:	000110ac 	andhi	zero,zero,1090
   10f60:	000110ac 	andhi	zero,zero,1090
   10f64:	000111bc 	xorhi	zero,zero,1094
   10f68:	90003b1e 	bne	r18,zero,11058 <__mulsf3+0x204>
   10f6c:	04400204 	movi	r17,8
   10f70:	05c00084 	movi	r23,2
   10f74:	003fd206 	br	10ec0 <_gp+0xfffef470>
   10f78:	302b883a 	mov	r21,r6
   10f7c:	00800084 	movi	r2,2
   10f80:	18802626 	beq	r3,r2,1101c <__mulsf3+0x1c8>
   10f84:	008000c4 	movi	r2,3
   10f88:	1880b826 	beq	r3,r2,1126c <__mulsf3+0x418>
   10f8c:	00800044 	movi	r2,1
   10f90:	1880af1e 	bne	r3,r2,11250 <__mulsf3+0x3fc>
   10f94:	a829883a 	mov	r20,r21
   10f98:	0007883a 	mov	r3,zero
   10f9c:	0009883a 	mov	r4,zero
   10fa0:	18803fcc 	andi	r2,r3,255
   10fa4:	100695fa 	slli	r3,r2,23
   10fa8:	a0803fcc 	andi	r2,r20,255
   10fac:	100a97fa 	slli	r5,r2,31
   10fb0:	00802034 	movhi	r2,128
   10fb4:	10bfffc4 	addi	r2,r2,-1
   10fb8:	2084703a 	and	r2,r4,r2
   10fbc:	10c4b03a 	or	r2,r2,r3
   10fc0:	1144b03a 	or	r2,r2,r5
   10fc4:	dfc00a17 	ldw	ra,40(sp)
   10fc8:	df000917 	ldw	fp,36(sp)
   10fcc:	ddc00817 	ldw	r23,32(sp)
   10fd0:	dd800717 	ldw	r22,28(sp)
   10fd4:	dd400617 	ldw	r21,24(sp)
   10fd8:	dd000517 	ldw	r20,20(sp)
   10fdc:	dcc00417 	ldw	r19,16(sp)
   10fe0:	dc800317 	ldw	r18,12(sp)
   10fe4:	dc400217 	ldw	r17,8(sp)
   10fe8:	dc000117 	ldw	r16,4(sp)
   10fec:	dec00b04 	addi	sp,sp,44
   10ff0:	f800283a 	ret
   10ff4:	90000d1e 	bne	r18,zero,1102c <__mulsf3+0x1d8>
   10ff8:	04400104 	movi	r17,4
   10ffc:	05c00044 	movi	r23,1
   11000:	003faf06 	br	10ec0 <_gp+0xfffef470>
   11004:	9806c03a 	cmpne	r3,r19,zero
   11008:	18c00084 	addi	r3,r3,2
   1100c:	003fba06 	br	10ef8 <_gp+0xfffef4a8>
   11010:	9800141e 	bne	r19,zero,11064 <__mulsf3+0x210>
   11014:	00c00044 	movi	r3,1
   11018:	003fb706 	br	10ef8 <_gp+0xfffef4a8>
   1101c:	a829883a 	mov	r20,r21
   11020:	00ffffc4 	movi	r3,-1
   11024:	0009883a 	mov	r4,zero
   11028:	003fdd06 	br	10fa0 <_gp+0xfffef550>
   1102c:	9009883a 	mov	r4,r18
   11030:	d9400015 	stw	r5,0(sp)
   11034:	001139c0 	call	1139c <__clzsi2>
   11038:	10fffec4 	addi	r3,r2,-5
   1103c:	10801d84 	addi	r2,r2,118
   11040:	90e4983a 	sll	r18,r18,r3
   11044:	00a1c83a 	sub	r16,zero,r2
   11048:	0023883a 	mov	r17,zero
   1104c:	002f883a 	mov	r23,zero
   11050:	d9400017 	ldw	r5,0(sp)
   11054:	003f9a06 	br	10ec0 <_gp+0xfffef470>
   11058:	04400304 	movi	r17,12
   1105c:	05c000c4 	movi	r23,3
   11060:	003f9706 	br	10ec0 <_gp+0xfffef470>
   11064:	9809883a 	mov	r4,r19
   11068:	d9800015 	stw	r6,0(sp)
   1106c:	001139c0 	call	1139c <__clzsi2>
   11070:	10fffec4 	addi	r3,r2,-5
   11074:	10801d84 	addi	r2,r2,118
   11078:	98e6983a 	sll	r19,r19,r3
   1107c:	0085c83a 	sub	r2,zero,r2
   11080:	0007883a 	mov	r3,zero
   11084:	d9800017 	ldw	r6,0(sp)
   11088:	003f9b06 	br	10ef8 <_gp+0xfffef4a8>
   1108c:	01002034 	movhi	r4,128
   11090:	0029883a 	mov	r20,zero
   11094:	213fffc4 	addi	r4,r4,-1
   11098:	00ffffc4 	movi	r3,-1
   1109c:	003fc006 	br	10fa0 <_gp+0xfffef550>
   110a0:	9027883a 	mov	r19,r18
   110a4:	b807883a 	mov	r3,r23
   110a8:	003fb406 	br	10f7c <_gp+0xfffef52c>
   110ac:	9027883a 	mov	r19,r18
   110b0:	e02b883a 	mov	r21,fp
   110b4:	b807883a 	mov	r3,r23
   110b8:	003fb006 	br	10f7c <_gp+0xfffef52c>
   110bc:	9028d43a 	srli	r20,r18,16
   110c0:	982cd43a 	srli	r22,r19,16
   110c4:	94bfffcc 	andi	r18,r18,65535
   110c8:	9cffffcc 	andi	r19,r19,65535
   110cc:	980b883a 	mov	r5,r19
   110d0:	9009883a 	mov	r4,r18
   110d4:	d9c00015 	stw	r7,0(sp)
   110d8:	00114000 	call	11400 <__mulsi3>
   110dc:	a00b883a 	mov	r5,r20
   110e0:	9809883a 	mov	r4,r19
   110e4:	1023883a 	mov	r17,r2
   110e8:	00114000 	call	11400 <__mulsi3>
   110ec:	a009883a 	mov	r4,r20
   110f0:	b00b883a 	mov	r5,r22
   110f4:	1027883a 	mov	r19,r2
   110f8:	00114000 	call	11400 <__mulsi3>
   110fc:	b00b883a 	mov	r5,r22
   11100:	9009883a 	mov	r4,r18
   11104:	1029883a 	mov	r20,r2
   11108:	00114000 	call	11400 <__mulsi3>
   1110c:	8806d43a 	srli	r3,r17,16
   11110:	14c5883a 	add	r2,r2,r19
   11114:	d9c00017 	ldw	r7,0(sp)
   11118:	1885883a 	add	r2,r3,r2
   1111c:	14c0022e 	bgeu	r2,r19,11128 <__mulsf3+0x2d4>
   11120:	00c00074 	movhi	r3,1
   11124:	a0e9883a 	add	r20,r20,r3
   11128:	1026943a 	slli	r19,r2,16
   1112c:	8c7fffcc 	andi	r17,r17,65535
   11130:	1004d43a 	srli	r2,r2,16
   11134:	9c63883a 	add	r17,r19,r17
   11138:	882691ba 	slli	r19,r17,6
   1113c:	1505883a 	add	r2,r2,r20
   11140:	8822d6ba 	srli	r17,r17,26
   11144:	100891ba 	slli	r4,r2,6
   11148:	9826c03a 	cmpne	r19,r19,zero
   1114c:	9c62b03a 	or	r17,r19,r17
   11150:	8926b03a 	or	r19,r17,r4
   11154:	9882002c 	andhi	r2,r19,2048
   11158:	10000426 	beq	r2,zero,1116c <__mulsf3+0x318>
   1115c:	9804d07a 	srli	r2,r19,1
   11160:	9900004c 	andi	r4,r19,1
   11164:	3821883a 	mov	r16,r7
   11168:	1126b03a 	or	r19,r2,r4
   1116c:	80c01fc4 	addi	r3,r16,127
   11170:	00c0210e 	bge	zero,r3,111f8 <__mulsf3+0x3a4>
   11174:	988001cc 	andi	r2,r19,7
   11178:	10000426 	beq	r2,zero,1118c <__mulsf3+0x338>
   1117c:	988003cc 	andi	r2,r19,15
   11180:	01000104 	movi	r4,4
   11184:	11000126 	beq	r2,r4,1118c <__mulsf3+0x338>
   11188:	9927883a 	add	r19,r19,r4
   1118c:	9882002c 	andhi	r2,r19,2048
   11190:	10000426 	beq	r2,zero,111a4 <__mulsf3+0x350>
   11194:	00be0034 	movhi	r2,63488
   11198:	10bfffc4 	addi	r2,r2,-1
   1119c:	80c02004 	addi	r3,r16,128
   111a0:	98a6703a 	and	r19,r19,r2
   111a4:	00803f84 	movi	r2,254
   111a8:	10ff9c16 	blt	r2,r3,1101c <_gp+0xfffef5cc>
   111ac:	980891ba 	slli	r4,r19,6
   111b0:	a829883a 	mov	r20,r21
   111b4:	2008d27a 	srli	r4,r4,9
   111b8:	003f7906 	br	10fa0 <_gp+0xfffef550>
   111bc:	9080102c 	andhi	r2,r18,64
   111c0:	10000826 	beq	r2,zero,111e4 <__mulsf3+0x390>
   111c4:	9880102c 	andhi	r2,r19,64
   111c8:	1000061e 	bne	r2,zero,111e4 <__mulsf3+0x390>
   111cc:	00802034 	movhi	r2,128
   111d0:	99001034 	orhi	r4,r19,64
   111d4:	10bfffc4 	addi	r2,r2,-1
   111d8:	b029883a 	mov	r20,r22
   111dc:	2088703a 	and	r4,r4,r2
   111e0:	003fad06 	br	11098 <_gp+0xfffef648>
   111e4:	00802034 	movhi	r2,128
   111e8:	91001034 	orhi	r4,r18,64
   111ec:	10bfffc4 	addi	r2,r2,-1
   111f0:	2088703a 	and	r4,r4,r2
   111f4:	003fa806 	br	11098 <_gp+0xfffef648>
   111f8:	00800044 	movi	r2,1
   111fc:	10c7c83a 	sub	r3,r2,r3
   11200:	008006c4 	movi	r2,27
   11204:	10ff6316 	blt	r2,r3,10f94 <_gp+0xfffef544>
   11208:	00800804 	movi	r2,32
   1120c:	10c5c83a 	sub	r2,r2,r3
   11210:	9884983a 	sll	r2,r19,r2
   11214:	98c6d83a 	srl	r3,r19,r3
   11218:	1004c03a 	cmpne	r2,r2,zero
   1121c:	1884b03a 	or	r2,r3,r2
   11220:	10c001cc 	andi	r3,r2,7
   11224:	18000426 	beq	r3,zero,11238 <__mulsf3+0x3e4>
   11228:	10c003cc 	andi	r3,r2,15
   1122c:	01000104 	movi	r4,4
   11230:	19000126 	beq	r3,r4,11238 <__mulsf3+0x3e4>
   11234:	1105883a 	add	r2,r2,r4
   11238:	10c1002c 	andhi	r3,r2,1024
   1123c:	18000626 	beq	r3,zero,11258 <__mulsf3+0x404>
   11240:	a829883a 	mov	r20,r21
   11244:	00c00044 	movi	r3,1
   11248:	0009883a 	mov	r4,zero
   1124c:	003f5406 	br	10fa0 <_gp+0xfffef550>
   11250:	3821883a 	mov	r16,r7
   11254:	003fc506 	br	1116c <_gp+0xfffef71c>
   11258:	100491ba 	slli	r2,r2,6
   1125c:	a829883a 	mov	r20,r21
   11260:	0007883a 	mov	r3,zero
   11264:	1008d27a 	srli	r4,r2,9
   11268:	003f4d06 	br	10fa0 <_gp+0xfffef550>
   1126c:	00802034 	movhi	r2,128
   11270:	99001034 	orhi	r4,r19,64
   11274:	10bfffc4 	addi	r2,r2,-1
   11278:	a829883a 	mov	r20,r21
   1127c:	2088703a 	and	r4,r4,r2
   11280:	003f8506 	br	11098 <_gp+0xfffef648>

00011284 <__fixsfsi>:
   11284:	200ad5fa 	srli	r5,r4,23
   11288:	00c02034 	movhi	r3,128
   1128c:	18ffffc4 	addi	r3,r3,-1
   11290:	29403fcc 	andi	r5,r5,255
   11294:	00801f84 	movi	r2,126
   11298:	1906703a 	and	r3,r3,r4
   1129c:	2008d7fa 	srli	r4,r4,31
   112a0:	11400e0e 	bge	r2,r5,112dc <__fixsfsi+0x58>
   112a4:	00802744 	movi	r2,157
   112a8:	11400816 	blt	r2,r5,112cc <__fixsfsi+0x48>
   112ac:	00802544 	movi	r2,149
   112b0:	18c02034 	orhi	r3,r3,128
   112b4:	11400b0e 	bge	r2,r5,112e4 <__fixsfsi+0x60>
   112b8:	28bfda84 	addi	r2,r5,-150
   112bc:	1884983a 	sll	r2,r3,r2
   112c0:	20000726 	beq	r4,zero,112e0 <__fixsfsi+0x5c>
   112c4:	0085c83a 	sub	r2,zero,r2
   112c8:	f800283a 	ret
   112cc:	00a00034 	movhi	r2,32768
   112d0:	10bfffc4 	addi	r2,r2,-1
   112d4:	2085883a 	add	r2,r4,r2
   112d8:	f800283a 	ret
   112dc:	0005883a 	mov	r2,zero
   112e0:	f800283a 	ret
   112e4:	00802584 	movi	r2,150
   112e8:	1145c83a 	sub	r2,r2,r5
   112ec:	1884d83a 	srl	r2,r3,r2
   112f0:	003ff306 	br	112c0 <_gp+0xfffef870>

000112f4 <__floatunsidf>:
   112f4:	defffe04 	addi	sp,sp,-8
   112f8:	dc000015 	stw	r16,0(sp)
   112fc:	dfc00115 	stw	ra,4(sp)
   11300:	2021883a 	mov	r16,r4
   11304:	20002226 	beq	r4,zero,11390 <__floatunsidf+0x9c>
   11308:	001139c0 	call	1139c <__clzsi2>
   1130c:	01010784 	movi	r4,1054
   11310:	2089c83a 	sub	r4,r4,r2
   11314:	01810cc4 	movi	r6,1075
   11318:	310dc83a 	sub	r6,r6,r4
   1131c:	00c007c4 	movi	r3,31
   11320:	1980120e 	bge	r3,r6,1136c <__floatunsidf+0x78>
   11324:	00c104c4 	movi	r3,1043
   11328:	1907c83a 	sub	r3,r3,r4
   1132c:	80ca983a 	sll	r5,r16,r3
   11330:	00800434 	movhi	r2,16
   11334:	10bfffc4 	addi	r2,r2,-1
   11338:	2101ffcc 	andi	r4,r4,2047
   1133c:	0021883a 	mov	r16,zero
   11340:	288a703a 	and	r5,r5,r2
   11344:	2008953a 	slli	r4,r4,20
   11348:	00c00434 	movhi	r3,16
   1134c:	18ffffc4 	addi	r3,r3,-1
   11350:	28c6703a 	and	r3,r5,r3
   11354:	8005883a 	mov	r2,r16
   11358:	1906b03a 	or	r3,r3,r4
   1135c:	dfc00117 	ldw	ra,4(sp)
   11360:	dc000017 	ldw	r16,0(sp)
   11364:	dec00204 	addi	sp,sp,8
   11368:	f800283a 	ret
   1136c:	00c002c4 	movi	r3,11
   11370:	188bc83a 	sub	r5,r3,r2
   11374:	814ad83a 	srl	r5,r16,r5
   11378:	00c00434 	movhi	r3,16
   1137c:	18ffffc4 	addi	r3,r3,-1
   11380:	81a0983a 	sll	r16,r16,r6
   11384:	2101ffcc 	andi	r4,r4,2047
   11388:	28ca703a 	and	r5,r5,r3
   1138c:	003fed06 	br	11344 <_gp+0xfffef8f4>
   11390:	0009883a 	mov	r4,zero
   11394:	000b883a 	mov	r5,zero
   11398:	003fea06 	br	11344 <_gp+0xfffef8f4>

0001139c <__clzsi2>:
   1139c:	00bfffd4 	movui	r2,65535
   113a0:	11000536 	bltu	r2,r4,113b8 <__clzsi2+0x1c>
   113a4:	00803fc4 	movi	r2,255
   113a8:	11000f36 	bltu	r2,r4,113e8 <__clzsi2+0x4c>
   113ac:	00800804 	movi	r2,32
   113b0:	0007883a 	mov	r3,zero
   113b4:	00000506 	br	113cc <__clzsi2+0x30>
   113b8:	00804034 	movhi	r2,256
   113bc:	10bfffc4 	addi	r2,r2,-1
   113c0:	11000c2e 	bgeu	r2,r4,113f4 <__clzsi2+0x58>
   113c4:	00800204 	movi	r2,8
   113c8:	00c00604 	movi	r3,24
   113cc:	20c8d83a 	srl	r4,r4,r3
   113d0:	00c000b4 	movhi	r3,2
   113d4:	18e54c44 	addi	r3,r3,-27343
   113d8:	1909883a 	add	r4,r3,r4
   113dc:	20c00003 	ldbu	r3,0(r4)
   113e0:	10c5c83a 	sub	r2,r2,r3
   113e4:	f800283a 	ret
   113e8:	00800604 	movi	r2,24
   113ec:	00c00204 	movi	r3,8
   113f0:	003ff606 	br	113cc <_gp+0xfffef97c>
   113f4:	00800404 	movi	r2,16
   113f8:	1007883a 	mov	r3,r2
   113fc:	003ff306 	br	113cc <_gp+0xfffef97c>

00011400 <__mulsi3>:
   11400:	0005883a 	mov	r2,zero
   11404:	20000726 	beq	r4,zero,11424 <__mulsi3+0x24>
   11408:	20c0004c 	andi	r3,r4,1
   1140c:	2008d07a 	srli	r4,r4,1
   11410:	18000126 	beq	r3,zero,11418 <__mulsi3+0x18>
   11414:	1145883a 	add	r2,r2,r5
   11418:	294b883a 	add	r5,r5,r5
   1141c:	203ffa1e 	bne	r4,zero,11408 <_gp+0xfffef9b8>
   11420:	f800283a 	ret
   11424:	f800283a 	ret

00011428 <fcvt>:
   11428:	defffd04 	addi	sp,sp,-12
   1142c:	d8800317 	ldw	r2,12(sp)
   11430:	d8000115 	stw	zero,4(sp)
   11434:	dfc00215 	stw	ra,8(sp)
   11438:	d8800015 	stw	r2,0(sp)
   1143c:	0011ec80 	call	11ec8 <fcvtbuf>
   11440:	dfc00217 	ldw	ra,8(sp)
   11444:	dec00304 	addi	sp,sp,12
   11448:	f800283a 	ret

0001144c <fcvtf>:
   1144c:	defffb04 	addi	sp,sp,-20
   11450:	dfc00415 	stw	ra,16(sp)
   11454:	dc800315 	stw	r18,12(sp)
   11458:	dc400215 	stw	r17,8(sp)
   1145c:	3825883a 	mov	r18,r7
   11460:	3023883a 	mov	r17,r6
   11464:	dc000115 	stw	r16,4(sp)
   11468:	2821883a 	mov	r16,r5
   1146c:	0017a6c0 	call	17a6c <__extendsfdf2>
   11470:	880f883a 	mov	r7,r17
   11474:	dc800015 	stw	r18,0(sp)
   11478:	800d883a 	mov	r6,r16
   1147c:	1009883a 	mov	r4,r2
   11480:	180b883a 	mov	r5,r3
   11484:	00114280 	call	11428 <fcvt>
   11488:	dfc00417 	ldw	ra,16(sp)
   1148c:	dc800317 	ldw	r18,12(sp)
   11490:	dc400217 	ldw	r17,8(sp)
   11494:	dc000117 	ldw	r16,4(sp)
   11498:	dec00504 	addi	sp,sp,20
   1149c:	f800283a 	ret

000114a0 <ecvt>:
   114a0:	defffd04 	addi	sp,sp,-12
   114a4:	d8800317 	ldw	r2,12(sp)
   114a8:	d8000115 	stw	zero,4(sp)
   114ac:	dfc00215 	stw	ra,8(sp)
   114b0:	d8800015 	stw	r2,0(sp)
   114b4:	00120340 	call	12034 <ecvtbuf>
   114b8:	dfc00217 	ldw	ra,8(sp)
   114bc:	dec00304 	addi	sp,sp,12
   114c0:	f800283a 	ret

000114c4 <ecvtf>:
   114c4:	defffb04 	addi	sp,sp,-20
   114c8:	dfc00415 	stw	ra,16(sp)
   114cc:	dc800315 	stw	r18,12(sp)
   114d0:	dc400215 	stw	r17,8(sp)
   114d4:	3825883a 	mov	r18,r7
   114d8:	3023883a 	mov	r17,r6
   114dc:	dc000115 	stw	r16,4(sp)
   114e0:	2821883a 	mov	r16,r5
   114e4:	0017a6c0 	call	17a6c <__extendsfdf2>
   114e8:	880f883a 	mov	r7,r17
   114ec:	dc800015 	stw	r18,0(sp)
   114f0:	800d883a 	mov	r6,r16
   114f4:	1009883a 	mov	r4,r2
   114f8:	180b883a 	mov	r5,r3
   114fc:	00114a00 	call	114a0 <ecvt>
   11500:	dfc00417 	ldw	ra,16(sp)
   11504:	dc800317 	ldw	r18,12(sp)
   11508:	dc400217 	ldw	r17,8(sp)
   1150c:	dc000117 	ldw	r16,4(sp)
   11510:	dec00504 	addi	sp,sp,20
   11514:	f800283a 	ret

00011518 <gcvt>:
   11518:	defff804 	addi	sp,sp,-32
   1151c:	dc400415 	stw	r17,16(sp)
   11520:	dc000315 	stw	r16,12(sp)
   11524:	3023883a 	mov	r17,r6
   11528:	3821883a 	mov	r16,r7
   1152c:	000d883a 	mov	r6,zero
   11530:	000f883a 	mov	r7,zero
   11534:	dcc00615 	stw	r19,24(sp)
   11538:	dc800515 	stw	r18,20(sp)
   1153c:	dfc00715 	stw	ra,28(sp)
   11540:	2027883a 	mov	r19,r4
   11544:	2825883a 	mov	r18,r5
   11548:	00166b40 	call	166b4 <__ledf2>
   1154c:	1000050e 	bge	r2,zero,11564 <gcvt+0x4c>
   11550:	00800b44 	movi	r2,45
   11554:	80800005 	stb	r2,0(r16)
   11558:	8c7fffc4 	addi	r17,r17,-1
   1155c:	80800044 	addi	r2,r16,1
   11560:	00000106 	br	11568 <gcvt+0x50>
   11564:	8005883a 	mov	r2,r16
   11568:	d8800015 	stw	r2,0(sp)
   1156c:	00c019c4 	movi	r3,103
   11570:	008000b4 	movhi	r2,2
   11574:	d8000215 	stw	zero,8(sp)
   11578:	d8c00115 	stw	r3,4(sp)
   1157c:	10a69504 	addi	r2,r2,-26028
   11580:	11000017 	ldw	r4,0(r2)
   11584:	880f883a 	mov	r7,r17
   11588:	980b883a 	mov	r5,r19
   1158c:	900d883a 	mov	r6,r18
   11590:	001213c0 	call	1213c <_gcvt>
   11594:	10000126 	beq	r2,zero,1159c <gcvt+0x84>
   11598:	8005883a 	mov	r2,r16
   1159c:	dfc00717 	ldw	ra,28(sp)
   115a0:	dcc00617 	ldw	r19,24(sp)
   115a4:	dc800517 	ldw	r18,20(sp)
   115a8:	dc400417 	ldw	r17,16(sp)
   115ac:	dc000317 	ldw	r16,12(sp)
   115b0:	dec00804 	addi	sp,sp,32
   115b4:	f800283a 	ret

000115b8 <gcvtf>:
   115b8:	defffd04 	addi	sp,sp,-12
   115bc:	dc400115 	stw	r17,4(sp)
   115c0:	dc000015 	stw	r16,0(sp)
   115c4:	3023883a 	mov	r17,r6
   115c8:	2821883a 	mov	r16,r5
   115cc:	dfc00215 	stw	ra,8(sp)
   115d0:	0017a6c0 	call	17a6c <__extendsfdf2>
   115d4:	880f883a 	mov	r7,r17
   115d8:	800d883a 	mov	r6,r16
   115dc:	1009883a 	mov	r4,r2
   115e0:	180b883a 	mov	r5,r3
   115e4:	dfc00217 	ldw	ra,8(sp)
   115e8:	dc400117 	ldw	r17,4(sp)
   115ec:	dc000017 	ldw	r16,0(sp)
   115f0:	dec00304 	addi	sp,sp,12
   115f4:	00115181 	jmpi	11518 <gcvt>

000115f8 <_printf_r>:
   115f8:	defffd04 	addi	sp,sp,-12
   115fc:	dfc00015 	stw	ra,0(sp)
   11600:	d9800115 	stw	r6,4(sp)
   11604:	d9c00215 	stw	r7,8(sp)
   11608:	20c00217 	ldw	r3,8(r4)
   1160c:	01800074 	movhi	r6,1
   11610:	3189a804 	addi	r6,r6,9888
   11614:	19800115 	stw	r6,4(r3)
   11618:	280d883a 	mov	r6,r5
   1161c:	21400217 	ldw	r5,8(r4)
   11620:	d9c00104 	addi	r7,sp,4
   11624:	001179c0 	call	1179c <___vfprintf_internal_r>
   11628:	dfc00017 	ldw	ra,0(sp)
   1162c:	dec00304 	addi	sp,sp,12
   11630:	f800283a 	ret

00011634 <printf>:
   11634:	defffc04 	addi	sp,sp,-16
   11638:	dfc00015 	stw	ra,0(sp)
   1163c:	d9400115 	stw	r5,4(sp)
   11640:	d9800215 	stw	r6,8(sp)
   11644:	d9c00315 	stw	r7,12(sp)
   11648:	008000b4 	movhi	r2,2
   1164c:	10a69504 	addi	r2,r2,-26028
   11650:	10800017 	ldw	r2,0(r2)
   11654:	01400074 	movhi	r5,1
   11658:	2949a804 	addi	r5,r5,9888
   1165c:	10c00217 	ldw	r3,8(r2)
   11660:	d9800104 	addi	r6,sp,4
   11664:	19400115 	stw	r5,4(r3)
   11668:	200b883a 	mov	r5,r4
   1166c:	11000217 	ldw	r4,8(r2)
   11670:	0011cc80 	call	11cc8 <__vfprintf_internal>
   11674:	dfc00017 	ldw	ra,0(sp)
   11678:	dec00404 	addi	sp,sp,16
   1167c:	f800283a 	ret

00011680 <_puts_r>:
   11680:	defffd04 	addi	sp,sp,-12
   11684:	dc000015 	stw	r16,0(sp)
   11688:	2021883a 	mov	r16,r4
   1168c:	2809883a 	mov	r4,r5
   11690:	dfc00215 	stw	ra,8(sp)
   11694:	dc400115 	stw	r17,4(sp)
   11698:	2823883a 	mov	r17,r5
   1169c:	00117140 	call	11714 <strlen>
   116a0:	81400217 	ldw	r5,8(r16)
   116a4:	01000074 	movhi	r4,1
   116a8:	2109a804 	addi	r4,r4,9888
   116ac:	29000115 	stw	r4,4(r5)
   116b0:	100f883a 	mov	r7,r2
   116b4:	880d883a 	mov	r6,r17
   116b8:	8009883a 	mov	r4,r16
   116bc:	00126a00 	call	126a0 <__sfvwrite_small_dev>
   116c0:	00ffffc4 	movi	r3,-1
   116c4:	10c00926 	beq	r2,r3,116ec <_puts_r+0x6c>
   116c8:	81400217 	ldw	r5,8(r16)
   116cc:	018000b4 	movhi	r6,2
   116d0:	01c00044 	movi	r7,1
   116d4:	28800117 	ldw	r2,4(r5)
   116d8:	31a58d04 	addi	r6,r6,-27084
   116dc:	8009883a 	mov	r4,r16
   116e0:	103ee83a 	callr	r2
   116e4:	10bfffe0 	cmpeqi	r2,r2,-1
   116e8:	0085c83a 	sub	r2,zero,r2
   116ec:	dfc00217 	ldw	ra,8(sp)
   116f0:	dc400117 	ldw	r17,4(sp)
   116f4:	dc000017 	ldw	r16,0(sp)
   116f8:	dec00304 	addi	sp,sp,12
   116fc:	f800283a 	ret

00011700 <puts>:
   11700:	008000b4 	movhi	r2,2
   11704:	10a69504 	addi	r2,r2,-26028
   11708:	200b883a 	mov	r5,r4
   1170c:	11000017 	ldw	r4,0(r2)
   11710:	00116801 	jmpi	11680 <_puts_r>

00011714 <strlen>:
   11714:	2005883a 	mov	r2,r4
   11718:	10c00007 	ldb	r3,0(r2)
   1171c:	18000226 	beq	r3,zero,11728 <strlen+0x14>
   11720:	10800044 	addi	r2,r2,1
   11724:	003ffc06 	br	11718 <_gp+0xfffefcc8>
   11728:	1105c83a 	sub	r2,r2,r4
   1172c:	f800283a 	ret

00011730 <print_repeat>:
   11730:	defffb04 	addi	sp,sp,-20
   11734:	dc800315 	stw	r18,12(sp)
   11738:	dc400215 	stw	r17,8(sp)
   1173c:	dc000115 	stw	r16,4(sp)
   11740:	dfc00415 	stw	ra,16(sp)
   11744:	2025883a 	mov	r18,r4
   11748:	2823883a 	mov	r17,r5
   1174c:	d9800005 	stb	r6,0(sp)
   11750:	3821883a 	mov	r16,r7
   11754:	04000a0e 	bge	zero,r16,11780 <print_repeat+0x50>
   11758:	88800117 	ldw	r2,4(r17)
   1175c:	01c00044 	movi	r7,1
   11760:	d80d883a 	mov	r6,sp
   11764:	880b883a 	mov	r5,r17
   11768:	9009883a 	mov	r4,r18
   1176c:	103ee83a 	callr	r2
   11770:	843fffc4 	addi	r16,r16,-1
   11774:	103ff726 	beq	r2,zero,11754 <_gp+0xfffefd04>
   11778:	00bfffc4 	movi	r2,-1
   1177c:	00000106 	br	11784 <print_repeat+0x54>
   11780:	0005883a 	mov	r2,zero
   11784:	dfc00417 	ldw	ra,16(sp)
   11788:	dc800317 	ldw	r18,12(sp)
   1178c:	dc400217 	ldw	r17,8(sp)
   11790:	dc000117 	ldw	r16,4(sp)
   11794:	dec00504 	addi	sp,sp,20
   11798:	f800283a 	ret

0001179c <___vfprintf_internal_r>:
   1179c:	deffe504 	addi	sp,sp,-108
   117a0:	d8c00804 	addi	r3,sp,32
   117a4:	ddc01815 	stw	r23,96(sp)
   117a8:	dd801715 	stw	r22,92(sp)
   117ac:	dd401615 	stw	r21,88(sp)
   117b0:	dd001515 	stw	r20,84(sp)
   117b4:	dcc01415 	stw	r19,80(sp)
   117b8:	dc801315 	stw	r18,76(sp)
   117bc:	dc401215 	stw	r17,72(sp)
   117c0:	dc001115 	stw	r16,68(sp)
   117c4:	dfc01a15 	stw	ra,104(sp)
   117c8:	df001915 	stw	fp,100(sp)
   117cc:	2029883a 	mov	r20,r4
   117d0:	2823883a 	mov	r17,r5
   117d4:	382d883a 	mov	r22,r7
   117d8:	d9800f15 	stw	r6,60(sp)
   117dc:	0021883a 	mov	r16,zero
   117e0:	d8000e15 	stw	zero,56(sp)
   117e4:	d8000a15 	stw	zero,40(sp)
   117e8:	002b883a 	mov	r21,zero
   117ec:	0027883a 	mov	r19,zero
   117f0:	0025883a 	mov	r18,zero
   117f4:	d8000c15 	stw	zero,48(sp)
   117f8:	d8000b15 	stw	zero,44(sp)
   117fc:	002f883a 	mov	r23,zero
   11800:	d8c00915 	stw	r3,36(sp)
   11804:	d8c00f17 	ldw	r3,60(sp)
   11808:	19000003 	ldbu	r4,0(r3)
   1180c:	20803fcc 	andi	r2,r4,255
   11810:	1080201c 	xori	r2,r2,128
   11814:	10bfe004 	addi	r2,r2,-128
   11818:	10011e26 	beq	r2,zero,11c94 <___vfprintf_internal_r+0x4f8>
   1181c:	00c00044 	movi	r3,1
   11820:	b8c01426 	beq	r23,r3,11874 <___vfprintf_internal_r+0xd8>
   11824:	1dc00216 	blt	r3,r23,11830 <___vfprintf_internal_r+0x94>
   11828:	b8000626 	beq	r23,zero,11844 <___vfprintf_internal_r+0xa8>
   1182c:	00011506 	br	11c84 <___vfprintf_internal_r+0x4e8>
   11830:	01400084 	movi	r5,2
   11834:	b9401d26 	beq	r23,r5,118ac <___vfprintf_internal_r+0x110>
   11838:	014000c4 	movi	r5,3
   1183c:	b9402b26 	beq	r23,r5,118ec <___vfprintf_internal_r+0x150>
   11840:	00011006 	br	11c84 <___vfprintf_internal_r+0x4e8>
   11844:	01400944 	movi	r5,37
   11848:	1140fc26 	beq	r2,r5,11c3c <___vfprintf_internal_r+0x4a0>
   1184c:	88800117 	ldw	r2,4(r17)
   11850:	d9000005 	stb	r4,0(sp)
   11854:	01c00044 	movi	r7,1
   11858:	d80d883a 	mov	r6,sp
   1185c:	880b883a 	mov	r5,r17
   11860:	a009883a 	mov	r4,r20
   11864:	103ee83a 	callr	r2
   11868:	1000d81e 	bne	r2,zero,11bcc <___vfprintf_internal_r+0x430>
   1186c:	84000044 	addi	r16,r16,1
   11870:	00010406 	br	11c84 <___vfprintf_internal_r+0x4e8>
   11874:	01400c04 	movi	r5,48
   11878:	1140fa26 	beq	r2,r5,11c64 <___vfprintf_internal_r+0x4c8>
   1187c:	01400944 	movi	r5,37
   11880:	11400a1e 	bne	r2,r5,118ac <___vfprintf_internal_r+0x110>
   11884:	d8800005 	stb	r2,0(sp)
   11888:	88800117 	ldw	r2,4(r17)
   1188c:	b80f883a 	mov	r7,r23
   11890:	d80d883a 	mov	r6,sp
   11894:	880b883a 	mov	r5,r17
   11898:	a009883a 	mov	r4,r20
   1189c:	103ee83a 	callr	r2
   118a0:	1000ca1e 	bne	r2,zero,11bcc <___vfprintf_internal_r+0x430>
   118a4:	84000044 	addi	r16,r16,1
   118a8:	0000f506 	br	11c80 <___vfprintf_internal_r+0x4e4>
   118ac:	25fff404 	addi	r23,r4,-48
   118b0:	bdc03fcc 	andi	r23,r23,255
   118b4:	00c00244 	movi	r3,9
   118b8:	1dc00936 	bltu	r3,r23,118e0 <___vfprintf_internal_r+0x144>
   118bc:	00bfffc4 	movi	r2,-1
   118c0:	90800426 	beq	r18,r2,118d4 <___vfprintf_internal_r+0x138>
   118c4:	01400284 	movi	r5,10
   118c8:	9009883a 	mov	r4,r18
   118cc:	00114000 	call	11400 <__mulsi3>
   118d0:	00000106 	br	118d8 <___vfprintf_internal_r+0x13c>
   118d4:	0005883a 	mov	r2,zero
   118d8:	b8a5883a 	add	r18,r23,r2
   118dc:	0000e206 	br	11c68 <___vfprintf_internal_r+0x4cc>
   118e0:	01400b84 	movi	r5,46
   118e4:	1140e426 	beq	r2,r5,11c78 <___vfprintf_internal_r+0x4dc>
   118e8:	05c00084 	movi	r23,2
   118ec:	213ff404 	addi	r4,r4,-48
   118f0:	27003fcc 	andi	fp,r4,255
   118f4:	00c00244 	movi	r3,9
   118f8:	1f000936 	bltu	r3,fp,11920 <___vfprintf_internal_r+0x184>
   118fc:	00bfffc4 	movi	r2,-1
   11900:	98800426 	beq	r19,r2,11914 <___vfprintf_internal_r+0x178>
   11904:	01400284 	movi	r5,10
   11908:	9809883a 	mov	r4,r19
   1190c:	00114000 	call	11400 <__mulsi3>
   11910:	00000106 	br	11918 <___vfprintf_internal_r+0x17c>
   11914:	0005883a 	mov	r2,zero
   11918:	e0a7883a 	add	r19,fp,r2
   1191c:	0000d906 	br	11c84 <___vfprintf_internal_r+0x4e8>
   11920:	00c01b04 	movi	r3,108
   11924:	10c0d226 	beq	r2,r3,11c70 <___vfprintf_internal_r+0x4d4>
   11928:	013fffc4 	movi	r4,-1
   1192c:	99000226 	beq	r19,r4,11938 <___vfprintf_internal_r+0x19c>
   11930:	d8000b15 	stw	zero,44(sp)
   11934:	00000106 	br	1193c <___vfprintf_internal_r+0x1a0>
   11938:	04c00044 	movi	r19,1
   1193c:	01001a44 	movi	r4,105
   11940:	11001626 	beq	r2,r4,1199c <___vfprintf_internal_r+0x200>
   11944:	20800916 	blt	r4,r2,1196c <___vfprintf_internal_r+0x1d0>
   11948:	010018c4 	movi	r4,99
   1194c:	11008826 	beq	r2,r4,11b70 <___vfprintf_internal_r+0x3d4>
   11950:	01001904 	movi	r4,100
   11954:	11001126 	beq	r2,r4,1199c <___vfprintf_internal_r+0x200>
   11958:	01001604 	movi	r4,88
   1195c:	1100c81e 	bne	r2,r4,11c80 <___vfprintf_internal_r+0x4e4>
   11960:	00c00044 	movi	r3,1
   11964:	d8c00e15 	stw	r3,56(sp)
   11968:	00001506 	br	119c0 <___vfprintf_internal_r+0x224>
   1196c:	01001cc4 	movi	r4,115
   11970:	11009826 	beq	r2,r4,11bd4 <___vfprintf_internal_r+0x438>
   11974:	20800416 	blt	r4,r2,11988 <___vfprintf_internal_r+0x1ec>
   11978:	01001bc4 	movi	r4,111
   1197c:	1100c01e 	bne	r2,r4,11c80 <___vfprintf_internal_r+0x4e4>
   11980:	05400204 	movi	r21,8
   11984:	00000f06 	br	119c4 <___vfprintf_internal_r+0x228>
   11988:	01001d44 	movi	r4,117
   1198c:	11000d26 	beq	r2,r4,119c4 <___vfprintf_internal_r+0x228>
   11990:	01001e04 	movi	r4,120
   11994:	11000a26 	beq	r2,r4,119c0 <___vfprintf_internal_r+0x224>
   11998:	0000b906 	br	11c80 <___vfprintf_internal_r+0x4e4>
   1199c:	d8c00a17 	ldw	r3,40(sp)
   119a0:	b7000104 	addi	fp,r22,4
   119a4:	18000726 	beq	r3,zero,119c4 <___vfprintf_internal_r+0x228>
   119a8:	df000d15 	stw	fp,52(sp)
   119ac:	b5c00017 	ldw	r23,0(r22)
   119b0:	b800080e 	bge	r23,zero,119d4 <___vfprintf_internal_r+0x238>
   119b4:	05efc83a 	sub	r23,zero,r23
   119b8:	02400044 	movi	r9,1
   119bc:	00000606 	br	119d8 <___vfprintf_internal_r+0x23c>
   119c0:	05400404 	movi	r21,16
   119c4:	b0c00104 	addi	r3,r22,4
   119c8:	d8c00d15 	stw	r3,52(sp)
   119cc:	b5c00017 	ldw	r23,0(r22)
   119d0:	d8000a15 	stw	zero,40(sp)
   119d4:	0013883a 	mov	r9,zero
   119d8:	d839883a 	mov	fp,sp
   119dc:	b8001726 	beq	r23,zero,11a3c <___vfprintf_internal_r+0x2a0>
   119e0:	a80b883a 	mov	r5,r21
   119e4:	b809883a 	mov	r4,r23
   119e8:	da401015 	stw	r9,64(sp)
   119ec:	00152180 	call	15218 <__udivsi3>
   119f0:	a80b883a 	mov	r5,r21
   119f4:	1009883a 	mov	r4,r2
   119f8:	102d883a 	mov	r22,r2
   119fc:	00114000 	call	11400 <__mulsi3>
   11a00:	b885c83a 	sub	r2,r23,r2
   11a04:	00c00244 	movi	r3,9
   11a08:	da401017 	ldw	r9,64(sp)
   11a0c:	18800216 	blt	r3,r2,11a18 <___vfprintf_internal_r+0x27c>
   11a10:	10800c04 	addi	r2,r2,48
   11a14:	00000506 	br	11a2c <___vfprintf_internal_r+0x290>
   11a18:	d8c00e17 	ldw	r3,56(sp)
   11a1c:	18000226 	beq	r3,zero,11a28 <___vfprintf_internal_r+0x28c>
   11a20:	10800dc4 	addi	r2,r2,55
   11a24:	00000106 	br	11a2c <___vfprintf_internal_r+0x290>
   11a28:	108015c4 	addi	r2,r2,87
   11a2c:	e0800005 	stb	r2,0(fp)
   11a30:	b02f883a 	mov	r23,r22
   11a34:	e7000044 	addi	fp,fp,1
   11a38:	003fe806 	br	119dc <_gp+0xfffeff8c>
   11a3c:	e6efc83a 	sub	r23,fp,sp
   11a40:	9dc5c83a 	sub	r2,r19,r23
   11a44:	0080090e 	bge	zero,r2,11a6c <___vfprintf_internal_r+0x2d0>
   11a48:	e085883a 	add	r2,fp,r2
   11a4c:	01400c04 	movi	r5,48
   11a50:	d8c00917 	ldw	r3,36(sp)
   11a54:	e009883a 	mov	r4,fp
   11a58:	e0c0032e 	bgeu	fp,r3,11a68 <___vfprintf_internal_r+0x2cc>
   11a5c:	e7000044 	addi	fp,fp,1
   11a60:	21400005 	stb	r5,0(r4)
   11a64:	e0bffa1e 	bne	fp,r2,11a50 <_gp+0xffff0000>
   11a68:	e6efc83a 	sub	r23,fp,sp
   11a6c:	d8c00b17 	ldw	r3,44(sp)
   11a70:	4dd1883a 	add	r8,r9,r23
   11a74:	922dc83a 	sub	r22,r18,r8
   11a78:	18001626 	beq	r3,zero,11ad4 <___vfprintf_internal_r+0x338>
   11a7c:	48000a26 	beq	r9,zero,11aa8 <___vfprintf_internal_r+0x30c>
   11a80:	00800b44 	movi	r2,45
   11a84:	d8800805 	stb	r2,32(sp)
   11a88:	88800117 	ldw	r2,4(r17)
   11a8c:	01c00044 	movi	r7,1
   11a90:	d9800804 	addi	r6,sp,32
   11a94:	880b883a 	mov	r5,r17
   11a98:	a009883a 	mov	r4,r20
   11a9c:	103ee83a 	callr	r2
   11aa0:	10004a1e 	bne	r2,zero,11bcc <___vfprintf_internal_r+0x430>
   11aa4:	84000044 	addi	r16,r16,1
   11aa8:	0580070e 	bge	zero,r22,11ac8 <___vfprintf_internal_r+0x32c>
   11aac:	b00f883a 	mov	r7,r22
   11ab0:	01800c04 	movi	r6,48
   11ab4:	880b883a 	mov	r5,r17
   11ab8:	a009883a 	mov	r4,r20
   11abc:	00117300 	call	11730 <print_repeat>
   11ac0:	1000421e 	bne	r2,zero,11bcc <___vfprintf_internal_r+0x430>
   11ac4:	85a1883a 	add	r16,r16,r22
   11ac8:	e02d883a 	mov	r22,fp
   11acc:	bf2fc83a 	sub	r23,r23,fp
   11ad0:	00002006 	br	11b54 <___vfprintf_internal_r+0x3b8>
   11ad4:	0580090e 	bge	zero,r22,11afc <___vfprintf_internal_r+0x360>
   11ad8:	b00f883a 	mov	r7,r22
   11adc:	01800804 	movi	r6,32
   11ae0:	880b883a 	mov	r5,r17
   11ae4:	a009883a 	mov	r4,r20
   11ae8:	da401015 	stw	r9,64(sp)
   11aec:	00117300 	call	11730 <print_repeat>
   11af0:	da401017 	ldw	r9,64(sp)
   11af4:	1000351e 	bne	r2,zero,11bcc <___vfprintf_internal_r+0x430>
   11af8:	85a1883a 	add	r16,r16,r22
   11afc:	483ff226 	beq	r9,zero,11ac8 <_gp+0xffff0078>
   11b00:	00800b44 	movi	r2,45
   11b04:	d8800805 	stb	r2,32(sp)
   11b08:	88800117 	ldw	r2,4(r17)
   11b0c:	01c00044 	movi	r7,1
   11b10:	d9800804 	addi	r6,sp,32
   11b14:	880b883a 	mov	r5,r17
   11b18:	a009883a 	mov	r4,r20
   11b1c:	103ee83a 	callr	r2
   11b20:	10002a1e 	bne	r2,zero,11bcc <___vfprintf_internal_r+0x430>
   11b24:	84000044 	addi	r16,r16,1
   11b28:	003fe706 	br	11ac8 <_gp+0xffff0078>
   11b2c:	b5bfffc4 	addi	r22,r22,-1
   11b30:	b0800003 	ldbu	r2,0(r22)
   11b34:	01c00044 	movi	r7,1
   11b38:	d9800804 	addi	r6,sp,32
   11b3c:	d8800805 	stb	r2,32(sp)
   11b40:	88800117 	ldw	r2,4(r17)
   11b44:	880b883a 	mov	r5,r17
   11b48:	a009883a 	mov	r4,r20
   11b4c:	103ee83a 	callr	r2
   11b50:	10001e1e 	bne	r2,zero,11bcc <___vfprintf_internal_r+0x430>
   11b54:	8585c83a 	sub	r2,r16,r22
   11b58:	b5c9883a 	add	r4,r22,r23
   11b5c:	e085883a 	add	r2,fp,r2
   11b60:	013ff216 	blt	zero,r4,11b2c <_gp+0xffff00dc>
   11b64:	1021883a 	mov	r16,r2
   11b68:	dd800d17 	ldw	r22,52(sp)
   11b6c:	00004406 	br	11c80 <___vfprintf_internal_r+0x4e4>
   11b70:	00800044 	movi	r2,1
   11b74:	1480080e 	bge	r2,r18,11b98 <___vfprintf_internal_r+0x3fc>
   11b78:	95ffffc4 	addi	r23,r18,-1
   11b7c:	b80f883a 	mov	r7,r23
   11b80:	01800804 	movi	r6,32
   11b84:	880b883a 	mov	r5,r17
   11b88:	a009883a 	mov	r4,r20
   11b8c:	00117300 	call	11730 <print_repeat>
   11b90:	10000e1e 	bne	r2,zero,11bcc <___vfprintf_internal_r+0x430>
   11b94:	85e1883a 	add	r16,r16,r23
   11b98:	b0800017 	ldw	r2,0(r22)
   11b9c:	01c00044 	movi	r7,1
   11ba0:	d80d883a 	mov	r6,sp
   11ba4:	d8800005 	stb	r2,0(sp)
   11ba8:	88800117 	ldw	r2,4(r17)
   11bac:	880b883a 	mov	r5,r17
   11bb0:	a009883a 	mov	r4,r20
   11bb4:	b5c00104 	addi	r23,r22,4
   11bb8:	103ee83a 	callr	r2
   11bbc:	1000031e 	bne	r2,zero,11bcc <___vfprintf_internal_r+0x430>
   11bc0:	84000044 	addi	r16,r16,1
   11bc4:	b82d883a 	mov	r22,r23
   11bc8:	00002d06 	br	11c80 <___vfprintf_internal_r+0x4e4>
   11bcc:	00bfffc4 	movi	r2,-1
   11bd0:	00003106 	br	11c98 <___vfprintf_internal_r+0x4fc>
   11bd4:	b5c00017 	ldw	r23,0(r22)
   11bd8:	b7000104 	addi	fp,r22,4
   11bdc:	b809883a 	mov	r4,r23
   11be0:	00117140 	call	11714 <strlen>
   11be4:	9091c83a 	sub	r8,r18,r2
   11be8:	102d883a 	mov	r22,r2
   11bec:	0200090e 	bge	zero,r8,11c14 <___vfprintf_internal_r+0x478>
   11bf0:	400f883a 	mov	r7,r8
   11bf4:	01800804 	movi	r6,32
   11bf8:	880b883a 	mov	r5,r17
   11bfc:	a009883a 	mov	r4,r20
   11c00:	da001015 	stw	r8,64(sp)
   11c04:	00117300 	call	11730 <print_repeat>
   11c08:	da001017 	ldw	r8,64(sp)
   11c0c:	103fef1e 	bne	r2,zero,11bcc <_gp+0xffff017c>
   11c10:	8221883a 	add	r16,r16,r8
   11c14:	88800117 	ldw	r2,4(r17)
   11c18:	b00f883a 	mov	r7,r22
   11c1c:	b80d883a 	mov	r6,r23
   11c20:	880b883a 	mov	r5,r17
   11c24:	a009883a 	mov	r4,r20
   11c28:	103ee83a 	callr	r2
   11c2c:	103fe71e 	bne	r2,zero,11bcc <_gp+0xffff017c>
   11c30:	85a1883a 	add	r16,r16,r22
   11c34:	e02d883a 	mov	r22,fp
   11c38:	00001106 	br	11c80 <___vfprintf_internal_r+0x4e4>
   11c3c:	00c00044 	movi	r3,1
   11c40:	04ffffc4 	movi	r19,-1
   11c44:	d8000e15 	stw	zero,56(sp)
   11c48:	d8c00a15 	stw	r3,40(sp)
   11c4c:	05400284 	movi	r21,10
   11c50:	9825883a 	mov	r18,r19
   11c54:	d8000c15 	stw	zero,48(sp)
   11c58:	d8000b15 	stw	zero,44(sp)
   11c5c:	182f883a 	mov	r23,r3
   11c60:	00000806 	br	11c84 <___vfprintf_internal_r+0x4e8>
   11c64:	ddc00b15 	stw	r23,44(sp)
   11c68:	05c00084 	movi	r23,2
   11c6c:	00000506 	br	11c84 <___vfprintf_internal_r+0x4e8>
   11c70:	00c00044 	movi	r3,1
   11c74:	d8c00c15 	stw	r3,48(sp)
   11c78:	05c000c4 	movi	r23,3
   11c7c:	00000106 	br	11c84 <___vfprintf_internal_r+0x4e8>
   11c80:	002f883a 	mov	r23,zero
   11c84:	d8c00f17 	ldw	r3,60(sp)
   11c88:	18c00044 	addi	r3,r3,1
   11c8c:	d8c00f15 	stw	r3,60(sp)
   11c90:	003edc06 	br	11804 <_gp+0xfffefdb4>
   11c94:	8005883a 	mov	r2,r16
   11c98:	dfc01a17 	ldw	ra,104(sp)
   11c9c:	df001917 	ldw	fp,100(sp)
   11ca0:	ddc01817 	ldw	r23,96(sp)
   11ca4:	dd801717 	ldw	r22,92(sp)
   11ca8:	dd401617 	ldw	r21,88(sp)
   11cac:	dd001517 	ldw	r20,84(sp)
   11cb0:	dcc01417 	ldw	r19,80(sp)
   11cb4:	dc801317 	ldw	r18,76(sp)
   11cb8:	dc401217 	ldw	r17,72(sp)
   11cbc:	dc001117 	ldw	r16,68(sp)
   11cc0:	dec01b04 	addi	sp,sp,108
   11cc4:	f800283a 	ret

00011cc8 <__vfprintf_internal>:
   11cc8:	008000b4 	movhi	r2,2
   11ccc:	10a69504 	addi	r2,r2,-26028
   11cd0:	300f883a 	mov	r7,r6
   11cd4:	280d883a 	mov	r6,r5
   11cd8:	200b883a 	mov	r5,r4
   11cdc:	11000017 	ldw	r4,0(r2)
   11ce0:	001179c1 	jmpi	1179c <___vfprintf_internal_r>

00011ce4 <print_e>:
   11ce4:	defff404 	addi	sp,sp,-48
   11ce8:	dc000715 	stw	r16,28(sp)
   11cec:	d8c00504 	addi	r3,sp,20
   11cf0:	dc000c17 	ldw	r16,48(sp)
   11cf4:	d8c00315 	stw	r3,12(sp)
   11cf8:	d8c00604 	addi	r3,sp,24
   11cfc:	d8c00215 	stw	r3,8(sp)
   11d00:	d8c00404 	addi	r3,sp,16
   11d04:	3805883a 	mov	r2,r7
   11d08:	d8c00115 	stw	r3,4(sp)
   11d0c:	80c00044 	addi	r3,r16,1
   11d10:	dc800915 	stw	r18,36(sp)
   11d14:	d8c00015 	stw	r3,0(sp)
   11d18:	2825883a 	mov	r18,r5
   11d1c:	01c00084 	movi	r7,2
   11d20:	300b883a 	mov	r5,r6
   11d24:	100d883a 	mov	r6,r2
   11d28:	dc400815 	stw	r17,32(sp)
   11d2c:	dfc00b15 	stw	ra,44(sp)
   11d30:	dcc00a15 	stw	r19,40(sp)
   11d34:	dc400d17 	ldw	r17,52(sp)
   11d38:	0013cb80 	call	13cb8 <_dtoa_r>
   11d3c:	d8c00417 	ldw	r3,16(sp)
   11d40:	0109c3c4 	movi	r4,9999
   11d44:	1900041e 	bne	r3,r4,11d58 <print_e+0x74>
   11d48:	100b883a 	mov	r5,r2
   11d4c:	9009883a 	mov	r4,r18
   11d50:	0013a140 	call	13a14 <strcpy>
   11d54:	00005506 	br	11eac <print_e+0x1c8>
   11d58:	11800044 	addi	r6,r2,1
   11d5c:	10800003 	ldbu	r2,0(r2)
   11d60:	8827883a 	mov	r19,r17
   11d64:	90800005 	stb	r2,0(r18)
   11d68:	d8800e17 	ldw	r2,56(sp)
   11d6c:	1000031e 	bne	r2,zero,11d7c <print_e+0x98>
   11d70:	8000021e 	bne	r16,zero,11d7c <print_e+0x98>
   11d74:	90800044 	addi	r2,r18,1
   11d78:	00000906 	br	11da0 <print_e+0xbc>
   11d7c:	01000b84 	movi	r4,46
   11d80:	90800084 	addi	r2,r18,2
   11d84:	91000045 	stb	r4,1(r18)
   11d88:	00000506 	br	11da0 <print_e+0xbc>
   11d8c:	04000a0e 	bge	zero,r16,11db8 <print_e+0xd4>
   11d90:	11400005 	stb	r5,0(r2)
   11d94:	31800044 	addi	r6,r6,1
   11d98:	843fffc4 	addi	r16,r16,-1
   11d9c:	10800044 	addi	r2,r2,1
   11da0:	31400003 	ldbu	r5,0(r6)
   11da4:	1009883a 	mov	r4,r2
   11da8:	29c03fcc 	andi	r7,r5,255
   11dac:	39c0201c 	xori	r7,r7,128
   11db0:	39ffe004 	addi	r7,r7,-128
   11db4:	383ff51e 	bne	r7,zero,11d8c <_gp+0xffff033c>
   11db8:	8c403fcc 	andi	r17,r17,255
   11dbc:	8c40201c 	xori	r17,r17,128
   11dc0:	8c7fe004 	addi	r17,r17,-128
   11dc4:	014019c4 	movi	r5,103
   11dc8:	89400d26 	beq	r17,r5,11e00 <print_e+0x11c>
   11dcc:	014011c4 	movi	r5,71
   11dd0:	89400d26 	beq	r17,r5,11e08 <print_e+0x124>
   11dd4:	800b883a 	mov	r5,r16
   11dd8:	01800c04 	movi	r6,48
   11ddc:	0140040e 	bge	zero,r5,11df0 <print_e+0x10c>
   11de0:	11800005 	stb	r6,0(r2)
   11de4:	297fffc4 	addi	r5,r5,-1
   11de8:	10800044 	addi	r2,r2,1
   11dec:	003ffb06 	br	11ddc <_gp+0xffff038c>
   11df0:	8000010e 	bge	r16,zero,11df8 <print_e+0x114>
   11df4:	0021883a 	mov	r16,zero
   11df8:	2409883a 	add	r4,r4,r16
   11dfc:	00000306 	br	11e0c <print_e+0x128>
   11e00:	04c01944 	movi	r19,101
   11e04:	00000106 	br	11e0c <print_e+0x128>
   11e08:	04c01144 	movi	r19,69
   11e0c:	18bfffc4 	addi	r2,r3,-1
   11e10:	24800084 	addi	r18,r4,2
   11e14:	24c00005 	stb	r19,0(r4)
   11e18:	d8800415 	stw	r2,16(sp)
   11e1c:	9021883a 	mov	r16,r18
   11e20:	1000050e 	bge	r2,zero,11e38 <print_e+0x154>
   11e24:	00c00b44 	movi	r3,45
   11e28:	0085c83a 	sub	r2,zero,r2
   11e2c:	20c00045 	stb	r3,1(r4)
   11e30:	d8800415 	stw	r2,16(sp)
   11e34:	00000206 	br	11e40 <print_e+0x15c>
   11e38:	00800ac4 	movi	r2,43
   11e3c:	20800045 	stb	r2,1(r4)
   11e40:	dc400417 	ldw	r17,16(sp)
   11e44:	008018c4 	movi	r2,99
   11e48:	14400b0e 	bge	r2,r17,11e78 <print_e+0x194>
   11e4c:	01401904 	movi	r5,100
   11e50:	8809883a 	mov	r4,r17
   11e54:	00151200 	call	15120 <__divsi3>
   11e58:	10c00c04 	addi	r3,r2,48
   11e5c:	90c00005 	stb	r3,0(r18)
   11e60:	017fe704 	movi	r5,-100
   11e64:	1009883a 	mov	r4,r2
   11e68:	00114000 	call	11400 <__mulsi3>
   11e6c:	1445883a 	add	r2,r2,r17
   11e70:	94000044 	addi	r16,r18,1
   11e74:	d8800415 	stw	r2,16(sp)
   11e78:	dc400417 	ldw	r17,16(sp)
   11e7c:	01400284 	movi	r5,10
   11e80:	8809883a 	mov	r4,r17
   11e84:	00151200 	call	15120 <__divsi3>
   11e88:	10c00c04 	addi	r3,r2,48
   11e8c:	80c00005 	stb	r3,0(r16)
   11e90:	017ffd84 	movi	r5,-10
   11e94:	1009883a 	mov	r4,r2
   11e98:	00114000 	call	11400 <__mulsi3>
   11e9c:	1445883a 	add	r2,r2,r17
   11ea0:	10800c04 	addi	r2,r2,48
   11ea4:	80800045 	stb	r2,1(r16)
   11ea8:	80000085 	stb	zero,2(r16)
   11eac:	dfc00b17 	ldw	ra,44(sp)
   11eb0:	dcc00a17 	ldw	r19,40(sp)
   11eb4:	dc800917 	ldw	r18,36(sp)
   11eb8:	dc400817 	ldw	r17,32(sp)
   11ebc:	dc000717 	ldw	r16,28(sp)
   11ec0:	dec00c04 	addi	sp,sp,48
   11ec4:	f800283a 	ret

00011ec8 <fcvtbuf>:
   11ec8:	defff304 	addi	sp,sp,-52
   11ecc:	dc000515 	stw	r16,20(sp)
   11ed0:	dc000e17 	ldw	r16,56(sp)
   11ed4:	008000b4 	movhi	r2,2
   11ed8:	dd800b15 	stw	r22,44(sp)
   11edc:	dd400a15 	stw	r21,40(sp)
   11ee0:	dd000915 	stw	r20,36(sp)
   11ee4:	dcc00815 	stw	r19,32(sp)
   11ee8:	dc800715 	stw	r18,28(sp)
   11eec:	dc400615 	stw	r17,24(sp)
   11ef0:	10a69504 	addi	r2,r2,-26028
   11ef4:	dfc00c15 	stw	ra,48(sp)
   11ef8:	2029883a 	mov	r20,r4
   11efc:	2827883a 	mov	r19,r5
   11f00:	3025883a 	mov	r18,r6
   11f04:	382b883a 	mov	r21,r7
   11f08:	dd800d17 	ldw	r22,52(sp)
   11f0c:	14400017 	ldw	r17,0(r2)
   11f10:	80000c1e 	bne	r16,zero,11f44 <fcvtbuf+0x7c>
   11f14:	88c00617 	ldw	r3,24(r17)
   11f18:	308008c4 	addi	r2,r6,35
   11f1c:	10c00816 	blt	r2,r3,11f40 <fcvtbuf+0x78>
   11f20:	89400717 	ldw	r5,28(r17)
   11f24:	34000904 	addi	r16,r6,36
   11f28:	800d883a 	mov	r6,r16
   11f2c:	8809883a 	mov	r4,r17
   11f30:	00139200 	call	13920 <_realloc_r>
   11f34:	10003426 	beq	r2,zero,12008 <fcvtbuf+0x140>
   11f38:	8c000615 	stw	r16,24(r17)
   11f3c:	88800715 	stw	r2,28(r17)
   11f40:	8c000717 	ldw	r16,28(r17)
   11f44:	000d883a 	mov	r6,zero
   11f48:	01cffc34 	movhi	r7,16368
   11f4c:	a009883a 	mov	r4,r20
   11f50:	980b883a 	mov	r5,r19
   11f54:	00166b40 	call	166b4 <__ledf2>
   11f58:	10000d0e 	bge	r2,zero,11f90 <fcvtbuf+0xc8>
   11f5c:	000d883a 	mov	r6,zero
   11f60:	01effc34 	movhi	r7,49136
   11f64:	a009883a 	mov	r4,r20
   11f68:	980b883a 	mov	r5,r19
   11f6c:	00165d80 	call	165d8 <__gedf2>
   11f70:	0080070e 	bge	zero,r2,11f90 <fcvtbuf+0xc8>
   11f74:	d8800404 	addi	r2,sp,16
   11f78:	d8800315 	stw	r2,12(sp)
   11f7c:	dd800215 	stw	r22,8(sp)
   11f80:	dd400115 	stw	r21,4(sp)
   11f84:	dc800015 	stw	r18,0(sp)
   11f88:	01c00084 	movi	r7,2
   11f8c:	00000606 	br	11fa8 <fcvtbuf+0xe0>
   11f90:	d8800404 	addi	r2,sp,16
   11f94:	d8800315 	stw	r2,12(sp)
   11f98:	dd800215 	stw	r22,8(sp)
   11f9c:	dd400115 	stw	r21,4(sp)
   11fa0:	dc800015 	stw	r18,0(sp)
   11fa4:	01c000c4 	movi	r7,3
   11fa8:	8809883a 	mov	r4,r17
   11fac:	a00b883a 	mov	r5,r20
   11fb0:	980d883a 	mov	r6,r19
   11fb4:	0013cb80 	call	13cb8 <_dtoa_r>
   11fb8:	a9000017 	ldw	r4,0(r21)
   11fbc:	8007883a 	mov	r3,r16
   11fc0:	0109c83a 	sub	r4,zero,r4
   11fc4:	2409c83a 	sub	r4,r4,r16
   11fc8:	d9400417 	ldw	r5,16(sp)
   11fcc:	1140052e 	bgeu	r2,r5,11fe4 <fcvtbuf+0x11c>
   11fd0:	11400003 	ldbu	r5,0(r2)
   11fd4:	18c00044 	addi	r3,r3,1
   11fd8:	10800044 	addi	r2,r2,1
   11fdc:	197fffc5 	stb	r5,-1(r3)
   11fe0:	003ff906 	br	11fc8 <_gp+0xffff0578>
   11fe4:	01400c04 	movi	r5,48
   11fe8:	1905883a 	add	r2,r3,r4
   11fec:	1480030e 	bge	r2,r18,11ffc <fcvtbuf+0x134>
   11ff0:	19400005 	stb	r5,0(r3)
   11ff4:	18c00044 	addi	r3,r3,1
   11ff8:	003ffb06 	br	11fe8 <_gp+0xffff0598>
   11ffc:	18000005 	stb	zero,0(r3)
   12000:	8005883a 	mov	r2,r16
   12004:	00000106 	br	1200c <fcvtbuf+0x144>
   12008:	0005883a 	mov	r2,zero
   1200c:	dfc00c17 	ldw	ra,48(sp)
   12010:	dd800b17 	ldw	r22,44(sp)
   12014:	dd400a17 	ldw	r21,40(sp)
   12018:	dd000917 	ldw	r20,36(sp)
   1201c:	dcc00817 	ldw	r19,32(sp)
   12020:	dc800717 	ldw	r18,28(sp)
   12024:	dc400617 	ldw	r17,24(sp)
   12028:	dc000517 	ldw	r16,20(sp)
   1202c:	dec00d04 	addi	sp,sp,52
   12030:	f800283a 	ret

00012034 <ecvtbuf>:
   12034:	defff404 	addi	sp,sp,-48
   12038:	dc000515 	stw	r16,20(sp)
   1203c:	dc000d17 	ldw	r16,52(sp)
   12040:	008000b4 	movhi	r2,2
   12044:	dd400a15 	stw	r21,40(sp)
   12048:	dd000915 	stw	r20,36(sp)
   1204c:	dcc00815 	stw	r19,32(sp)
   12050:	dc800715 	stw	r18,28(sp)
   12054:	dc400615 	stw	r17,24(sp)
   12058:	10a69504 	addi	r2,r2,-26028
   1205c:	dfc00b15 	stw	ra,44(sp)
   12060:	2029883a 	mov	r20,r4
   12064:	2827883a 	mov	r19,r5
   12068:	3025883a 	mov	r18,r6
   1206c:	382b883a 	mov	r21,r7
   12070:	14400017 	ldw	r17,0(r2)
   12074:	80000b1e 	bne	r16,zero,120a4 <ecvtbuf+0x70>
   12078:	88800617 	ldw	r2,24(r17)
   1207c:	30800816 	blt	r6,r2,120a0 <ecvtbuf+0x6c>
   12080:	89400717 	ldw	r5,28(r17)
   12084:	34000044 	addi	r16,r6,1
   12088:	800d883a 	mov	r6,r16
   1208c:	8809883a 	mov	r4,r17
   12090:	00139200 	call	13920 <_realloc_r>
   12094:	10001f26 	beq	r2,zero,12114 <ecvtbuf+0xe0>
   12098:	8c000615 	stw	r16,24(r17)
   1209c:	88800715 	stw	r2,28(r17)
   120a0:	8c000717 	ldw	r16,28(r17)
   120a4:	d8800404 	addi	r2,sp,16
   120a8:	d8800315 	stw	r2,12(sp)
   120ac:	d8800c17 	ldw	r2,48(sp)
   120b0:	dd400115 	stw	r21,4(sp)
   120b4:	dc800015 	stw	r18,0(sp)
   120b8:	d8800215 	stw	r2,8(sp)
   120bc:	01c00084 	movi	r7,2
   120c0:	a00b883a 	mov	r5,r20
   120c4:	980d883a 	mov	r6,r19
   120c8:	8809883a 	mov	r4,r17
   120cc:	0013cb80 	call	13cb8 <_dtoa_r>
   120d0:	8007883a 	mov	r3,r16
   120d4:	d9000417 	ldw	r4,16(sp)
   120d8:	1100052e 	bgeu	r2,r4,120f0 <ecvtbuf+0xbc>
   120dc:	11000003 	ldbu	r4,0(r2)
   120e0:	18c00044 	addi	r3,r3,1
   120e4:	10800044 	addi	r2,r2,1
   120e8:	193fffc5 	stb	r4,-1(r3)
   120ec:	003ff906 	br	120d4 <_gp+0xffff0684>
   120f0:	01000c04 	movi	r4,48
   120f4:	1c05c83a 	sub	r2,r3,r16
   120f8:	1480030e 	bge	r2,r18,12108 <ecvtbuf+0xd4>
   120fc:	19000005 	stb	r4,0(r3)
   12100:	18c00044 	addi	r3,r3,1
   12104:	003ffb06 	br	120f4 <_gp+0xffff06a4>
   12108:	18000005 	stb	zero,0(r3)
   1210c:	8005883a 	mov	r2,r16
   12110:	00000106 	br	12118 <ecvtbuf+0xe4>
   12114:	0005883a 	mov	r2,zero
   12118:	dfc00b17 	ldw	ra,44(sp)
   1211c:	dd400a17 	ldw	r21,40(sp)
   12120:	dd000917 	ldw	r20,36(sp)
   12124:	dcc00817 	ldw	r19,32(sp)
   12128:	dc800717 	ldw	r18,28(sp)
   1212c:	dc400617 	ldw	r17,24(sp)
   12130:	dc000517 	ldw	r16,20(sp)
   12134:	dec00c04 	addi	sp,sp,48
   12138:	f800283a 	ret

0001213c <_gcvt>:
   1213c:	defff104 	addi	sp,sp,-60
   12140:	dc400815 	stw	r17,32(sp)
   12144:	3023883a 	mov	r17,r6
   12148:	dd400c15 	stw	r21,48(sp)
   1214c:	dd000b15 	stw	r20,44(sp)
   12150:	dc800915 	stw	r18,36(sp)
   12154:	202b883a 	mov	r21,r4
   12158:	2825883a 	mov	r18,r5
   1215c:	3829883a 	mov	r20,r7
   12160:	2809883a 	mov	r4,r5
   12164:	000d883a 	mov	r6,zero
   12168:	000f883a 	mov	r7,zero
   1216c:	880b883a 	mov	r5,r17
   12170:	dd800d15 	stw	r22,52(sp)
   12174:	dcc00a15 	stw	r19,40(sp)
   12178:	dc000715 	stw	r16,28(sp)
   1217c:	dfc00e15 	stw	ra,56(sp)
   12180:	dc000f17 	ldw	r16,60(sp)
   12184:	dd801017 	ldw	r22,64(sp)
   12188:	dcc01117 	ldw	r19,68(sp)
   1218c:	00166b40 	call	166b4 <__ledf2>
   12190:	1000010e 	bge	r2,zero,12198 <_gcvt+0x5c>
   12194:	8c60003c 	xorhi	r17,r17,32768
   12198:	000d883a 	mov	r6,zero
   1219c:	000f883a 	mov	r7,zero
   121a0:	9009883a 	mov	r4,r18
   121a4:	880b883a 	mov	r5,r17
   121a8:	00165500 	call	16550 <__eqdf2>
   121ac:	1000041e 	bne	r2,zero,121c0 <_gcvt+0x84>
   121b0:	00800c04 	movi	r2,48
   121b4:	80800005 	stb	r2,0(r16)
   121b8:	80000045 	stb	zero,1(r16)
   121bc:	00009206 	br	12408 <_gcvt+0x2cc>
   121c0:	01bac734 	movhi	r6,60188
   121c4:	01cfc6b4 	movhi	r7,16154
   121c8:	3190cb44 	addi	r6,r6,17197
   121cc:	39cdb884 	addi	r7,r7,14050
   121d0:	9009883a 	mov	r4,r18
   121d4:	880b883a 	mov	r5,r17
   121d8:	00166b40 	call	166b4 <__ledf2>
   121dc:	00800d16 	blt	zero,r2,12214 <_gcvt+0xd8>
   121e0:	b5803fcc 	andi	r22,r22,255
   121e4:	b580201c 	xori	r22,r22,128
   121e8:	b5bfe004 	addi	r22,r22,-128
   121ec:	a53fffc4 	addi	r20,r20,-1
   121f0:	dcc00215 	stw	r19,8(sp)
   121f4:	dd800115 	stw	r22,4(sp)
   121f8:	dd000015 	stw	r20,0(sp)
   121fc:	900d883a 	mov	r6,r18
   12200:	880f883a 	mov	r7,r17
   12204:	800b883a 	mov	r5,r16
   12208:	a809883a 	mov	r4,r21
   1220c:	0011ce40 	call	11ce4 <print_e>
   12210:	00007d06 	br	12408 <_gcvt+0x2cc>
   12214:	a009883a 	mov	r4,r20
   12218:	00136380 	call	13638 <_mprec_log10>
   1221c:	100d883a 	mov	r6,r2
   12220:	180f883a 	mov	r7,r3
   12224:	9009883a 	mov	r4,r18
   12228:	880b883a 	mov	r5,r17
   1222c:	00165d80 	call	165d8 <__gedf2>
   12230:	103feb0e 	bge	r2,zero,121e0 <_gp+0xffff0790>
   12234:	9009883a 	mov	r4,r18
   12238:	000d883a 	mov	r6,zero
   1223c:	01cffc34 	movhi	r7,16368
   12240:	880b883a 	mov	r5,r17
   12244:	00166b40 	call	166b4 <__ledf2>
   12248:	d9000504 	addi	r4,sp,20
   1224c:	d8c00604 	addi	r3,sp,24
   12250:	1000070e 	bge	r2,zero,12270 <_gcvt+0x134>
   12254:	d8800404 	addi	r2,sp,16
   12258:	d8800315 	stw	r2,12(sp)
   1225c:	d9000215 	stw	r4,8(sp)
   12260:	d8c00115 	stw	r3,4(sp)
   12264:	dd000015 	stw	r20,0(sp)
   12268:	01c000c4 	movi	r7,3
   1226c:	00000606 	br	12288 <_gcvt+0x14c>
   12270:	d8800404 	addi	r2,sp,16
   12274:	d8800315 	stw	r2,12(sp)
   12278:	d9000215 	stw	r4,8(sp)
   1227c:	d8c00115 	stw	r3,4(sp)
   12280:	dd000015 	stw	r20,0(sp)
   12284:	01c00084 	movi	r7,2
   12288:	a809883a 	mov	r4,r21
   1228c:	900b883a 	mov	r5,r18
   12290:	880d883a 	mov	r6,r17
   12294:	0013cb80 	call	13cb8 <_dtoa_r>
   12298:	d9000617 	ldw	r4,24(sp)
   1229c:	00c9c3c4 	movi	r3,9999
   122a0:	20c00226 	beq	r4,r3,122ac <_gcvt+0x170>
   122a4:	8009883a 	mov	r4,r16
   122a8:	00000a06 	br	122d4 <_gcvt+0x198>
   122ac:	100b883a 	mov	r5,r2
   122b0:	8009883a 	mov	r4,r16
   122b4:	0013a140 	call	13a14 <strcpy>
   122b8:	00005306 	br	12408 <_gcvt+0x2cc>
   122bc:	01c01d0e 	bge	zero,r7,12334 <_gcvt+0x1f8>
   122c0:	39ffffc4 	addi	r7,r7,-1
   122c4:	21800005 	stb	r6,0(r4)
   122c8:	10800044 	addi	r2,r2,1
   122cc:	d9c00615 	stw	r7,24(sp)
   122d0:	21000044 	addi	r4,r4,1
   122d4:	11800003 	ldbu	r6,0(r2)
   122d8:	a107c83a 	sub	r3,r20,r4
   122dc:	200b883a 	mov	r5,r4
   122e0:	32003fcc 	andi	r8,r6,255
   122e4:	4200201c 	xori	r8,r8,128
   122e8:	423fe004 	addi	r8,r8,-128
   122ec:	80c7883a 	add	r3,r16,r3
   122f0:	d9c00617 	ldw	r7,24(sp)
   122f4:	403ff11e 	bne	r8,zero,122bc <_gp+0xffff086c>
   122f8:	000d883a 	mov	r6,zero
   122fc:	38cfc83a 	sub	r7,r7,r3
   12300:	02400c04 	movi	r9,48
   12304:	00000506 	br	1231c <_gcvt+0x1e0>
   12308:	00c0070e 	bge	zero,r3,12328 <_gcvt+0x1ec>
   1230c:	22400005 	stb	r9,0(r4)
   12310:	18ffffc4 	addi	r3,r3,-1
   12314:	21000044 	addi	r4,r4,1
   12318:	01800044 	movi	r6,1
   1231c:	38d1883a 	add	r8,r7,r3
   12320:	200b883a 	mov	r5,r4
   12324:	023ff816 	blt	zero,r8,12308 <_gp+0xffff08b8>
   12328:	31803fcc 	andi	r6,r6,255
   1232c:	30000126 	beq	r6,zero,12334 <_gcvt+0x1f8>
   12330:	da000615 	stw	r8,24(sp)
   12334:	9800021e 	bne	r19,zero,12340 <_gcvt+0x204>
   12338:	11800007 	ldb	r6,0(r2)
   1233c:	30003126 	beq	r6,zero,12404 <_gcvt+0x2c8>
   12340:	8100031e 	bne	r16,r4,12350 <_gcvt+0x214>
   12344:	01000c04 	movi	r4,48
   12348:	81400044 	addi	r5,r16,1
   1234c:	81000005 	stb	r4,0(r16)
   12350:	d9800617 	ldw	r6,24(sp)
   12354:	01000b84 	movi	r4,46
   12358:	29000005 	stb	r4,0(r5)
   1235c:	02000c04 	movi	r8,48
   12360:	29000044 	addi	r4,r5,1
   12364:	000b883a 	mov	r5,zero
   12368:	300f883a 	mov	r7,r6
   1236c:	30000416 	blt	r6,zero,12380 <_gcvt+0x244>
   12370:	29403fcc 	andi	r5,r5,255
   12374:	28001226 	beq	r5,zero,123c0 <_gcvt+0x284>
   12378:	d9800615 	stw	r6,24(sp)
   1237c:	00001006 	br	123c0 <_gcvt+0x284>
   12380:	31800044 	addi	r6,r6,1
   12384:	00c0050e 	bge	zero,r3,1239c <_gcvt+0x260>
   12388:	22000005 	stb	r8,0(r4)
   1238c:	18ffffc4 	addi	r3,r3,-1
   12390:	21000044 	addi	r4,r4,1
   12394:	01400044 	movi	r5,1
   12398:	003ff306 	br	12368 <_gp+0xffff0918>
   1239c:	29403fcc 	andi	r5,r5,255
   123a0:	28000726 	beq	r5,zero,123c0 <_gcvt+0x284>
   123a4:	d9c00615 	stw	r7,24(sp)
   123a8:	00000506 	br	123c0 <_gcvt+0x284>
   123ac:	00c00a0e 	bge	zero,r3,123d8 <_gcvt+0x29c>
   123b0:	21800005 	stb	r6,0(r4)
   123b4:	10800044 	addi	r2,r2,1
   123b8:	18ffffc4 	addi	r3,r3,-1
   123bc:	21000044 	addi	r4,r4,1
   123c0:	11800003 	ldbu	r6,0(r2)
   123c4:	200b883a 	mov	r5,r4
   123c8:	31c03fcc 	andi	r7,r6,255
   123cc:	39c0201c 	xori	r7,r7,128
   123d0:	39ffe004 	addi	r7,r7,-128
   123d4:	383ff51e 	bne	r7,zero,123ac <_gp+0xffff095c>
   123d8:	98000a26 	beq	r19,zero,12404 <_gcvt+0x2c8>
   123dc:	1805883a 	mov	r2,r3
   123e0:	01800c04 	movi	r6,48
   123e4:	0080040e 	bge	zero,r2,123f8 <_gcvt+0x2bc>
   123e8:	21800005 	stb	r6,0(r4)
   123ec:	10bfffc4 	addi	r2,r2,-1
   123f0:	21000044 	addi	r4,r4,1
   123f4:	003ffb06 	br	123e4 <_gp+0xffff0994>
   123f8:	1800010e 	bge	r3,zero,12400 <_gcvt+0x2c4>
   123fc:	0007883a 	mov	r3,zero
   12400:	28cb883a 	add	r5,r5,r3
   12404:	28000005 	stb	zero,0(r5)
   12408:	8005883a 	mov	r2,r16
   1240c:	dfc00e17 	ldw	ra,56(sp)
   12410:	dd800d17 	ldw	r22,52(sp)
   12414:	dd400c17 	ldw	r21,48(sp)
   12418:	dd000b17 	ldw	r20,44(sp)
   1241c:	dcc00a17 	ldw	r19,40(sp)
   12420:	dc800917 	ldw	r18,36(sp)
   12424:	dc400817 	ldw	r17,32(sp)
   12428:	dc000717 	ldw	r16,28(sp)
   1242c:	dec00f04 	addi	sp,sp,60
   12430:	f800283a 	ret

00012434 <_dcvt>:
   12434:	defff504 	addi	sp,sp,-44
   12438:	d8800d07 	ldb	r2,52(sp)
   1243c:	dc400815 	stw	r17,32(sp)
   12440:	dc000715 	stw	r16,28(sp)
   12444:	2823883a 	mov	r17,r5
   12448:	dfc00a15 	stw	ra,40(sp)
   1244c:	300b883a 	mov	r5,r6
   12450:	dc800915 	stw	r18,36(sp)
   12454:	018011c4 	movi	r6,71
   12458:	3811883a 	mov	r8,r7
   1245c:	dc000b17 	ldw	r16,44(sp)
   12460:	d8c00e17 	ldw	r3,56(sp)
   12464:	11807726 	beq	r2,r6,12644 <_dcvt+0x210>
   12468:	30800516 	blt	r6,r2,12480 <_dcvt+0x4c>
   1246c:	01801144 	movi	r6,69
   12470:	11807d26 	beq	r2,r6,12668 <_dcvt+0x234>
   12474:	01801184 	movi	r6,70
   12478:	11800826 	beq	r2,r6,1249c <_dcvt+0x68>
   1247c:	00008106 	br	12684 <_dcvt+0x250>
   12480:	01801984 	movi	r6,102
   12484:	11800526 	beq	r2,r6,1249c <_dcvt+0x68>
   12488:	018019c4 	movi	r6,103
   1248c:	11806d26 	beq	r2,r6,12644 <_dcvt+0x210>
   12490:	01801944 	movi	r6,101
   12494:	11807b1e 	bne	r2,r6,12684 <_dcvt+0x250>
   12498:	00007306 	br	12668 <_dcvt+0x234>
   1249c:	80000226 	beq	r16,zero,124a8 <_dcvt+0x74>
   124a0:	04800044 	movi	r18,1
   124a4:	00000106 	br	124ac <_dcvt+0x78>
   124a8:	1825883a 	mov	r18,r3
   124ac:	d8800404 	addi	r2,sp,16
   124b0:	d8800315 	stw	r2,12(sp)
   124b4:	d8800504 	addi	r2,sp,20
   124b8:	d8800215 	stw	r2,8(sp)
   124bc:	d8800604 	addi	r2,sp,24
   124c0:	d8800115 	stw	r2,4(sp)
   124c4:	dc000015 	stw	r16,0(sp)
   124c8:	01c000c4 	movi	r7,3
   124cc:	400d883a 	mov	r6,r8
   124d0:	0013cb80 	call	13cb8 <_dtoa_r>
   124d4:	d9000617 	ldw	r4,24(sp)
   124d8:	00c9c3c4 	movi	r3,9999
   124dc:	20c00326 	beq	r4,r3,124ec <_dcvt+0xb8>
   124e0:	880f883a 	mov	r7,r17
   124e4:	100d883a 	mov	r6,r2
   124e8:	00000a06 	br	12514 <_dcvt+0xe0>
   124ec:	100b883a 	mov	r5,r2
   124f0:	8809883a 	mov	r4,r17
   124f4:	0013a140 	call	13a14 <strcpy>
   124f8:	00006206 	br	12684 <_dcvt+0x250>
   124fc:	01001c0e 	bge	zero,r4,12570 <_dcvt+0x13c>
   12500:	213fffc4 	addi	r4,r4,-1
   12504:	39400005 	stb	r5,0(r7)
   12508:	31800044 	addi	r6,r6,1
   1250c:	d9000615 	stw	r4,24(sp)
   12510:	39c00044 	addi	r7,r7,1
   12514:	31400003 	ldbu	r5,0(r6)
   12518:	3807883a 	mov	r3,r7
   1251c:	d9000617 	ldw	r4,24(sp)
   12520:	2a003fcc 	andi	r8,r5,255
   12524:	4200201c 	xori	r8,r8,128
   12528:	423fe004 	addi	r8,r8,-128
   1252c:	403ff31e 	bne	r8,zero,124fc <_gp+0xffff0aac>
   12530:	02400c04 	movi	r9,48
   12534:	21cbc83a 	sub	r5,r4,r7
   12538:	194b883a 	add	r5,r3,r5
   1253c:	0140040e 	bge	zero,r5,12550 <_dcvt+0x11c>
   12540:	3a400005 	stb	r9,0(r7)
   12544:	02000044 	movi	r8,1
   12548:	39c00044 	addi	r7,r7,1
   1254c:	003ff906 	br	12534 <_gp+0xffff0ae4>
   12550:	200b883a 	mov	r5,r4
   12554:	2000010e 	bge	r4,zero,1255c <_dcvt+0x128>
   12558:	000b883a 	mov	r5,zero
   1255c:	42003fcc 	andi	r8,r8,255
   12560:	1947883a 	add	r3,r3,r5
   12564:	2149c83a 	sub	r4,r4,r5
   12568:	40000126 	beq	r8,zero,12570 <_dcvt+0x13c>
   1256c:	d9000615 	stw	r4,24(sp)
   12570:	9000021e 	bne	r18,zero,1257c <_dcvt+0x148>
   12574:	31000007 	ldb	r4,0(r6)
   12578:	20003026 	beq	r4,zero,1263c <_dcvt+0x208>
   1257c:	1180031e 	bne	r2,r6,1258c <_dcvt+0x158>
   12580:	00800c04 	movi	r2,48
   12584:	18800005 	stb	r2,0(r3)
   12588:	18c00044 	addi	r3,r3,1
   1258c:	d9000617 	ldw	r4,24(sp)
   12590:	00800b84 	movi	r2,46
   12594:	18800005 	stb	r2,0(r3)
   12598:	01c00c04 	movi	r7,48
   1259c:	18800044 	addi	r2,r3,1
   125a0:	0007883a 	mov	r3,zero
   125a4:	200b883a 	mov	r5,r4
   125a8:	20000416 	blt	r4,zero,125bc <_dcvt+0x188>
   125ac:	18c03fcc 	andi	r3,r3,255
   125b0:	18001226 	beq	r3,zero,125fc <_dcvt+0x1c8>
   125b4:	d9000615 	stw	r4,24(sp)
   125b8:	00001006 	br	125fc <_dcvt+0x1c8>
   125bc:	21000044 	addi	r4,r4,1
   125c0:	0400050e 	bge	zero,r16,125d8 <_dcvt+0x1a4>
   125c4:	11c00005 	stb	r7,0(r2)
   125c8:	843fffc4 	addi	r16,r16,-1
   125cc:	10800044 	addi	r2,r2,1
   125d0:	00c00044 	movi	r3,1
   125d4:	003ff306 	br	125a4 <_gp+0xffff0b54>
   125d8:	18c03fcc 	andi	r3,r3,255
   125dc:	18000726 	beq	r3,zero,125fc <_dcvt+0x1c8>
   125e0:	d9400615 	stw	r5,24(sp)
   125e4:	00000506 	br	125fc <_dcvt+0x1c8>
   125e8:	0400140e 	bge	zero,r16,1263c <_dcvt+0x208>
   125ec:	11000005 	stb	r4,0(r2)
   125f0:	31800044 	addi	r6,r6,1
   125f4:	843fffc4 	addi	r16,r16,-1
   125f8:	10800044 	addi	r2,r2,1
   125fc:	31000003 	ldbu	r4,0(r6)
   12600:	1007883a 	mov	r3,r2
   12604:	21403fcc 	andi	r5,r4,255
   12608:	2940201c 	xori	r5,r5,128
   1260c:	297fe004 	addi	r5,r5,-128
   12610:	283ff51e 	bne	r5,zero,125e8 <_gp+0xffff0b98>
   12614:	8009883a 	mov	r4,r16
   12618:	01400c04 	movi	r5,48
   1261c:	0100040e 	bge	zero,r4,12630 <_dcvt+0x1fc>
   12620:	11400005 	stb	r5,0(r2)
   12624:	213fffc4 	addi	r4,r4,-1
   12628:	10800044 	addi	r2,r2,1
   1262c:	003ffb06 	br	1261c <_gp+0xffff0bcc>
   12630:	8000010e 	bge	r16,zero,12638 <_dcvt+0x204>
   12634:	0021883a 	mov	r16,zero
   12638:	1c07883a 	add	r3,r3,r16
   1263c:	18000005 	stb	zero,0(r3)
   12640:	00001006 	br	12684 <_dcvt+0x250>
   12644:	8000011e 	bne	r16,zero,1264c <_dcvt+0x218>
   12648:	04000044 	movi	r16,1
   1264c:	d8c00215 	stw	r3,8(sp)
   12650:	d8800115 	stw	r2,4(sp)
   12654:	dc400015 	stw	r17,0(sp)
   12658:	800f883a 	mov	r7,r16
   1265c:	400d883a 	mov	r6,r8
   12660:	001213c0 	call	1213c <_gcvt>
   12664:	00000706 	br	12684 <_dcvt+0x250>
   12668:	280d883a 	mov	r6,r5
   1266c:	d8c00215 	stw	r3,8(sp)
   12670:	d8800115 	stw	r2,4(sp)
   12674:	dc000015 	stw	r16,0(sp)
   12678:	400f883a 	mov	r7,r8
   1267c:	880b883a 	mov	r5,r17
   12680:	0011ce40 	call	11ce4 <print_e>
   12684:	8805883a 	mov	r2,r17
   12688:	dfc00a17 	ldw	ra,40(sp)
   1268c:	dc800917 	ldw	r18,36(sp)
   12690:	dc400817 	ldw	r17,32(sp)
   12694:	dc000717 	ldw	r16,28(sp)
   12698:	dec00b04 	addi	sp,sp,44
   1269c:	f800283a 	ret

000126a0 <__sfvwrite_small_dev>:
   126a0:	2880000b 	ldhu	r2,0(r5)
   126a4:	1080020c 	andi	r2,r2,8
   126a8:	10002126 	beq	r2,zero,12730 <__sfvwrite_small_dev+0x90>
   126ac:	2880008f 	ldh	r2,2(r5)
   126b0:	defffa04 	addi	sp,sp,-24
   126b4:	dc000015 	stw	r16,0(sp)
   126b8:	dfc00515 	stw	ra,20(sp)
   126bc:	dd000415 	stw	r20,16(sp)
   126c0:	dcc00315 	stw	r19,12(sp)
   126c4:	dc800215 	stw	r18,8(sp)
   126c8:	dc400115 	stw	r17,4(sp)
   126cc:	2821883a 	mov	r16,r5
   126d0:	10001216 	blt	r2,zero,1271c <__sfvwrite_small_dev+0x7c>
   126d4:	2027883a 	mov	r19,r4
   126d8:	3025883a 	mov	r18,r6
   126dc:	3823883a 	mov	r17,r7
   126e0:	05010004 	movi	r20,1024
   126e4:	04400b0e 	bge	zero,r17,12714 <__sfvwrite_small_dev+0x74>
   126e8:	880f883a 	mov	r7,r17
   126ec:	a440010e 	bge	r20,r17,126f4 <__sfvwrite_small_dev+0x54>
   126f0:	01c10004 	movi	r7,1024
   126f4:	8140008f 	ldh	r5,2(r16)
   126f8:	900d883a 	mov	r6,r18
   126fc:	9809883a 	mov	r4,r19
   12700:	0013a400 	call	13a40 <_write_r>
   12704:	0080050e 	bge	zero,r2,1271c <__sfvwrite_small_dev+0x7c>
   12708:	88a3c83a 	sub	r17,r17,r2
   1270c:	90a5883a 	add	r18,r18,r2
   12710:	003ff406 	br	126e4 <_gp+0xffff0c94>
   12714:	0005883a 	mov	r2,zero
   12718:	00000706 	br	12738 <__sfvwrite_small_dev+0x98>
   1271c:	8080000b 	ldhu	r2,0(r16)
   12720:	10801014 	ori	r2,r2,64
   12724:	8080000d 	sth	r2,0(r16)
   12728:	00bfffc4 	movi	r2,-1
   1272c:	00000206 	br	12738 <__sfvwrite_small_dev+0x98>
   12730:	00bfffc4 	movi	r2,-1
   12734:	f800283a 	ret
   12738:	dfc00517 	ldw	ra,20(sp)
   1273c:	dd000417 	ldw	r20,16(sp)
   12740:	dcc00317 	ldw	r19,12(sp)
   12744:	dc800217 	ldw	r18,8(sp)
   12748:	dc400117 	ldw	r17,4(sp)
   1274c:	dc000017 	ldw	r16,0(sp)
   12750:	dec00604 	addi	sp,sp,24
   12754:	f800283a 	ret

00012758 <_Balloc>:
   12758:	20800417 	ldw	r2,16(r4)
   1275c:	defffc04 	addi	sp,sp,-16
   12760:	dc400115 	stw	r17,4(sp)
   12764:	dc000015 	stw	r16,0(sp)
   12768:	dfc00315 	stw	ra,12(sp)
   1276c:	dc800215 	stw	r18,8(sp)
   12770:	2021883a 	mov	r16,r4
   12774:	2823883a 	mov	r17,r5
   12778:	1000071e 	bne	r2,zero,12798 <_Balloc+0x40>
   1277c:	01000404 	movi	r4,16
   12780:	0014fb00 	call	14fb0 <malloc>
   12784:	80800415 	stw	r2,16(r16)
   12788:	10000115 	stw	zero,4(r2)
   1278c:	10000215 	stw	zero,8(r2)
   12790:	10000015 	stw	zero,0(r2)
   12794:	10000315 	stw	zero,12(r2)
   12798:	84800417 	ldw	r18,16(r16)
   1279c:	90800317 	ldw	r2,12(r18)
   127a0:	10000a26 	beq	r2,zero,127cc <_Balloc+0x74>
   127a4:	80800417 	ldw	r2,16(r16)
   127a8:	8c47883a 	add	r3,r17,r17
   127ac:	18c7883a 	add	r3,r3,r3
   127b0:	10800317 	ldw	r2,12(r2)
   127b4:	10c7883a 	add	r3,r2,r3
   127b8:	18800017 	ldw	r2,0(r3)
   127bc:	10000d26 	beq	r2,zero,127f4 <_Balloc+0x9c>
   127c0:	11000017 	ldw	r4,0(r2)
   127c4:	19000015 	stw	r4,0(r3)
   127c8:	00001406 	br	1281c <_Balloc+0xc4>
   127cc:	01800844 	movi	r6,33
   127d0:	01400104 	movi	r5,4
   127d4:	8009883a 	mov	r4,r16
   127d8:	00137680 	call	13768 <_calloc_r>
   127dc:	90800315 	stw	r2,12(r18)
   127e0:	80800417 	ldw	r2,16(r16)
   127e4:	10800317 	ldw	r2,12(r2)
   127e8:	103fee1e 	bne	r2,zero,127a4 <_gp+0xffff0d54>
   127ec:	0005883a 	mov	r2,zero
   127f0:	00000c06 	br	12824 <_Balloc+0xcc>
   127f4:	01400044 	movi	r5,1
   127f8:	2c64983a 	sll	r18,r5,r17
   127fc:	8009883a 	mov	r4,r16
   12800:	91800144 	addi	r6,r18,5
   12804:	318d883a 	add	r6,r6,r6
   12808:	318d883a 	add	r6,r6,r6
   1280c:	00137680 	call	13768 <_calloc_r>
   12810:	103ff626 	beq	r2,zero,127ec <_gp+0xffff0d9c>
   12814:	14400115 	stw	r17,4(r2)
   12818:	14800215 	stw	r18,8(r2)
   1281c:	10000415 	stw	zero,16(r2)
   12820:	10000315 	stw	zero,12(r2)
   12824:	dfc00317 	ldw	ra,12(sp)
   12828:	dc800217 	ldw	r18,8(sp)
   1282c:	dc400117 	ldw	r17,4(sp)
   12830:	dc000017 	ldw	r16,0(sp)
   12834:	dec00404 	addi	sp,sp,16
   12838:	f800283a 	ret

0001283c <_Bfree>:
   1283c:	20800417 	ldw	r2,16(r4)
   12840:	defffd04 	addi	sp,sp,-12
   12844:	dc400115 	stw	r17,4(sp)
   12848:	dc000015 	stw	r16,0(sp)
   1284c:	dfc00215 	stw	ra,8(sp)
   12850:	2023883a 	mov	r17,r4
   12854:	2821883a 	mov	r16,r5
   12858:	1000071e 	bne	r2,zero,12878 <_Bfree+0x3c>
   1285c:	01000404 	movi	r4,16
   12860:	0014fb00 	call	14fb0 <malloc>
   12864:	88800415 	stw	r2,16(r17)
   12868:	10000115 	stw	zero,4(r2)
   1286c:	10000215 	stw	zero,8(r2)
   12870:	10000015 	stw	zero,0(r2)
   12874:	10000315 	stw	zero,12(r2)
   12878:	80000926 	beq	r16,zero,128a0 <_Bfree+0x64>
   1287c:	88c00417 	ldw	r3,16(r17)
   12880:	80800117 	ldw	r2,4(r16)
   12884:	18c00317 	ldw	r3,12(r3)
   12888:	1085883a 	add	r2,r2,r2
   1288c:	1085883a 	add	r2,r2,r2
   12890:	1885883a 	add	r2,r3,r2
   12894:	10c00017 	ldw	r3,0(r2)
   12898:	80c00015 	stw	r3,0(r16)
   1289c:	14000015 	stw	r16,0(r2)
   128a0:	dfc00217 	ldw	ra,8(sp)
   128a4:	dc400117 	ldw	r17,4(sp)
   128a8:	dc000017 	ldw	r16,0(sp)
   128ac:	dec00304 	addi	sp,sp,12
   128b0:	f800283a 	ret

000128b4 <__multadd>:
   128b4:	defff604 	addi	sp,sp,-40
   128b8:	dc400115 	stw	r17,4(sp)
   128bc:	2c400417 	ldw	r17,16(r5)
   128c0:	ddc00715 	stw	r23,28(sp)
   128c4:	dd800615 	stw	r22,24(sp)
   128c8:	dd400515 	stw	r21,20(sp)
   128cc:	dd000415 	stw	r20,16(sp)
   128d0:	dcc00315 	stw	r19,12(sp)
   128d4:	dc000015 	stw	r16,0(sp)
   128d8:	dfc00915 	stw	ra,36(sp)
   128dc:	df000815 	stw	fp,32(sp)
   128e0:	dc800215 	stw	r18,8(sp)
   128e4:	2027883a 	mov	r19,r4
   128e8:	2821883a 	mov	r16,r5
   128ec:	3029883a 	mov	r20,r6
   128f0:	382b883a 	mov	r21,r7
   128f4:	2d800504 	addi	r22,r5,20
   128f8:	002f883a 	mov	r23,zero
   128fc:	b7000017 	ldw	fp,0(r22)
   12900:	a00b883a 	mov	r5,r20
   12904:	bdc00044 	addi	r23,r23,1
   12908:	e13fffcc 	andi	r4,fp,65535
   1290c:	00114000 	call	11400 <__mulsi3>
   12910:	e008d43a 	srli	r4,fp,16
   12914:	a00b883a 	mov	r5,r20
   12918:	1565883a 	add	r18,r2,r21
   1291c:	00114000 	call	11400 <__mulsi3>
   12920:	9006d43a 	srli	r3,r18,16
   12924:	94bfffcc 	andi	r18,r18,65535
   12928:	b5800104 	addi	r22,r22,4
   1292c:	10c5883a 	add	r2,r2,r3
   12930:	102ad43a 	srli	r21,r2,16
   12934:	1004943a 	slli	r2,r2,16
   12938:	14a5883a 	add	r18,r2,r18
   1293c:	b4bfff15 	stw	r18,-4(r22)
   12940:	bc7fee16 	blt	r23,r17,128fc <_gp+0xffff0eac>
   12944:	a8001926 	beq	r21,zero,129ac <__multadd+0xf8>
   12948:	80800217 	ldw	r2,8(r16)
   1294c:	88801016 	blt	r17,r2,12990 <__multadd+0xdc>
   12950:	81400117 	ldw	r5,4(r16)
   12954:	9809883a 	mov	r4,r19
   12958:	29400044 	addi	r5,r5,1
   1295c:	00127580 	call	12758 <_Balloc>
   12960:	81800417 	ldw	r6,16(r16)
   12964:	81400304 	addi	r5,r16,12
   12968:	11000304 	addi	r4,r2,12
   1296c:	31800084 	addi	r6,r6,2
   12970:	318d883a 	add	r6,r6,r6
   12974:	318d883a 	add	r6,r6,r6
   12978:	1025883a 	mov	r18,r2
   1297c:	0014fd80 	call	14fd8 <memcpy>
   12980:	800b883a 	mov	r5,r16
   12984:	9809883a 	mov	r4,r19
   12988:	001283c0 	call	1283c <_Bfree>
   1298c:	9021883a 	mov	r16,r18
   12990:	88800144 	addi	r2,r17,5
   12994:	1085883a 	add	r2,r2,r2
   12998:	1085883a 	add	r2,r2,r2
   1299c:	8085883a 	add	r2,r16,r2
   129a0:	15400015 	stw	r21,0(r2)
   129a4:	8c400044 	addi	r17,r17,1
   129a8:	84400415 	stw	r17,16(r16)
   129ac:	8005883a 	mov	r2,r16
   129b0:	dfc00917 	ldw	ra,36(sp)
   129b4:	df000817 	ldw	fp,32(sp)
   129b8:	ddc00717 	ldw	r23,28(sp)
   129bc:	dd800617 	ldw	r22,24(sp)
   129c0:	dd400517 	ldw	r21,20(sp)
   129c4:	dd000417 	ldw	r20,16(sp)
   129c8:	dcc00317 	ldw	r19,12(sp)
   129cc:	dc800217 	ldw	r18,8(sp)
   129d0:	dc400117 	ldw	r17,4(sp)
   129d4:	dc000017 	ldw	r16,0(sp)
   129d8:	dec00a04 	addi	sp,sp,40
   129dc:	f800283a 	ret

000129e0 <__s2b>:
   129e0:	defff904 	addi	sp,sp,-28
   129e4:	dc800215 	stw	r18,8(sp)
   129e8:	dc000015 	stw	r16,0(sp)
   129ec:	2025883a 	mov	r18,r4
   129f0:	2821883a 	mov	r16,r5
   129f4:	39000204 	addi	r4,r7,8
   129f8:	01400244 	movi	r5,9
   129fc:	dcc00315 	stw	r19,12(sp)
   12a00:	dc400115 	stw	r17,4(sp)
   12a04:	dfc00615 	stw	ra,24(sp)
   12a08:	dd400515 	stw	r21,20(sp)
   12a0c:	dd000415 	stw	r20,16(sp)
   12a10:	3023883a 	mov	r17,r6
   12a14:	3827883a 	mov	r19,r7
   12a18:	00151200 	call	15120 <__divsi3>
   12a1c:	00c00044 	movi	r3,1
   12a20:	000b883a 	mov	r5,zero
   12a24:	1880030e 	bge	r3,r2,12a34 <__s2b+0x54>
   12a28:	18c7883a 	add	r3,r3,r3
   12a2c:	29400044 	addi	r5,r5,1
   12a30:	003ffc06 	br	12a24 <_gp+0xffff0fd4>
   12a34:	9009883a 	mov	r4,r18
   12a38:	00127580 	call	12758 <_Balloc>
   12a3c:	d8c00717 	ldw	r3,28(sp)
   12a40:	10c00515 	stw	r3,20(r2)
   12a44:	00c00044 	movi	r3,1
   12a48:	10c00415 	stw	r3,16(r2)
   12a4c:	00c00244 	movi	r3,9
   12a50:	1c400e0e 	bge	r3,r17,12a8c <__s2b+0xac>
   12a54:	80e9883a 	add	r20,r16,r3
   12a58:	a02b883a 	mov	r21,r20
   12a5c:	8461883a 	add	r16,r16,r17
   12a60:	a9c00007 	ldb	r7,0(r21)
   12a64:	01800284 	movi	r6,10
   12a68:	100b883a 	mov	r5,r2
   12a6c:	39fff404 	addi	r7,r7,-48
   12a70:	9009883a 	mov	r4,r18
   12a74:	ad400044 	addi	r21,r21,1
   12a78:	00128b40 	call	128b4 <__multadd>
   12a7c:	ac3ff81e 	bne	r21,r16,12a60 <_gp+0xffff1010>
   12a80:	a461883a 	add	r16,r20,r17
   12a84:	843ffe04 	addi	r16,r16,-8
   12a88:	00000206 	br	12a94 <__s2b+0xb4>
   12a8c:	84000284 	addi	r16,r16,10
   12a90:	1823883a 	mov	r17,r3
   12a94:	8c23c83a 	sub	r17,r17,r16
   12a98:	8c07883a 	add	r3,r17,r16
   12a9c:	1cc0080e 	bge	r3,r19,12ac0 <__s2b+0xe0>
   12aa0:	81c00007 	ldb	r7,0(r16)
   12aa4:	01800284 	movi	r6,10
   12aa8:	100b883a 	mov	r5,r2
   12aac:	39fff404 	addi	r7,r7,-48
   12ab0:	9009883a 	mov	r4,r18
   12ab4:	00128b40 	call	128b4 <__multadd>
   12ab8:	84000044 	addi	r16,r16,1
   12abc:	003ff606 	br	12a98 <_gp+0xffff1048>
   12ac0:	dfc00617 	ldw	ra,24(sp)
   12ac4:	dd400517 	ldw	r21,20(sp)
   12ac8:	dd000417 	ldw	r20,16(sp)
   12acc:	dcc00317 	ldw	r19,12(sp)
   12ad0:	dc800217 	ldw	r18,8(sp)
   12ad4:	dc400117 	ldw	r17,4(sp)
   12ad8:	dc000017 	ldw	r16,0(sp)
   12adc:	dec00704 	addi	sp,sp,28
   12ae0:	f800283a 	ret

00012ae4 <__hi0bits>:
   12ae4:	20bfffec 	andhi	r2,r4,65535
   12ae8:	1000031e 	bne	r2,zero,12af8 <__hi0bits+0x14>
   12aec:	2008943a 	slli	r4,r4,16
   12af0:	00800404 	movi	r2,16
   12af4:	00000106 	br	12afc <__hi0bits+0x18>
   12af8:	0005883a 	mov	r2,zero
   12afc:	20ffc02c 	andhi	r3,r4,65280
   12b00:	1800021e 	bne	r3,zero,12b0c <__hi0bits+0x28>
   12b04:	2008923a 	slli	r4,r4,8
   12b08:	10800204 	addi	r2,r2,8
   12b0c:	20fc002c 	andhi	r3,r4,61440
   12b10:	1800021e 	bne	r3,zero,12b1c <__hi0bits+0x38>
   12b14:	2008913a 	slli	r4,r4,4
   12b18:	10800104 	addi	r2,r2,4
   12b1c:	20f0002c 	andhi	r3,r4,49152
   12b20:	1800031e 	bne	r3,zero,12b30 <__hi0bits+0x4c>
   12b24:	2109883a 	add	r4,r4,r4
   12b28:	10800084 	addi	r2,r2,2
   12b2c:	2109883a 	add	r4,r4,r4
   12b30:	20000516 	blt	r4,zero,12b48 <__hi0bits+0x64>
   12b34:	2110002c 	andhi	r4,r4,16384
   12b38:	20000226 	beq	r4,zero,12b44 <__hi0bits+0x60>
   12b3c:	10800044 	addi	r2,r2,1
   12b40:	f800283a 	ret
   12b44:	00800804 	movi	r2,32
   12b48:	f800283a 	ret

00012b4c <__lo0bits>:
   12b4c:	20c00017 	ldw	r3,0(r4)
   12b50:	188001cc 	andi	r2,r3,7
   12b54:	10000c26 	beq	r2,zero,12b88 <__lo0bits+0x3c>
   12b58:	1880004c 	andi	r2,r3,1
   12b5c:	1000231e 	bne	r2,zero,12bec <__lo0bits+0xa0>
   12b60:	1880008c 	andi	r2,r3,2
   12b64:	10000426 	beq	r2,zero,12b78 <__lo0bits+0x2c>
   12b68:	1806d07a 	srli	r3,r3,1
   12b6c:	00800044 	movi	r2,1
   12b70:	20c00015 	stw	r3,0(r4)
   12b74:	f800283a 	ret
   12b78:	1806d0ba 	srli	r3,r3,2
   12b7c:	00800084 	movi	r2,2
   12b80:	20c00015 	stw	r3,0(r4)
   12b84:	f800283a 	ret
   12b88:	18bfffcc 	andi	r2,r3,65535
   12b8c:	1000031e 	bne	r2,zero,12b9c <__lo0bits+0x50>
   12b90:	1806d43a 	srli	r3,r3,16
   12b94:	00800404 	movi	r2,16
   12b98:	00000106 	br	12ba0 <__lo0bits+0x54>
   12b9c:	0005883a 	mov	r2,zero
   12ba0:	19403fcc 	andi	r5,r3,255
   12ba4:	2800021e 	bne	r5,zero,12bb0 <__lo0bits+0x64>
   12ba8:	1806d23a 	srli	r3,r3,8
   12bac:	10800204 	addi	r2,r2,8
   12bb0:	194003cc 	andi	r5,r3,15
   12bb4:	2800021e 	bne	r5,zero,12bc0 <__lo0bits+0x74>
   12bb8:	1806d13a 	srli	r3,r3,4
   12bbc:	10800104 	addi	r2,r2,4
   12bc0:	194000cc 	andi	r5,r3,3
   12bc4:	2800021e 	bne	r5,zero,12bd0 <__lo0bits+0x84>
   12bc8:	1806d0ba 	srli	r3,r3,2
   12bcc:	10800084 	addi	r2,r2,2
   12bd0:	1940004c 	andi	r5,r3,1
   12bd4:	2800031e 	bne	r5,zero,12be4 <__lo0bits+0x98>
   12bd8:	1806d07a 	srli	r3,r3,1
   12bdc:	18000526 	beq	r3,zero,12bf4 <__lo0bits+0xa8>
   12be0:	10800044 	addi	r2,r2,1
   12be4:	20c00015 	stw	r3,0(r4)
   12be8:	f800283a 	ret
   12bec:	0005883a 	mov	r2,zero
   12bf0:	f800283a 	ret
   12bf4:	00800804 	movi	r2,32
   12bf8:	f800283a 	ret

00012bfc <__i2b>:
   12bfc:	defffd04 	addi	sp,sp,-12
   12c00:	dc000015 	stw	r16,0(sp)
   12c04:	04000044 	movi	r16,1
   12c08:	dc400115 	stw	r17,4(sp)
   12c0c:	2823883a 	mov	r17,r5
   12c10:	800b883a 	mov	r5,r16
   12c14:	dfc00215 	stw	ra,8(sp)
   12c18:	00127580 	call	12758 <_Balloc>
   12c1c:	14400515 	stw	r17,20(r2)
   12c20:	14000415 	stw	r16,16(r2)
   12c24:	dfc00217 	ldw	ra,8(sp)
   12c28:	dc400117 	ldw	r17,4(sp)
   12c2c:	dc000017 	ldw	r16,0(sp)
   12c30:	dec00304 	addi	sp,sp,12
   12c34:	f800283a 	ret

00012c38 <__multiply>:
   12c38:	28c00417 	ldw	r3,16(r5)
   12c3c:	30800417 	ldw	r2,16(r6)
   12c40:	deffef04 	addi	sp,sp,-68
   12c44:	dc800915 	stw	r18,36(sp)
   12c48:	dc000715 	stw	r16,28(sp)
   12c4c:	dfc01015 	stw	ra,64(sp)
   12c50:	df000f15 	stw	fp,60(sp)
   12c54:	ddc00e15 	stw	r23,56(sp)
   12c58:	dd800d15 	stw	r22,52(sp)
   12c5c:	dd400c15 	stw	r21,48(sp)
   12c60:	dd000b15 	stw	r20,44(sp)
   12c64:	dcc00a15 	stw	r19,40(sp)
   12c68:	dc400815 	stw	r17,32(sp)
   12c6c:	2825883a 	mov	r18,r5
   12c70:	3021883a 	mov	r16,r6
   12c74:	1880020e 	bge	r3,r2,12c80 <__multiply+0x48>
   12c78:	3025883a 	mov	r18,r6
   12c7c:	2821883a 	mov	r16,r5
   12c80:	94c00417 	ldw	r19,16(r18)
   12c84:	85000417 	ldw	r20,16(r16)
   12c88:	90800217 	ldw	r2,8(r18)
   12c8c:	91400117 	ldw	r5,4(r18)
   12c90:	9d2f883a 	add	r23,r19,r20
   12c94:	15c0010e 	bge	r2,r23,12c9c <__multiply+0x64>
   12c98:	29400044 	addi	r5,r5,1
   12c9c:	00127580 	call	12758 <_Balloc>
   12ca0:	bdeb883a 	add	r21,r23,r23
   12ca4:	15800504 	addi	r22,r2,20
   12ca8:	ad6b883a 	add	r21,r21,r21
   12cac:	100f883a 	mov	r7,r2
   12cb0:	b56b883a 	add	r21,r22,r21
   12cb4:	b005883a 	mov	r2,r22
   12cb8:	1540032e 	bgeu	r2,r21,12cc8 <__multiply+0x90>
   12cbc:	10000015 	stw	zero,0(r2)
   12cc0:	10800104 	addi	r2,r2,4
   12cc4:	003ffc06 	br	12cb8 <_gp+0xffff1268>
   12cc8:	9ce7883a 	add	r19,r19,r19
   12ccc:	a529883a 	add	r20,r20,r20
   12cd0:	94800504 	addi	r18,r18,20
   12cd4:	9ce7883a 	add	r19,r19,r19
   12cd8:	84000504 	addi	r16,r16,20
   12cdc:	a529883a 	add	r20,r20,r20
   12ce0:	94e7883a 	add	r19,r18,r19
   12ce4:	8529883a 	add	r20,r16,r20
   12ce8:	dcc00015 	stw	r19,0(sp)
   12cec:	dd000115 	stw	r20,4(sp)
   12cf0:	d8800117 	ldw	r2,4(sp)
   12cf4:	80805f2e 	bgeu	r16,r2,12e74 <__multiply+0x23c>
   12cf8:	8240000b 	ldhu	r9,0(r16)
   12cfc:	48002726 	beq	r9,zero,12d9c <__multiply+0x164>
   12d00:	b00d883a 	mov	r6,r22
   12d04:	9027883a 	mov	r19,r18
   12d08:	0029883a 	mov	r20,zero
   12d0c:	9ac00017 	ldw	r11,0(r19)
   12d10:	480b883a 	mov	r5,r9
   12d14:	37000017 	ldw	fp,0(r6)
   12d18:	593fffcc 	andi	r4,r11,65535
   12d1c:	d9800215 	stw	r6,8(sp)
   12d20:	d9c00615 	stw	r7,24(sp)
   12d24:	d9800515 	stw	r6,20(sp)
   12d28:	da400315 	stw	r9,12(sp)
   12d2c:	dac00415 	stw	r11,16(sp)
   12d30:	00114000 	call	11400 <__mulsi3>
   12d34:	dac00417 	ldw	r11,16(sp)
   12d38:	da400317 	ldw	r9,12(sp)
   12d3c:	e47fffcc 	andi	r17,fp,65535
   12d40:	5808d43a 	srli	r4,r11,16
   12d44:	1445883a 	add	r2,r2,r17
   12d48:	480b883a 	mov	r5,r9
   12d4c:	1523883a 	add	r17,r2,r20
   12d50:	e038d43a 	srli	fp,fp,16
   12d54:	00114000 	call	11400 <__mulsi3>
   12d58:	8806d43a 	srli	r3,r17,16
   12d5c:	1705883a 	add	r2,r2,fp
   12d60:	d9800217 	ldw	r6,8(sp)
   12d64:	10c5883a 	add	r2,r2,r3
   12d68:	1028d43a 	srli	r20,r2,16
   12d6c:	1004943a 	slli	r2,r2,16
   12d70:	8c7fffcc 	andi	r17,r17,65535
   12d74:	9cc00104 	addi	r19,r19,4
   12d78:	1462b03a 	or	r17,r2,r17
   12d7c:	d8800017 	ldw	r2,0(sp)
   12d80:	34400015 	stw	r17,0(r6)
   12d84:	d9c00617 	ldw	r7,24(sp)
   12d88:	31800104 	addi	r6,r6,4
   12d8c:	da000517 	ldw	r8,20(sp)
   12d90:	da400317 	ldw	r9,12(sp)
   12d94:	98bfdd36 	bltu	r19,r2,12d0c <_gp+0xffff12bc>
   12d98:	45000115 	stw	r20,4(r8)
   12d9c:	82000017 	ldw	r8,0(r16)
   12da0:	4010d43a 	srli	r8,r8,16
   12da4:	40002c26 	beq	r8,zero,12e58 <__multiply+0x220>
   12da8:	b4400017 	ldw	r17,0(r22)
   12dac:	9027883a 	mov	r19,r18
   12db0:	b015883a 	mov	r10,r22
   12db4:	b029883a 	mov	r20,r22
   12db8:	0039883a 	mov	fp,zero
   12dbc:	9900000b 	ldhu	r4,0(r19)
   12dc0:	400b883a 	mov	r5,r8
   12dc4:	d9c00615 	stw	r7,24(sp)
   12dc8:	da000515 	stw	r8,20(sp)
   12dcc:	da800215 	stw	r10,8(sp)
   12dd0:	00114000 	call	11400 <__mulsi3>
   12dd4:	a0c00017 	ldw	r3,0(r20)
   12dd8:	da800217 	ldw	r10,8(sp)
   12ddc:	8c7fffcc 	andi	r17,r17,65535
   12de0:	1806d43a 	srli	r3,r3,16
   12de4:	da000517 	ldw	r8,20(sp)
   12de8:	a2c00104 	addi	r11,r20,4
   12dec:	10c5883a 	add	r2,r2,r3
   12df0:	1739883a 	add	fp,r2,fp
   12df4:	e004943a 	slli	r2,fp,16
   12df8:	400b883a 	mov	r5,r8
   12dfc:	e038d43a 	srli	fp,fp,16
   12e00:	1444b03a 	or	r2,r2,r17
   12e04:	50800015 	stw	r2,0(r10)
   12e08:	99000017 	ldw	r4,0(r19)
   12e0c:	da800215 	stw	r10,8(sp)
   12e10:	dac00415 	stw	r11,16(sp)
   12e14:	2008d43a 	srli	r4,r4,16
   12e18:	9cc00104 	addi	r19,r19,4
   12e1c:	00114000 	call	11400 <__mulsi3>
   12e20:	dac00417 	ldw	r11,16(sp)
   12e24:	da800217 	ldw	r10,8(sp)
   12e28:	d9c00617 	ldw	r7,24(sp)
   12e2c:	58c0000b 	ldhu	r3,0(r11)
   12e30:	52800104 	addi	r10,r10,4
   12e34:	da000517 	ldw	r8,20(sp)
   12e38:	10c5883a 	add	r2,r2,r3
   12e3c:	1723883a 	add	r17,r2,fp
   12e40:	d8800017 	ldw	r2,0(sp)
   12e44:	8838d43a 	srli	fp,r17,16
   12e48:	9880022e 	bgeu	r19,r2,12e54 <__multiply+0x21c>
   12e4c:	5829883a 	mov	r20,r11
   12e50:	003fda06 	br	12dbc <_gp+0xffff136c>
   12e54:	a4400115 	stw	r17,4(r20)
   12e58:	84000104 	addi	r16,r16,4
   12e5c:	b5800104 	addi	r22,r22,4
   12e60:	003fa306 	br	12cf0 <_gp+0xffff12a0>
   12e64:	ad7fff04 	addi	r21,r21,-4
   12e68:	a8800017 	ldw	r2,0(r21)
   12e6c:	1000021e 	bne	r2,zero,12e78 <__multiply+0x240>
   12e70:	bdffffc4 	addi	r23,r23,-1
   12e74:	05fffb16 	blt	zero,r23,12e64 <_gp+0xffff1414>
   12e78:	3805883a 	mov	r2,r7
   12e7c:	3dc00415 	stw	r23,16(r7)
   12e80:	dfc01017 	ldw	ra,64(sp)
   12e84:	df000f17 	ldw	fp,60(sp)
   12e88:	ddc00e17 	ldw	r23,56(sp)
   12e8c:	dd800d17 	ldw	r22,52(sp)
   12e90:	dd400c17 	ldw	r21,48(sp)
   12e94:	dd000b17 	ldw	r20,44(sp)
   12e98:	dcc00a17 	ldw	r19,40(sp)
   12e9c:	dc800917 	ldw	r18,36(sp)
   12ea0:	dc400817 	ldw	r17,32(sp)
   12ea4:	dc000717 	ldw	r16,28(sp)
   12ea8:	dec01104 	addi	sp,sp,68
   12eac:	f800283a 	ret

00012eb0 <__pow5mult>:
   12eb0:	defffa04 	addi	sp,sp,-24
   12eb4:	dc800215 	stw	r18,8(sp)
   12eb8:	dc400115 	stw	r17,4(sp)
   12ebc:	dfc00515 	stw	ra,20(sp)
   12ec0:	dd000415 	stw	r20,16(sp)
   12ec4:	dcc00315 	stw	r19,12(sp)
   12ec8:	dc000015 	stw	r16,0(sp)
   12ecc:	308000cc 	andi	r2,r6,3
   12ed0:	2025883a 	mov	r18,r4
   12ed4:	3023883a 	mov	r17,r6
   12ed8:	10000b26 	beq	r2,zero,12f08 <__pow5mult+0x58>
   12edc:	10bfffc4 	addi	r2,r2,-1
   12ee0:	1085883a 	add	r2,r2,r2
   12ee4:	00c000b4 	movhi	r3,2
   12ee8:	18e58e04 	addi	r3,r3,-27080
   12eec:	1085883a 	add	r2,r2,r2
   12ef0:	1885883a 	add	r2,r3,r2
   12ef4:	11800017 	ldw	r6,0(r2)
   12ef8:	000f883a 	mov	r7,zero
   12efc:	00128b40 	call	128b4 <__multadd>
   12f00:	1029883a 	mov	r20,r2
   12f04:	00000106 	br	12f0c <__pow5mult+0x5c>
   12f08:	2829883a 	mov	r20,r5
   12f0c:	8823d0ba 	srai	r17,r17,2
   12f10:	88002b26 	beq	r17,zero,12fc0 <__pow5mult+0x110>
   12f14:	90800417 	ldw	r2,16(r18)
   12f18:	1000071e 	bne	r2,zero,12f38 <__pow5mult+0x88>
   12f1c:	01000404 	movi	r4,16
   12f20:	0014fb00 	call	14fb0 <malloc>
   12f24:	90800415 	stw	r2,16(r18)
   12f28:	10000115 	stw	zero,4(r2)
   12f2c:	10000215 	stw	zero,8(r2)
   12f30:	10000015 	stw	zero,0(r2)
   12f34:	10000315 	stw	zero,12(r2)
   12f38:	94c00417 	ldw	r19,16(r18)
   12f3c:	9c000217 	ldw	r16,8(r19)
   12f40:	80000c1e 	bne	r16,zero,12f74 <__pow5mult+0xc4>
   12f44:	01409c44 	movi	r5,625
   12f48:	9009883a 	mov	r4,r18
   12f4c:	0012bfc0 	call	12bfc <__i2b>
   12f50:	98800215 	stw	r2,8(r19)
   12f54:	1021883a 	mov	r16,r2
   12f58:	10000015 	stw	zero,0(r2)
   12f5c:	00000506 	br	12f74 <__pow5mult+0xc4>
   12f60:	8823d07a 	srai	r17,r17,1
   12f64:	88001626 	beq	r17,zero,12fc0 <__pow5mult+0x110>
   12f68:	80800017 	ldw	r2,0(r16)
   12f6c:	10000d26 	beq	r2,zero,12fa4 <__pow5mult+0xf4>
   12f70:	1021883a 	mov	r16,r2
   12f74:	8880004c 	andi	r2,r17,1
   12f78:	103ff926 	beq	r2,zero,12f60 <_gp+0xffff1510>
   12f7c:	a00b883a 	mov	r5,r20
   12f80:	800d883a 	mov	r6,r16
   12f84:	9009883a 	mov	r4,r18
   12f88:	0012c380 	call	12c38 <__multiply>
   12f8c:	1027883a 	mov	r19,r2
   12f90:	a00b883a 	mov	r5,r20
   12f94:	9009883a 	mov	r4,r18
   12f98:	001283c0 	call	1283c <_Bfree>
   12f9c:	9829883a 	mov	r20,r19
   12fa0:	003fef06 	br	12f60 <_gp+0xffff1510>
   12fa4:	800d883a 	mov	r6,r16
   12fa8:	800b883a 	mov	r5,r16
   12fac:	9009883a 	mov	r4,r18
   12fb0:	0012c380 	call	12c38 <__multiply>
   12fb4:	80800015 	stw	r2,0(r16)
   12fb8:	10000015 	stw	zero,0(r2)
   12fbc:	003fec06 	br	12f70 <_gp+0xffff1520>
   12fc0:	a005883a 	mov	r2,r20
   12fc4:	dfc00517 	ldw	ra,20(sp)
   12fc8:	dd000417 	ldw	r20,16(sp)
   12fcc:	dcc00317 	ldw	r19,12(sp)
   12fd0:	dc800217 	ldw	r18,8(sp)
   12fd4:	dc400117 	ldw	r17,4(sp)
   12fd8:	dc000017 	ldw	r16,0(sp)
   12fdc:	dec00604 	addi	sp,sp,24
   12fe0:	f800283a 	ret

00012fe4 <__lshift>:
   12fe4:	defff804 	addi	sp,sp,-32
   12fe8:	dc400215 	stw	r17,8(sp)
   12fec:	2823883a 	mov	r17,r5
   12ff0:	dd000515 	stw	r20,20(sp)
   12ff4:	dc000115 	stw	r16,4(sp)
   12ff8:	8d000417 	ldw	r20,16(r17)
   12ffc:	3021d17a 	srai	r16,r6,5
   13000:	29400117 	ldw	r5,4(r5)
   13004:	88800217 	ldw	r2,8(r17)
   13008:	8529883a 	add	r20,r16,r20
   1300c:	dd400615 	stw	r21,24(sp)
   13010:	dcc00415 	stw	r19,16(sp)
   13014:	dc800315 	stw	r18,12(sp)
   13018:	dfc00715 	stw	ra,28(sp)
   1301c:	2025883a 	mov	r18,r4
   13020:	302b883a 	mov	r21,r6
   13024:	a4c00044 	addi	r19,r20,1
   13028:	14c0030e 	bge	r2,r19,13038 <__lshift+0x54>
   1302c:	29400044 	addi	r5,r5,1
   13030:	1085883a 	add	r2,r2,r2
   13034:	003ffc06 	br	13028 <_gp+0xffff15d8>
   13038:	9009883a 	mov	r4,r18
   1303c:	00127580 	call	12758 <_Balloc>
   13040:	10c00504 	addi	r3,r2,20
   13044:	180d883a 	mov	r6,r3
   13048:	000b883a 	mov	r5,zero
   1304c:	2c00040e 	bge	r5,r16,13060 <__lshift+0x7c>
   13050:	30000015 	stw	zero,0(r6)
   13054:	29400044 	addi	r5,r5,1
   13058:	31800104 	addi	r6,r6,4
   1305c:	003ffb06 	br	1304c <_gp+0xffff15fc>
   13060:	8009883a 	mov	r4,r16
   13064:	8000010e 	bge	r16,zero,1306c <__lshift+0x88>
   13068:	0009883a 	mov	r4,zero
   1306c:	89400417 	ldw	r5,16(r17)
   13070:	2109883a 	add	r4,r4,r4
   13074:	2109883a 	add	r4,r4,r4
   13078:	294b883a 	add	r5,r5,r5
   1307c:	1907883a 	add	r3,r3,r4
   13080:	294b883a 	add	r5,r5,r5
   13084:	89000504 	addi	r4,r17,20
   13088:	a98007cc 	andi	r6,r21,31
   1308c:	214b883a 	add	r5,r4,r5
   13090:	30001126 	beq	r6,zero,130d8 <__lshift+0xf4>
   13094:	02000804 	movi	r8,32
   13098:	4191c83a 	sub	r8,r8,r6
   1309c:	000f883a 	mov	r7,zero
   130a0:	22400017 	ldw	r9,0(r4)
   130a4:	21000104 	addi	r4,r4,4
   130a8:	1815883a 	mov	r10,r3
   130ac:	4992983a 	sll	r9,r9,r6
   130b0:	18c00104 	addi	r3,r3,4
   130b4:	49ceb03a 	or	r7,r9,r7
   130b8:	19ffff15 	stw	r7,-4(r3)
   130bc:	21ffff17 	ldw	r7,-4(r4)
   130c0:	3a0ed83a 	srl	r7,r7,r8
   130c4:	217ff636 	bltu	r4,r5,130a0 <_gp+0xffff1650>
   130c8:	51c00115 	stw	r7,4(r10)
   130cc:	38000726 	beq	r7,zero,130ec <__lshift+0x108>
   130d0:	a4c00084 	addi	r19,r20,2
   130d4:	00000506 	br	130ec <__lshift+0x108>
   130d8:	21800017 	ldw	r6,0(r4)
   130dc:	21000104 	addi	r4,r4,4
   130e0:	18c00104 	addi	r3,r3,4
   130e4:	19bfff15 	stw	r6,-4(r3)
   130e8:	217ffb36 	bltu	r4,r5,130d8 <_gp+0xffff1688>
   130ec:	9cffffc4 	addi	r19,r19,-1
   130f0:	14c00415 	stw	r19,16(r2)
   130f4:	880b883a 	mov	r5,r17
   130f8:	9009883a 	mov	r4,r18
   130fc:	d8800015 	stw	r2,0(sp)
   13100:	001283c0 	call	1283c <_Bfree>
   13104:	d8800017 	ldw	r2,0(sp)
   13108:	dfc00717 	ldw	ra,28(sp)
   1310c:	dd400617 	ldw	r21,24(sp)
   13110:	dd000517 	ldw	r20,20(sp)
   13114:	dcc00417 	ldw	r19,16(sp)
   13118:	dc800317 	ldw	r18,12(sp)
   1311c:	dc400217 	ldw	r17,8(sp)
   13120:	dc000117 	ldw	r16,4(sp)
   13124:	dec00804 	addi	sp,sp,32
   13128:	f800283a 	ret

0001312c <__mcmp>:
   1312c:	20800417 	ldw	r2,16(r4)
   13130:	28c00417 	ldw	r3,16(r5)
   13134:	10c5c83a 	sub	r2,r2,r3
   13138:	1000121e 	bne	r2,zero,13184 <__mcmp+0x58>
   1313c:	18c7883a 	add	r3,r3,r3
   13140:	18c7883a 	add	r3,r3,r3
   13144:	21000504 	addi	r4,r4,20
   13148:	29400504 	addi	r5,r5,20
   1314c:	20c5883a 	add	r2,r4,r3
   13150:	28cb883a 	add	r5,r5,r3
   13154:	10bfff04 	addi	r2,r2,-4
   13158:	297fff04 	addi	r5,r5,-4
   1315c:	11800017 	ldw	r6,0(r2)
   13160:	28c00017 	ldw	r3,0(r5)
   13164:	30c00326 	beq	r6,r3,13174 <__mcmp+0x48>
   13168:	30c00536 	bltu	r6,r3,13180 <__mcmp+0x54>
   1316c:	00800044 	movi	r2,1
   13170:	f800283a 	ret
   13174:	20bff736 	bltu	r4,r2,13154 <_gp+0xffff1704>
   13178:	0005883a 	mov	r2,zero
   1317c:	f800283a 	ret
   13180:	00bfffc4 	movi	r2,-1
   13184:	f800283a 	ret

00013188 <__mdiff>:
   13188:	defffb04 	addi	sp,sp,-20
   1318c:	dc000015 	stw	r16,0(sp)
   13190:	2821883a 	mov	r16,r5
   13194:	dcc00315 	stw	r19,12(sp)
   13198:	300b883a 	mov	r5,r6
   1319c:	2027883a 	mov	r19,r4
   131a0:	8009883a 	mov	r4,r16
   131a4:	dc400115 	stw	r17,4(sp)
   131a8:	dfc00415 	stw	ra,16(sp)
   131ac:	dc800215 	stw	r18,8(sp)
   131b0:	3023883a 	mov	r17,r6
   131b4:	001312c0 	call	1312c <__mcmp>
   131b8:	1000071e 	bne	r2,zero,131d8 <__mdiff+0x50>
   131bc:	000b883a 	mov	r5,zero
   131c0:	9809883a 	mov	r4,r19
   131c4:	00127580 	call	12758 <_Balloc>
   131c8:	00c00044 	movi	r3,1
   131cc:	10c00415 	stw	r3,16(r2)
   131d0:	10000515 	stw	zero,20(r2)
   131d4:	00004206 	br	132e0 <__mdiff+0x158>
   131d8:	1000050e 	bge	r2,zero,131f0 <__mdiff+0x68>
   131dc:	8005883a 	mov	r2,r16
   131e0:	04800044 	movi	r18,1
   131e4:	8821883a 	mov	r16,r17
   131e8:	1023883a 	mov	r17,r2
   131ec:	00000106 	br	131f4 <__mdiff+0x6c>
   131f0:	0025883a 	mov	r18,zero
   131f4:	81400117 	ldw	r5,4(r16)
   131f8:	9809883a 	mov	r4,r19
   131fc:	00127580 	call	12758 <_Balloc>
   13200:	82000417 	ldw	r8,16(r16)
   13204:	88c00417 	ldw	r3,16(r17)
   13208:	81400504 	addi	r5,r16,20
   1320c:	420f883a 	add	r7,r8,r8
   13210:	18c7883a 	add	r3,r3,r3
   13214:	39cf883a 	add	r7,r7,r7
   13218:	8a800504 	addi	r10,r17,20
   1321c:	18c7883a 	add	r3,r3,r3
   13220:	14800315 	stw	r18,12(r2)
   13224:	29cf883a 	add	r7,r5,r7
   13228:	50c9883a 	add	r4,r10,r3
   1322c:	13000504 	addi	r12,r2,20
   13230:	0017883a 	mov	r11,zero
   13234:	29800017 	ldw	r6,0(r5)
   13238:	52400017 	ldw	r9,0(r10)
   1323c:	52800104 	addi	r10,r10,4
   13240:	30ffffcc 	andi	r3,r6,65535
   13244:	1ac7883a 	add	r3,r3,r11
   13248:	300cd43a 	srli	r6,r6,16
   1324c:	4affffcc 	andi	r11,r9,65535
   13250:	4812d43a 	srli	r9,r9,16
   13254:	1ac7c83a 	sub	r3,r3,r11
   13258:	29400104 	addi	r5,r5,4
   1325c:	3253c83a 	sub	r9,r6,r9
   13260:	180dd43a 	srai	r6,r3,16
   13264:	18ffffcc 	andi	r3,r3,65535
   13268:	498d883a 	add	r6,r9,r6
   1326c:	3017d43a 	srai	r11,r6,16
   13270:	300c943a 	slli	r6,r6,16
   13274:	62400104 	addi	r9,r12,4
   13278:	30c6b03a 	or	r3,r6,r3
   1327c:	60c00015 	stw	r3,0(r12)
   13280:	4819883a 	mov	r12,r9
   13284:	513feb36 	bltu	r10,r4,13234 <_gp+0xffff17e4>
   13288:	4807883a 	mov	r3,r9
   1328c:	29c00e2e 	bgeu	r5,r7,132c8 <__mdiff+0x140>
   13290:	29800017 	ldw	r6,0(r5)
   13294:	4a400104 	addi	r9,r9,4
   13298:	29400104 	addi	r5,r5,4
   1329c:	313fffcc 	andi	r4,r6,65535
   132a0:	22c9883a 	add	r4,r4,r11
   132a4:	2007d43a 	srai	r3,r4,16
   132a8:	300cd43a 	srli	r6,r6,16
   132ac:	213fffcc 	andi	r4,r4,65535
   132b0:	30cd883a 	add	r6,r6,r3
   132b4:	3017d43a 	srai	r11,r6,16
   132b8:	300c943a 	slli	r6,r6,16
   132bc:	3108b03a 	or	r4,r6,r4
   132c0:	493fff15 	stw	r4,-4(r9)
   132c4:	003ff006 	br	13288 <_gp+0xffff1838>
   132c8:	18ffff04 	addi	r3,r3,-4
   132cc:	19000017 	ldw	r4,0(r3)
   132d0:	2000021e 	bne	r4,zero,132dc <__mdiff+0x154>
   132d4:	423fffc4 	addi	r8,r8,-1
   132d8:	003ffb06 	br	132c8 <_gp+0xffff1878>
   132dc:	12000415 	stw	r8,16(r2)
   132e0:	dfc00417 	ldw	ra,16(sp)
   132e4:	dcc00317 	ldw	r19,12(sp)
   132e8:	dc800217 	ldw	r18,8(sp)
   132ec:	dc400117 	ldw	r17,4(sp)
   132f0:	dc000017 	ldw	r16,0(sp)
   132f4:	dec00504 	addi	sp,sp,20
   132f8:	f800283a 	ret

000132fc <__ulp>:
   132fc:	295ffc2c 	andhi	r5,r5,32752
   13300:	00bf3034 	movhi	r2,64704
   13304:	2887883a 	add	r3,r5,r2
   13308:	00c00616 	blt	zero,r3,13324 <__ulp+0x28>
   1330c:	00c7c83a 	sub	r3,zero,r3
   13310:	1805d53a 	srai	r2,r3,20
   13314:	00c004c4 	movi	r3,19
   13318:	18800416 	blt	r3,r2,1332c <__ulp+0x30>
   1331c:	00c00234 	movhi	r3,8
   13320:	1887d83a 	sra	r3,r3,r2
   13324:	0005883a 	mov	r2,zero
   13328:	f800283a 	ret
   1332c:	117ffb04 	addi	r5,r2,-20
   13330:	01000784 	movi	r4,30
   13334:	0007883a 	mov	r3,zero
   13338:	00800044 	movi	r2,1
   1333c:	21400316 	blt	r4,r5,1334c <__ulp+0x50>
   13340:	010007c4 	movi	r4,31
   13344:	214bc83a 	sub	r5,r4,r5
   13348:	1144983a 	sll	r2,r2,r5
   1334c:	f800283a 	ret

00013350 <__b2d>:
   13350:	defffa04 	addi	sp,sp,-24
   13354:	dc000015 	stw	r16,0(sp)
   13358:	24000417 	ldw	r16,16(r4)
   1335c:	dcc00315 	stw	r19,12(sp)
   13360:	24c00504 	addi	r19,r4,20
   13364:	8421883a 	add	r16,r16,r16
   13368:	8421883a 	add	r16,r16,r16
   1336c:	9c21883a 	add	r16,r19,r16
   13370:	dc400115 	stw	r17,4(sp)
   13374:	847fff17 	ldw	r17,-4(r16)
   13378:	dd000415 	stw	r20,16(sp)
   1337c:	dc800215 	stw	r18,8(sp)
   13380:	8809883a 	mov	r4,r17
   13384:	2829883a 	mov	r20,r5
   13388:	dfc00515 	stw	ra,20(sp)
   1338c:	0012ae40 	call	12ae4 <__hi0bits>
   13390:	01000804 	movi	r4,32
   13394:	2087c83a 	sub	r3,r4,r2
   13398:	a0c00015 	stw	r3,0(r20)
   1339c:	00c00284 	movi	r3,10
   133a0:	84bfff04 	addi	r18,r16,-4
   133a4:	18800d16 	blt	r3,r2,133dc <__b2d+0x8c>
   133a8:	018002c4 	movi	r6,11
   133ac:	308bc83a 	sub	r5,r6,r2
   133b0:	8946d83a 	srl	r3,r17,r5
   133b4:	18cffc34 	orhi	r3,r3,16368
   133b8:	9c80022e 	bgeu	r19,r18,133c4 <__b2d+0x74>
   133bc:	81bffe17 	ldw	r6,-8(r16)
   133c0:	00000106 	br	133c8 <__b2d+0x78>
   133c4:	000d883a 	mov	r6,zero
   133c8:	10800544 	addi	r2,r2,21
   133cc:	8884983a 	sll	r2,r17,r2
   133d0:	314cd83a 	srl	r6,r6,r5
   133d4:	1184b03a 	or	r2,r2,r6
   133d8:	00001606 	br	13434 <__b2d+0xe4>
   133dc:	9c80032e 	bgeu	r19,r18,133ec <__b2d+0x9c>
   133e0:	84bffe04 	addi	r18,r16,-8
   133e4:	817ffe17 	ldw	r5,-8(r16)
   133e8:	00000106 	br	133f0 <__b2d+0xa0>
   133ec:	000b883a 	mov	r5,zero
   133f0:	10bffd44 	addi	r2,r2,-11
   133f4:	10000d26 	beq	r2,zero,1342c <__b2d+0xdc>
   133f8:	2089c83a 	sub	r4,r4,r2
   133fc:	88a2983a 	sll	r17,r17,r2
   13400:	2906d83a 	srl	r3,r5,r4
   13404:	8c4ffc34 	orhi	r17,r17,16368
   13408:	88c6b03a 	or	r3,r17,r3
   1340c:	9c80022e 	bgeu	r19,r18,13418 <__b2d+0xc8>
   13410:	91bfff17 	ldw	r6,-4(r18)
   13414:	00000106 	br	1341c <__b2d+0xcc>
   13418:	000d883a 	mov	r6,zero
   1341c:	288a983a 	sll	r5,r5,r2
   13420:	3104d83a 	srl	r2,r6,r4
   13424:	2884b03a 	or	r2,r5,r2
   13428:	00000206 	br	13434 <__b2d+0xe4>
   1342c:	88cffc34 	orhi	r3,r17,16368
   13430:	2805883a 	mov	r2,r5
   13434:	dfc00517 	ldw	ra,20(sp)
   13438:	dd000417 	ldw	r20,16(sp)
   1343c:	dcc00317 	ldw	r19,12(sp)
   13440:	dc800217 	ldw	r18,8(sp)
   13444:	dc400117 	ldw	r17,4(sp)
   13448:	dc000017 	ldw	r16,0(sp)
   1344c:	dec00604 	addi	sp,sp,24
   13450:	f800283a 	ret

00013454 <__d2b>:
   13454:	defff804 	addi	sp,sp,-32
   13458:	dc000215 	stw	r16,8(sp)
   1345c:	2821883a 	mov	r16,r5
   13460:	01400044 	movi	r5,1
   13464:	dd000615 	stw	r20,24(sp)
   13468:	dcc00515 	stw	r19,20(sp)
   1346c:	dc800415 	stw	r18,16(sp)
   13470:	dc400315 	stw	r17,12(sp)
   13474:	dfc00715 	stw	ra,28(sp)
   13478:	3023883a 	mov	r17,r6
   1347c:	3827883a 	mov	r19,r7
   13480:	dc800817 	ldw	r18,32(sp)
   13484:	00127580 	call	12758 <_Balloc>
   13488:	1029883a 	mov	r20,r2
   1348c:	00800434 	movhi	r2,16
   13490:	10bfffc4 	addi	r2,r2,-1
   13494:	8884703a 	and	r2,r17,r2
   13498:	8822907a 	slli	r17,r17,1
   1349c:	8822d57a 	srli	r17,r17,21
   134a0:	88000126 	beq	r17,zero,134a8 <__d2b+0x54>
   134a4:	10800434 	orhi	r2,r2,16
   134a8:	d8800015 	stw	r2,0(sp)
   134ac:	80001526 	beq	r16,zero,13504 <__d2b+0xb0>
   134b0:	d9000104 	addi	r4,sp,4
   134b4:	dc000115 	stw	r16,4(sp)
   134b8:	0012b4c0 	call	12b4c <__lo0bits>
   134bc:	d9000117 	ldw	r4,4(sp)
   134c0:	10000926 	beq	r2,zero,134e8 <__d2b+0x94>
   134c4:	d9400017 	ldw	r5,0(sp)
   134c8:	00c00804 	movi	r3,32
   134cc:	1887c83a 	sub	r3,r3,r2
   134d0:	28c6983a 	sll	r3,r5,r3
   134d4:	288ad83a 	srl	r5,r5,r2
   134d8:	1906b03a 	or	r3,r3,r4
   134dc:	a0c00515 	stw	r3,20(r20)
   134e0:	d9400015 	stw	r5,0(sp)
   134e4:	00000106 	br	134ec <__d2b+0x98>
   134e8:	a1000515 	stw	r4,20(r20)
   134ec:	dc000017 	ldw	r16,0(sp)
   134f0:	a4000615 	stw	r16,24(r20)
   134f4:	8020c03a 	cmpne	r16,r16,zero
   134f8:	84000044 	addi	r16,r16,1
   134fc:	a4000415 	stw	r16,16(r20)
   13500:	00000706 	br	13520 <__d2b+0xcc>
   13504:	d809883a 	mov	r4,sp
   13508:	0012b4c0 	call	12b4c <__lo0bits>
   1350c:	d8c00017 	ldw	r3,0(sp)
   13510:	04000044 	movi	r16,1
   13514:	a4000415 	stw	r16,16(r20)
   13518:	a0c00515 	stw	r3,20(r20)
   1351c:	10800804 	addi	r2,r2,32
   13520:	88000626 	beq	r17,zero,1353c <__d2b+0xe8>
   13524:	8c7ef344 	addi	r17,r17,-1075
   13528:	88a3883a 	add	r17,r17,r2
   1352c:	00c00d44 	movi	r3,53
   13530:	9c400015 	stw	r17,0(r19)
   13534:	1885c83a 	sub	r2,r3,r2
   13538:	00000c06 	br	1356c <__d2b+0x118>
   1353c:	10bef384 	addi	r2,r2,-1074
   13540:	98800015 	stw	r2,0(r19)
   13544:	00900034 	movhi	r2,16384
   13548:	10bfffc4 	addi	r2,r2,-1
   1354c:	8085883a 	add	r2,r16,r2
   13550:	1085883a 	add	r2,r2,r2
   13554:	1085883a 	add	r2,r2,r2
   13558:	a085883a 	add	r2,r20,r2
   1355c:	11000517 	ldw	r4,20(r2)
   13560:	8020917a 	slli	r16,r16,5
   13564:	0012ae40 	call	12ae4 <__hi0bits>
   13568:	8085c83a 	sub	r2,r16,r2
   1356c:	90800015 	stw	r2,0(r18)
   13570:	a005883a 	mov	r2,r20
   13574:	dfc00717 	ldw	ra,28(sp)
   13578:	dd000617 	ldw	r20,24(sp)
   1357c:	dcc00517 	ldw	r19,20(sp)
   13580:	dc800417 	ldw	r18,16(sp)
   13584:	dc400317 	ldw	r17,12(sp)
   13588:	dc000217 	ldw	r16,8(sp)
   1358c:	dec00804 	addi	sp,sp,32
   13590:	f800283a 	ret

00013594 <__ratio>:
   13594:	defff904 	addi	sp,sp,-28
   13598:	dc400315 	stw	r17,12(sp)
   1359c:	2823883a 	mov	r17,r5
   135a0:	d9400104 	addi	r5,sp,4
   135a4:	dfc00615 	stw	ra,24(sp)
   135a8:	dcc00515 	stw	r19,20(sp)
   135ac:	dc800415 	stw	r18,16(sp)
   135b0:	2027883a 	mov	r19,r4
   135b4:	dc000215 	stw	r16,8(sp)
   135b8:	00133500 	call	13350 <__b2d>
   135bc:	d80b883a 	mov	r5,sp
   135c0:	8809883a 	mov	r4,r17
   135c4:	1025883a 	mov	r18,r2
   135c8:	1821883a 	mov	r16,r3
   135cc:	00133500 	call	13350 <__b2d>
   135d0:	8a000417 	ldw	r8,16(r17)
   135d4:	99000417 	ldw	r4,16(r19)
   135d8:	d9400117 	ldw	r5,4(sp)
   135dc:	2209c83a 	sub	r4,r4,r8
   135e0:	2010917a 	slli	r8,r4,5
   135e4:	d9000017 	ldw	r4,0(sp)
   135e8:	2909c83a 	sub	r4,r5,r4
   135ec:	4109883a 	add	r4,r8,r4
   135f0:	0100030e 	bge	zero,r4,13600 <__ratio+0x6c>
   135f4:	2008953a 	slli	r4,r4,20
   135f8:	2421883a 	add	r16,r4,r16
   135fc:	00000206 	br	13608 <__ratio+0x74>
   13600:	2008953a 	slli	r4,r4,20
   13604:	1907c83a 	sub	r3,r3,r4
   13608:	100d883a 	mov	r6,r2
   1360c:	180f883a 	mov	r7,r3
   13610:	9009883a 	mov	r4,r18
   13614:	800b883a 	mov	r5,r16
   13618:	0015b800 	call	15b80 <__divdf3>
   1361c:	dfc00617 	ldw	ra,24(sp)
   13620:	dcc00517 	ldw	r19,20(sp)
   13624:	dc800417 	ldw	r18,16(sp)
   13628:	dc400317 	ldw	r17,12(sp)
   1362c:	dc000217 	ldw	r16,8(sp)
   13630:	dec00704 	addi	sp,sp,28
   13634:	f800283a 	ret

00013638 <_mprec_log10>:
   13638:	defffe04 	addi	sp,sp,-8
   1363c:	dc000015 	stw	r16,0(sp)
   13640:	dfc00115 	stw	ra,4(sp)
   13644:	008005c4 	movi	r2,23
   13648:	2021883a 	mov	r16,r4
   1364c:	11000716 	blt	r2,r4,1366c <_mprec_log10+0x34>
   13650:	202090fa 	slli	r16,r4,3
   13654:	008000b4 	movhi	r2,2
   13658:	10a5a504 	addi	r2,r2,-26988
   1365c:	1421883a 	add	r16,r2,r16
   13660:	80800017 	ldw	r2,0(r16)
   13664:	80c00117 	ldw	r3,4(r16)
   13668:	00000906 	br	13690 <_mprec_log10+0x58>
   1366c:	0005883a 	mov	r2,zero
   13670:	00cffc34 	movhi	r3,16368
   13674:	000d883a 	mov	r6,zero
   13678:	01d00934 	movhi	r7,16420
   1367c:	1009883a 	mov	r4,r2
   13680:	180b883a 	mov	r5,r3
   13684:	843fffc4 	addi	r16,r16,-1
   13688:	00167a80 	call	167a8 <__muldf3>
   1368c:	803ff91e 	bne	r16,zero,13674 <_gp+0xffff1c24>
   13690:	dfc00117 	ldw	ra,4(sp)
   13694:	dc000017 	ldw	r16,0(sp)
   13698:	dec00204 	addi	sp,sp,8
   1369c:	f800283a 	ret

000136a0 <__copybits>:
   136a0:	297fffc4 	addi	r5,r5,-1
   136a4:	280bd17a 	srai	r5,r5,5
   136a8:	30800417 	ldw	r2,16(r6)
   136ac:	30c00504 	addi	r3,r6,20
   136b0:	29400044 	addi	r5,r5,1
   136b4:	294b883a 	add	r5,r5,r5
   136b8:	1085883a 	add	r2,r2,r2
   136bc:	294b883a 	add	r5,r5,r5
   136c0:	1085883a 	add	r2,r2,r2
   136c4:	214b883a 	add	r5,r4,r5
   136c8:	1885883a 	add	r2,r3,r2
   136cc:	1880052e 	bgeu	r3,r2,136e4 <__copybits+0x44>
   136d0:	19800017 	ldw	r6,0(r3)
   136d4:	21000104 	addi	r4,r4,4
   136d8:	18c00104 	addi	r3,r3,4
   136dc:	21bfff15 	stw	r6,-4(r4)
   136e0:	003ffa06 	br	136cc <_gp+0xffff1c7c>
   136e4:	2140032e 	bgeu	r4,r5,136f4 <__copybits+0x54>
   136e8:	20000015 	stw	zero,0(r4)
   136ec:	21000104 	addi	r4,r4,4
   136f0:	003ffc06 	br	136e4 <_gp+0xffff1c94>
   136f4:	f800283a 	ret

000136f8 <__any_on>:
   136f8:	20c00417 	ldw	r3,16(r4)
   136fc:	2805d17a 	srai	r2,r5,5
   13700:	21800504 	addi	r6,r4,20
   13704:	18800b16 	blt	r3,r2,13734 <__any_on+0x3c>
   13708:	10c00b0e 	bge	r2,r3,13738 <__any_on+0x40>
   1370c:	294007cc 	andi	r5,r5,31
   13710:	28000926 	beq	r5,zero,13738 <__any_on+0x40>
   13714:	1087883a 	add	r3,r2,r2
   13718:	18c7883a 	add	r3,r3,r3
   1371c:	30c7883a 	add	r3,r6,r3
   13720:	19000017 	ldw	r4,0(r3)
   13724:	2146d83a 	srl	r3,r4,r5
   13728:	194a983a 	sll	r5,r3,r5
   1372c:	21400c1e 	bne	r4,r5,13760 <__any_on+0x68>
   13730:	00000106 	br	13738 <__any_on+0x40>
   13734:	1805883a 	mov	r2,r3
   13738:	1085883a 	add	r2,r2,r2
   1373c:	1085883a 	add	r2,r2,r2
   13740:	3085883a 	add	r2,r6,r2
   13744:	3080042e 	bgeu	r6,r2,13758 <__any_on+0x60>
   13748:	10bfff04 	addi	r2,r2,-4
   1374c:	10c00017 	ldw	r3,0(r2)
   13750:	183ffc26 	beq	r3,zero,13744 <_gp+0xffff1cf4>
   13754:	00000206 	br	13760 <__any_on+0x68>
   13758:	0005883a 	mov	r2,zero
   1375c:	f800283a 	ret
   13760:	00800044 	movi	r2,1
   13764:	f800283a 	ret

00013768 <_calloc_r>:
   13768:	defffd04 	addi	sp,sp,-12
   1376c:	dc000015 	stw	r16,0(sp)
   13770:	2021883a 	mov	r16,r4
   13774:	2809883a 	mov	r4,r5
   13778:	300b883a 	mov	r5,r6
   1377c:	dfc00215 	stw	ra,8(sp)
   13780:	dc400115 	stw	r17,4(sp)
   13784:	00114000 	call	11400 <__mulsi3>
   13788:	8009883a 	mov	r4,r16
   1378c:	100b883a 	mov	r5,r2
   13790:	1023883a 	mov	r17,r2
   13794:	00137c80 	call	137c8 <_malloc_r>
   13798:	1021883a 	mov	r16,r2
   1379c:	10000426 	beq	r2,zero,137b0 <_calloc_r+0x48>
   137a0:	880d883a 	mov	r6,r17
   137a4:	000b883a 	mov	r5,zero
   137a8:	1009883a 	mov	r4,r2
   137ac:	00150000 	call	15000 <memset>
   137b0:	8005883a 	mov	r2,r16
   137b4:	dfc00217 	ldw	ra,8(sp)
   137b8:	dc400117 	ldw	r17,4(sp)
   137bc:	dc000017 	ldw	r16,0(sp)
   137c0:	dec00304 	addi	sp,sp,12
   137c4:	f800283a 	ret

000137c8 <_malloc_r>:
   137c8:	defffb04 	addi	sp,sp,-20
   137cc:	00bfff04 	movi	r2,-4
   137d0:	dc400115 	stw	r17,4(sp)
   137d4:	2c4000c4 	addi	r17,r5,3
   137d8:	88a2703a 	and	r17,r17,r2
   137dc:	dc800215 	stw	r18,8(sp)
   137e0:	dfc00415 	stw	ra,16(sp)
   137e4:	dcc00315 	stw	r19,12(sp)
   137e8:	dc000015 	stw	r16,0(sp)
   137ec:	8c400204 	addi	r17,r17,8
   137f0:	00800304 	movi	r2,12
   137f4:	2025883a 	mov	r18,r4
   137f8:	8880022e 	bgeu	r17,r2,13804 <_malloc_r+0x3c>
   137fc:	1023883a 	mov	r17,r2
   13800:	00000506 	br	13818 <_malloc_r+0x50>
   13804:	8800040e 	bge	r17,zero,13818 <_malloc_r+0x50>
   13808:	00800304 	movi	r2,12
   1380c:	90800015 	stw	r2,0(r18)
   13810:	0005883a 	mov	r2,zero
   13814:	00003b06 	br	13904 <_malloc_r+0x13c>
   13818:	897ffb36 	bltu	r17,r5,13808 <_gp+0xffff1db8>
   1381c:	008000b4 	movhi	r2,2
   13820:	10a75a04 	addi	r2,r2,-25240
   13824:	10c00017 	ldw	r3,0(r2)
   13828:	1009883a 	mov	r4,r2
   1382c:	1821883a 	mov	r16,r3
   13830:	80000926 	beq	r16,zero,13858 <_malloc_r+0x90>
   13834:	80800017 	ldw	r2,0(r16)
   13838:	1445c83a 	sub	r2,r2,r17
   1383c:	10001516 	blt	r2,zero,13894 <_malloc_r+0xcc>
   13840:	014002c4 	movi	r5,11
   13844:	28800d2e 	bgeu	r5,r2,1387c <_malloc_r+0xb4>
   13848:	80800015 	stw	r2,0(r16)
   1384c:	80a1883a 	add	r16,r16,r2
   13850:	84400015 	stw	r17,0(r16)
   13854:	8000221e 	bne	r16,zero,138e0 <_malloc_r+0x118>
   13858:	040000b4 	movhi	r16,2
   1385c:	84275904 	addi	r16,r16,-25244
   13860:	80800017 	ldw	r2,0(r16)
   13864:	10000e1e 	bne	r2,zero,138a0 <_malloc_r+0xd8>
   13868:	000b883a 	mov	r5,zero
   1386c:	9009883a 	mov	r4,r18
   13870:	00139c40 	call	139c4 <_sbrk_r>
   13874:	80800015 	stw	r2,0(r16)
   13878:	00000906 	br	138a0 <_malloc_r+0xd8>
   1387c:	80800117 	ldw	r2,4(r16)
   13880:	1c00021e 	bne	r3,r16,1388c <_malloc_r+0xc4>
   13884:	20800015 	stw	r2,0(r4)
   13888:	00001506 	br	138e0 <_malloc_r+0x118>
   1388c:	18800115 	stw	r2,4(r3)
   13890:	00001306 	br	138e0 <_malloc_r+0x118>
   13894:	8007883a 	mov	r3,r16
   13898:	84000117 	ldw	r16,4(r16)
   1389c:	003fe406 	br	13830 <_gp+0xffff1de0>
   138a0:	880b883a 	mov	r5,r17
   138a4:	9009883a 	mov	r4,r18
   138a8:	00139c40 	call	139c4 <_sbrk_r>
   138ac:	04ffffc4 	movi	r19,-1
   138b0:	14ffd526 	beq	r2,r19,13808 <_gp+0xffff1db8>
   138b4:	140000c4 	addi	r16,r2,3
   138b8:	00ffff04 	movi	r3,-4
   138bc:	80e0703a 	and	r16,r16,r3
   138c0:	1400021e 	bne	r2,r16,138cc <_malloc_r+0x104>
   138c4:	84400015 	stw	r17,0(r16)
   138c8:	00000506 	br	138e0 <_malloc_r+0x118>
   138cc:	808bc83a 	sub	r5,r16,r2
   138d0:	9009883a 	mov	r4,r18
   138d4:	00139c40 	call	139c4 <_sbrk_r>
   138d8:	14fffa1e 	bne	r2,r19,138c4 <_gp+0xffff1e74>
   138dc:	003fca06 	br	13808 <_gp+0xffff1db8>
   138e0:	810002c4 	addi	r4,r16,11
   138e4:	00bffe04 	movi	r2,-8
   138e8:	80c00104 	addi	r3,r16,4
   138ec:	2084703a 	and	r2,r4,r2
   138f0:	10c7c83a 	sub	r3,r2,r3
   138f4:	18000326 	beq	r3,zero,13904 <_malloc_r+0x13c>
   138f8:	80e1883a 	add	r16,r16,r3
   138fc:	00c7c83a 	sub	r3,zero,r3
   13900:	80c00015 	stw	r3,0(r16)
   13904:	dfc00417 	ldw	ra,16(sp)
   13908:	dcc00317 	ldw	r19,12(sp)
   1390c:	dc800217 	ldw	r18,8(sp)
   13910:	dc400117 	ldw	r17,4(sp)
   13914:	dc000017 	ldw	r16,0(sp)
   13918:	dec00504 	addi	sp,sp,20
   1391c:	f800283a 	ret

00013920 <_realloc_r>:
   13920:	2800021e 	bne	r5,zero,1392c <_realloc_r+0xc>
   13924:	300b883a 	mov	r5,r6
   13928:	00137c81 	jmpi	137c8 <_malloc_r>
   1392c:	defffb04 	addi	sp,sp,-20
   13930:	dc400115 	stw	r17,4(sp)
   13934:	dc000015 	stw	r16,0(sp)
   13938:	dfc00415 	stw	ra,16(sp)
   1393c:	dcc00315 	stw	r19,12(sp)
   13940:	dc800215 	stw	r18,8(sp)
   13944:	3023883a 	mov	r17,r6
   13948:	2821883a 	mov	r16,r5
   1394c:	3000021e 	bne	r6,zero,13958 <_realloc_r+0x38>
   13950:	00150200 	call	15020 <_free_r>
   13954:	00001306 	br	139a4 <_realloc_r+0x84>
   13958:	2025883a 	mov	r18,r4
   1395c:	00151040 	call	15104 <_malloc_usable_size_r>
   13960:	14400e2e 	bgeu	r2,r17,1399c <_realloc_r+0x7c>
   13964:	880b883a 	mov	r5,r17
   13968:	9009883a 	mov	r4,r18
   1396c:	00137c80 	call	137c8 <_malloc_r>
   13970:	1027883a 	mov	r19,r2
   13974:	10000b26 	beq	r2,zero,139a4 <_realloc_r+0x84>
   13978:	880d883a 	mov	r6,r17
   1397c:	800b883a 	mov	r5,r16
   13980:	1009883a 	mov	r4,r2
   13984:	0014fd80 	call	14fd8 <memcpy>
   13988:	800b883a 	mov	r5,r16
   1398c:	9009883a 	mov	r4,r18
   13990:	00150200 	call	15020 <_free_r>
   13994:	9805883a 	mov	r2,r19
   13998:	00000306 	br	139a8 <_realloc_r+0x88>
   1399c:	8005883a 	mov	r2,r16
   139a0:	00000106 	br	139a8 <_realloc_r+0x88>
   139a4:	0005883a 	mov	r2,zero
   139a8:	dfc00417 	ldw	ra,16(sp)
   139ac:	dcc00317 	ldw	r19,12(sp)
   139b0:	dc800217 	ldw	r18,8(sp)
   139b4:	dc400117 	ldw	r17,4(sp)
   139b8:	dc000017 	ldw	r16,0(sp)
   139bc:	dec00504 	addi	sp,sp,20
   139c0:	f800283a 	ret

000139c4 <_sbrk_r>:
   139c4:	defffd04 	addi	sp,sp,-12
   139c8:	dc000015 	stw	r16,0(sp)
   139cc:	040000b4 	movhi	r16,2
   139d0:	dc400115 	stw	r17,4(sp)
   139d4:	84275b04 	addi	r16,r16,-25236
   139d8:	2023883a 	mov	r17,r4
   139dc:	2809883a 	mov	r4,r5
   139e0:	dfc00215 	stw	ra,8(sp)
   139e4:	80000015 	stw	zero,0(r16)
   139e8:	0017d100 	call	17d10 <sbrk>
   139ec:	00ffffc4 	movi	r3,-1
   139f0:	10c0031e 	bne	r2,r3,13a00 <_sbrk_r+0x3c>
   139f4:	80c00017 	ldw	r3,0(r16)
   139f8:	18000126 	beq	r3,zero,13a00 <_sbrk_r+0x3c>
   139fc:	88c00015 	stw	r3,0(r17)
   13a00:	dfc00217 	ldw	ra,8(sp)
   13a04:	dc400117 	ldw	r17,4(sp)
   13a08:	dc000017 	ldw	r16,0(sp)
   13a0c:	dec00304 	addi	sp,sp,12
   13a10:	f800283a 	ret

00013a14 <strcpy>:
   13a14:	2005883a 	mov	r2,r4
   13a18:	200d883a 	mov	r6,r4
   13a1c:	28c00003 	ldbu	r3,0(r5)
   13a20:	31800044 	addi	r6,r6,1
   13a24:	29400044 	addi	r5,r5,1
   13a28:	30ffffc5 	stb	r3,-1(r6)
   13a2c:	18c03fcc 	andi	r3,r3,255
   13a30:	18c0201c 	xori	r3,r3,128
   13a34:	18ffe004 	addi	r3,r3,-128
   13a38:	183ff81e 	bne	r3,zero,13a1c <_gp+0xffff1fcc>
   13a3c:	f800283a 	ret

00013a40 <_write_r>:
   13a40:	defffd04 	addi	sp,sp,-12
   13a44:	dc000015 	stw	r16,0(sp)
   13a48:	040000b4 	movhi	r16,2
   13a4c:	dc400115 	stw	r17,4(sp)
   13a50:	84275b04 	addi	r16,r16,-25236
   13a54:	2023883a 	mov	r17,r4
   13a58:	2809883a 	mov	r4,r5
   13a5c:	300b883a 	mov	r5,r6
   13a60:	380d883a 	mov	r6,r7
   13a64:	dfc00215 	stw	ra,8(sp)
   13a68:	80000015 	stw	zero,0(r16)
   13a6c:	0017eb00 	call	17eb0 <write>
   13a70:	00ffffc4 	movi	r3,-1
   13a74:	10c0031e 	bne	r2,r3,13a84 <_write_r+0x44>
   13a78:	80c00017 	ldw	r3,0(r16)
   13a7c:	18000126 	beq	r3,zero,13a84 <_write_r+0x44>
   13a80:	88c00015 	stw	r3,0(r17)
   13a84:	dfc00217 	ldw	ra,8(sp)
   13a88:	dc400117 	ldw	r17,4(sp)
   13a8c:	dc000017 	ldw	r16,0(sp)
   13a90:	dec00304 	addi	sp,sp,12
   13a94:	f800283a 	ret

00013a98 <quorem>:
   13a98:	defff204 	addi	sp,sp,-56
   13a9c:	dc000415 	stw	r16,16(sp)
   13aa0:	20800417 	ldw	r2,16(r4)
   13aa4:	2c000417 	ldw	r16,16(r5)
   13aa8:	dfc00d15 	stw	ra,52(sp)
   13aac:	df000c15 	stw	fp,48(sp)
   13ab0:	ddc00b15 	stw	r23,44(sp)
   13ab4:	dd800a15 	stw	r22,40(sp)
   13ab8:	dd400915 	stw	r21,36(sp)
   13abc:	dd000815 	stw	r20,32(sp)
   13ac0:	dcc00715 	stw	r19,28(sp)
   13ac4:	dc800615 	stw	r18,24(sp)
   13ac8:	dc400515 	stw	r17,20(sp)
   13acc:	14006d16 	blt	r2,r16,13c84 <quorem+0x1ec>
   13ad0:	843fffc4 	addi	r16,r16,-1
   13ad4:	8423883a 	add	r17,r16,r16
   13ad8:	2cc00504 	addi	r19,r5,20
   13adc:	8c63883a 	add	r17,r17,r17
   13ae0:	9c6b883a 	add	r21,r19,r17
   13ae4:	25c00504 	addi	r23,r4,20
   13ae8:	2829883a 	mov	r20,r5
   13aec:	bc63883a 	add	r17,r23,r17
   13af0:	a9400017 	ldw	r5,0(r21)
   13af4:	2025883a 	mov	r18,r4
   13af8:	89000017 	ldw	r4,0(r17)
   13afc:	29400044 	addi	r5,r5,1
   13b00:	00152180 	call	15218 <__udivsi3>
   13b04:	102d883a 	mov	r22,r2
   13b08:	10003526 	beq	r2,zero,13be0 <quorem+0x148>
   13b0c:	b80d883a 	mov	r6,r23
   13b10:	9839883a 	mov	fp,r19
   13b14:	000f883a 	mov	r7,zero
   13b18:	0011883a 	mov	r8,zero
   13b1c:	e2400017 	ldw	r9,0(fp)
   13b20:	b00b883a 	mov	r5,r22
   13b24:	d9800315 	stw	r6,12(sp)
   13b28:	493fffcc 	andi	r4,r9,65535
   13b2c:	da000215 	stw	r8,8(sp)
   13b30:	d9c00015 	stw	r7,0(sp)
   13b34:	da400115 	stw	r9,4(sp)
   13b38:	00114000 	call	11400 <__mulsi3>
   13b3c:	da400117 	ldw	r9,4(sp)
   13b40:	d9c00017 	ldw	r7,0(sp)
   13b44:	b00b883a 	mov	r5,r22
   13b48:	4808d43a 	srli	r4,r9,16
   13b4c:	11c7883a 	add	r3,r2,r7
   13b50:	d8c00015 	stw	r3,0(sp)
   13b54:	00114000 	call	11400 <__mulsi3>
   13b58:	d8c00017 	ldw	r3,0(sp)
   13b5c:	d9800317 	ldw	r6,12(sp)
   13b60:	da000217 	ldw	r8,8(sp)
   13b64:	180ad43a 	srli	r5,r3,16
   13b68:	18ffffcc 	andi	r3,r3,65535
   13b6c:	e7000104 	addi	fp,fp,4
   13b70:	1145883a 	add	r2,r2,r5
   13b74:	31400017 	ldw	r5,0(r6)
   13b78:	100ed43a 	srli	r7,r2,16
   13b7c:	10bfffcc 	andi	r2,r2,65535
   13b80:	293fffcc 	andi	r4,r5,65535
   13b84:	2209883a 	add	r4,r4,r8
   13b88:	20c7c83a 	sub	r3,r4,r3
   13b8c:	280ad43a 	srli	r5,r5,16
   13b90:	1809d43a 	srai	r4,r3,16
   13b94:	18ffffcc 	andi	r3,r3,65535
   13b98:	2885c83a 	sub	r2,r5,r2
   13b9c:	1105883a 	add	r2,r2,r4
   13ba0:	1011d43a 	srai	r8,r2,16
   13ba4:	1004943a 	slli	r2,r2,16
   13ba8:	31800104 	addi	r6,r6,4
   13bac:	10c6b03a 	or	r3,r2,r3
   13bb0:	30ffff15 	stw	r3,-4(r6)
   13bb4:	af3fd92e 	bgeu	r21,fp,13b1c <_gp+0xffff20cc>
   13bb8:	88800017 	ldw	r2,0(r17)
   13bbc:	1000081e 	bne	r2,zero,13be0 <quorem+0x148>
   13bc0:	8c7fff04 	addi	r17,r17,-4
   13bc4:	bc400236 	bltu	r23,r17,13bd0 <quorem+0x138>
   13bc8:	94000415 	stw	r16,16(r18)
   13bcc:	00000406 	br	13be0 <quorem+0x148>
   13bd0:	88800017 	ldw	r2,0(r17)
   13bd4:	103ffc1e 	bne	r2,zero,13bc8 <_gp+0xffff2178>
   13bd8:	843fffc4 	addi	r16,r16,-1
   13bdc:	003ff806 	br	13bc0 <_gp+0xffff2170>
   13be0:	a00b883a 	mov	r5,r20
   13be4:	9009883a 	mov	r4,r18
   13be8:	001312c0 	call	1312c <__mcmp>
   13bec:	10002316 	blt	r2,zero,13c7c <quorem+0x1e4>
   13bf0:	b5800044 	addi	r22,r22,1
   13bf4:	b80b883a 	mov	r5,r23
   13bf8:	000d883a 	mov	r6,zero
   13bfc:	28c00017 	ldw	r3,0(r5)
   13c00:	99000017 	ldw	r4,0(r19)
   13c04:	9cc00104 	addi	r19,r19,4
   13c08:	18bfffcc 	andi	r2,r3,65535
   13c0c:	118d883a 	add	r6,r2,r6
   13c10:	1806d43a 	srli	r3,r3,16
   13c14:	20bfffcc 	andi	r2,r4,65535
   13c18:	2008d43a 	srli	r4,r4,16
   13c1c:	3085c83a 	sub	r2,r6,r2
   13c20:	29400104 	addi	r5,r5,4
   13c24:	1909c83a 	sub	r4,r3,r4
   13c28:	1007d43a 	srai	r3,r2,16
   13c2c:	10bfffcc 	andi	r2,r2,65535
   13c30:	20c7883a 	add	r3,r4,r3
   13c34:	180dd43a 	srai	r6,r3,16
   13c38:	1806943a 	slli	r3,r3,16
   13c3c:	1884b03a 	or	r2,r3,r2
   13c40:	28bfff15 	stw	r2,-4(r5)
   13c44:	acffed2e 	bgeu	r21,r19,13bfc <_gp+0xffff21ac>
   13c48:	8407883a 	add	r3,r16,r16
   13c4c:	18c7883a 	add	r3,r3,r3
   13c50:	b8c7883a 	add	r3,r23,r3
   13c54:	18800017 	ldw	r2,0(r3)
   13c58:	1000081e 	bne	r2,zero,13c7c <quorem+0x1e4>
   13c5c:	18ffff04 	addi	r3,r3,-4
   13c60:	b8c00236 	bltu	r23,r3,13c6c <quorem+0x1d4>
   13c64:	94000415 	stw	r16,16(r18)
   13c68:	00000406 	br	13c7c <quorem+0x1e4>
   13c6c:	18800017 	ldw	r2,0(r3)
   13c70:	103ffc1e 	bne	r2,zero,13c64 <_gp+0xffff2214>
   13c74:	843fffc4 	addi	r16,r16,-1
   13c78:	003ff806 	br	13c5c <_gp+0xffff220c>
   13c7c:	b005883a 	mov	r2,r22
   13c80:	00000106 	br	13c88 <quorem+0x1f0>
   13c84:	0005883a 	mov	r2,zero
   13c88:	dfc00d17 	ldw	ra,52(sp)
   13c8c:	df000c17 	ldw	fp,48(sp)
   13c90:	ddc00b17 	ldw	r23,44(sp)
   13c94:	dd800a17 	ldw	r22,40(sp)
   13c98:	dd400917 	ldw	r21,36(sp)
   13c9c:	dd000817 	ldw	r20,32(sp)
   13ca0:	dcc00717 	ldw	r19,28(sp)
   13ca4:	dc800617 	ldw	r18,24(sp)
   13ca8:	dc400517 	ldw	r17,20(sp)
   13cac:	dc000417 	ldw	r16,16(sp)
   13cb0:	dec00e04 	addi	sp,sp,56
   13cb4:	f800283a 	ret

00013cb8 <_dtoa_r>:
   13cb8:	20800417 	ldw	r2,16(r4)
   13cbc:	deffe004 	addi	sp,sp,-128
   13cc0:	dd001a15 	stw	r20,104(sp)
   13cc4:	dcc01915 	stw	r19,100(sp)
   13cc8:	dc801815 	stw	r18,96(sp)
   13ccc:	dc401715 	stw	r17,92(sp)
   13cd0:	dc001615 	stw	r16,88(sp)
   13cd4:	dfc01f15 	stw	ra,124(sp)
   13cd8:	df001e15 	stw	fp,120(sp)
   13cdc:	ddc01d15 	stw	r23,116(sp)
   13ce0:	dd801c15 	stw	r22,112(sp)
   13ce4:	dd401b15 	stw	r21,108(sp)
   13ce8:	d9400915 	stw	r5,36(sp)
   13cec:	d9c00815 	stw	r7,32(sp)
   13cf0:	2021883a 	mov	r16,r4
   13cf4:	3029883a 	mov	r20,r6
   13cf8:	dc802217 	ldw	r18,136(sp)
   13cfc:	2823883a 	mov	r17,r5
   13d00:	3027883a 	mov	r19,r6
   13d04:	1000071e 	bne	r2,zero,13d24 <_dtoa_r+0x6c>
   13d08:	01000404 	movi	r4,16
   13d0c:	0014fb00 	call	14fb0 <malloc>
   13d10:	80800415 	stw	r2,16(r16)
   13d14:	10000115 	stw	zero,4(r2)
   13d18:	10000215 	stw	zero,8(r2)
   13d1c:	10000015 	stw	zero,0(r2)
   13d20:	10000315 	stw	zero,12(r2)
   13d24:	80800417 	ldw	r2,16(r16)
   13d28:	11400017 	ldw	r5,0(r2)
   13d2c:	28000926 	beq	r5,zero,13d54 <_dtoa_r+0x9c>
   13d30:	10c00117 	ldw	r3,4(r2)
   13d34:	00800044 	movi	r2,1
   13d38:	8009883a 	mov	r4,r16
   13d3c:	10c4983a 	sll	r2,r2,r3
   13d40:	28c00115 	stw	r3,4(r5)
   13d44:	28800215 	stw	r2,8(r5)
   13d48:	001283c0 	call	1283c <_Bfree>
   13d4c:	80800417 	ldw	r2,16(r16)
   13d50:	10000015 	stw	zero,0(r2)
   13d54:	a000060e 	bge	r20,zero,13d70 <_dtoa_r+0xb8>
   13d58:	04e00034 	movhi	r19,32768
   13d5c:	00800044 	movi	r2,1
   13d60:	9cffffc4 	addi	r19,r19,-1
   13d64:	90800015 	stw	r2,0(r18)
   13d68:	a4e6703a 	and	r19,r20,r19
   13d6c:	00000106 	br	13d74 <_dtoa_r+0xbc>
   13d70:	90000015 	stw	zero,0(r18)
   13d74:	989ffc2c 	andhi	r2,r19,32752
   13d78:	00dffc34 	movhi	r3,32752
   13d7c:	10c0181e 	bne	r2,r3,13de0 <_dtoa_r+0x128>
   13d80:	d8c02117 	ldw	r3,132(sp)
   13d84:	d9000917 	ldw	r4,36(sp)
   13d88:	0089c3c4 	movi	r2,9999
   13d8c:	18800015 	stw	r2,0(r3)
   13d90:	2000071e 	bne	r4,zero,13db0 <_dtoa_r+0xf8>
   13d94:	00800434 	movhi	r2,16
   13d98:	10bfffc4 	addi	r2,r2,-1
   13d9c:	98a6703a 	and	r19,r19,r2
   13da0:	9800031e 	bne	r19,zero,13db0 <_dtoa_r+0xf8>
   13da4:	008000b4 	movhi	r2,2
   13da8:	10a5d704 	addi	r2,r2,-26788
   13dac:	00000206 	br	13db8 <_dtoa_r+0x100>
   13db0:	008000b4 	movhi	r2,2
   13db4:	10a5da04 	addi	r2,r2,-26776
   13db8:	d8c02317 	ldw	r3,140(sp)
   13dbc:	18047026 	beq	r3,zero,14f80 <_dtoa_r+0x12c8>
   13dc0:	10c000c7 	ldb	r3,3(r2)
   13dc4:	18000226 	beq	r3,zero,13dd0 <_dtoa_r+0x118>
   13dc8:	10c00204 	addi	r3,r2,8
   13dcc:	00000106 	br	13dd4 <_dtoa_r+0x11c>
   13dd0:	10c000c4 	addi	r3,r2,3
   13dd4:	d9002317 	ldw	r4,140(sp)
   13dd8:	20c00015 	stw	r3,0(r4)
   13ddc:	00046806 	br	14f80 <_dtoa_r+0x12c8>
   13de0:	d9000917 	ldw	r4,36(sp)
   13de4:	000d883a 	mov	r6,zero
   13de8:	000f883a 	mov	r7,zero
   13dec:	980b883a 	mov	r5,r19
   13df0:	00165500 	call	16550 <__eqdf2>
   13df4:	10000a1e 	bne	r2,zero,13e20 <_dtoa_r+0x168>
   13df8:	d8c02117 	ldw	r3,132(sp)
   13dfc:	d9002317 	ldw	r4,140(sp)
   13e00:	00800044 	movi	r2,1
   13e04:	18800015 	stw	r2,0(r3)
   13e08:	20044926 	beq	r4,zero,14f30 <_dtoa_r+0x1278>
   13e0c:	008000b4 	movhi	r2,2
   13e10:	10a5db44 	addi	r2,r2,-26771
   13e14:	20800015 	stw	r2,0(r4)
   13e18:	10bfffc4 	addi	r2,r2,-1
   13e1c:	00045806 	br	14f80 <_dtoa_r+0x12c8>
   13e20:	d9400917 	ldw	r5,36(sp)
   13e24:	d8800204 	addi	r2,sp,8
   13e28:	9824d53a 	srli	r18,r19,20
   13e2c:	d8800015 	stw	r2,0(sp)
   13e30:	d9c00104 	addi	r7,sp,4
   13e34:	980d883a 	mov	r6,r19
   13e38:	8009883a 	mov	r4,r16
   13e3c:	00134540 	call	13454 <__d2b>
   13e40:	d8800315 	stw	r2,12(sp)
   13e44:	9481ffcc 	andi	r18,r18,2047
   13e48:	dd000217 	ldw	r20,8(sp)
   13e4c:	90000826 	beq	r18,zero,13e70 <_dtoa_r+0x1b8>
   13e50:	01400434 	movhi	r5,16
   13e54:	297fffc4 	addi	r5,r5,-1
   13e58:	994a703a 	and	r5,r19,r5
   13e5c:	d8800917 	ldw	r2,36(sp)
   13e60:	294ffc34 	orhi	r5,r5,16368
   13e64:	94bf0044 	addi	r18,r18,-1023
   13e68:	d8001015 	stw	zero,64(sp)
   13e6c:	00001606 	br	13ec8 <_dtoa_r+0x210>
   13e70:	dc800117 	ldw	r18,4(sp)
   13e74:	00800804 	movi	r2,32
   13e78:	a4a5883a 	add	r18,r20,r18
   13e7c:	91010c84 	addi	r4,r18,1074
   13e80:	1100080e 	bge	r2,r4,13ea4 <_dtoa_r+0x1ec>
   13e84:	d8800917 	ldw	r2,36(sp)
   13e88:	91410484 	addi	r5,r18,1042
   13e8c:	00c01004 	movi	r3,64
   13e90:	114ad83a 	srl	r5,r2,r5
   13e94:	1905c83a 	sub	r2,r3,r4
   13e98:	9884983a 	sll	r2,r19,r2
   13e9c:	2888b03a 	or	r4,r5,r2
   13ea0:	00000306 	br	13eb0 <_dtoa_r+0x1f8>
   13ea4:	d8c00917 	ldw	r3,36(sp)
   13ea8:	1109c83a 	sub	r4,r2,r4
   13eac:	1908983a 	sll	r4,r3,r4
   13eb0:	00112f40 	call	112f4 <__floatunsidf>
   13eb4:	017f8434 	movhi	r5,65040
   13eb8:	01000044 	movi	r4,1
   13ebc:	194b883a 	add	r5,r3,r5
   13ec0:	94bfffc4 	addi	r18,r18,-1
   13ec4:	d9001015 	stw	r4,64(sp)
   13ec8:	000d883a 	mov	r6,zero
   13ecc:	01cffe34 	movhi	r7,16376
   13ed0:	1009883a 	mov	r4,r2
   13ed4:	00170140 	call	17014 <__subdf3>
   13ed8:	0198dbf4 	movhi	r6,25455
   13edc:	01cff4f4 	movhi	r7,16339
   13ee0:	3190d844 	addi	r6,r6,17249
   13ee4:	39e1e9c4 	addi	r7,r7,-30809
   13ee8:	1009883a 	mov	r4,r2
   13eec:	180b883a 	mov	r5,r3
   13ef0:	00167a80 	call	167a8 <__muldf3>
   13ef4:	01a2d874 	movhi	r6,35681
   13ef8:	01cff1f4 	movhi	r7,16327
   13efc:	31b22cc4 	addi	r6,r6,-14157
   13f00:	39e28a04 	addi	r7,r7,-30168
   13f04:	180b883a 	mov	r5,r3
   13f08:	1009883a 	mov	r4,r2
   13f0c:	00152d40 	call	152d4 <__adddf3>
   13f10:	9009883a 	mov	r4,r18
   13f14:	102d883a 	mov	r22,r2
   13f18:	182b883a 	mov	r21,r3
   13f1c:	00179900 	call	17990 <__floatsidf>
   13f20:	019427f4 	movhi	r6,20639
   13f24:	01cff4f4 	movhi	r7,16339
   13f28:	319e7ec4 	addi	r6,r6,31227
   13f2c:	39d104c4 	addi	r7,r7,17427
   13f30:	1009883a 	mov	r4,r2
   13f34:	180b883a 	mov	r5,r3
   13f38:	00167a80 	call	167a8 <__muldf3>
   13f3c:	100d883a 	mov	r6,r2
   13f40:	180f883a 	mov	r7,r3
   13f44:	b009883a 	mov	r4,r22
   13f48:	a80b883a 	mov	r5,r21
   13f4c:	00152d40 	call	152d4 <__adddf3>
   13f50:	1009883a 	mov	r4,r2
   13f54:	180b883a 	mov	r5,r3
   13f58:	102d883a 	mov	r22,r2
   13f5c:	182b883a 	mov	r21,r3
   13f60:	00179100 	call	17910 <__fixdfsi>
   13f64:	000d883a 	mov	r6,zero
   13f68:	000f883a 	mov	r7,zero
   13f6c:	b009883a 	mov	r4,r22
   13f70:	a80b883a 	mov	r5,r21
   13f74:	1039883a 	mov	fp,r2
   13f78:	00166b40 	call	166b4 <__ledf2>
   13f7c:	1000090e 	bge	r2,zero,13fa4 <_dtoa_r+0x2ec>
   13f80:	e009883a 	mov	r4,fp
   13f84:	00179900 	call	17990 <__floatsidf>
   13f88:	100d883a 	mov	r6,r2
   13f8c:	180f883a 	mov	r7,r3
   13f90:	b009883a 	mov	r4,r22
   13f94:	a80b883a 	mov	r5,r21
   13f98:	00165500 	call	16550 <__eqdf2>
   13f9c:	10000126 	beq	r2,zero,13fa4 <_dtoa_r+0x2ec>
   13fa0:	e73fffc4 	addi	fp,fp,-1
   13fa4:	00800584 	movi	r2,22
   13fa8:	17000c36 	bltu	r2,fp,13fdc <_dtoa_r+0x324>
   13fac:	e00490fa 	slli	r2,fp,3
   13fb0:	00c000b4 	movhi	r3,2
   13fb4:	18e5a504 	addi	r3,r3,-26988
   13fb8:	1885883a 	add	r2,r3,r2
   13fbc:	d9800917 	ldw	r6,36(sp)
   13fc0:	11000017 	ldw	r4,0(r2)
   13fc4:	11400117 	ldw	r5,4(r2)
   13fc8:	980f883a 	mov	r7,r19
   13fcc:	00165d80 	call	165d8 <__gedf2>
   13fd0:	0080050e 	bge	zero,r2,13fe8 <_dtoa_r+0x330>
   13fd4:	e73fffc4 	addi	fp,fp,-1
   13fd8:	00000306 	br	13fe8 <_dtoa_r+0x330>
   13fdc:	00800044 	movi	r2,1
   13fe0:	d8800f15 	stw	r2,60(sp)
   13fe4:	00000106 	br	13fec <_dtoa_r+0x334>
   13fe8:	d8000f15 	stw	zero,60(sp)
   13fec:	a4afc83a 	sub	r23,r20,r18
   13ff0:	bdffffc4 	addi	r23,r23,-1
   13ff4:	b800040e 	bge	r23,zero,14008 <_dtoa_r+0x350>
   13ff8:	05efc83a 	sub	r23,zero,r23
   13ffc:	ddc00615 	stw	r23,24(sp)
   14000:	002f883a 	mov	r23,zero
   14004:	00000106 	br	1400c <_dtoa_r+0x354>
   14008:	d8000615 	stw	zero,24(sp)
   1400c:	e0000416 	blt	fp,zero,14020 <_dtoa_r+0x368>
   14010:	bf2f883a 	add	r23,r23,fp
   14014:	df000d15 	stw	fp,52(sp)
   14018:	d8000a15 	stw	zero,40(sp)
   1401c:	00000606 	br	14038 <_dtoa_r+0x380>
   14020:	d8c00617 	ldw	r3,24(sp)
   14024:	0709c83a 	sub	r4,zero,fp
   14028:	d9000a15 	stw	r4,40(sp)
   1402c:	1f07c83a 	sub	r3,r3,fp
   14030:	d8c00615 	stw	r3,24(sp)
   14034:	d8000d15 	stw	zero,52(sp)
   14038:	d8c00817 	ldw	r3,32(sp)
   1403c:	00800244 	movi	r2,9
   14040:	10c02736 	bltu	r2,r3,140e0 <_dtoa_r+0x428>
   14044:	00800144 	movi	r2,5
   14048:	10c0040e 	bge	r2,r3,1405c <_dtoa_r+0x3a4>
   1404c:	18ffff04 	addi	r3,r3,-4
   14050:	d8c00815 	stw	r3,32(sp)
   14054:	0025883a 	mov	r18,zero
   14058:	00000106 	br	14060 <_dtoa_r+0x3a8>
   1405c:	04800044 	movi	r18,1
   14060:	d9000817 	ldw	r4,32(sp)
   14064:	00c000c4 	movi	r3,3
   14068:	20c01426 	beq	r4,r3,140bc <_dtoa_r+0x404>
   1406c:	19000416 	blt	r3,r4,14080 <_dtoa_r+0x3c8>
   14070:	00800084 	movi	r2,2
   14074:	2080211e 	bne	r4,r2,140fc <_dtoa_r+0x444>
   14078:	d8000b15 	stw	zero,44(sp)
   1407c:	00000906 	br	140a4 <_dtoa_r+0x3ec>
   14080:	d9000817 	ldw	r4,32(sp)
   14084:	00c00104 	movi	r3,4
   14088:	20c00426 	beq	r4,r3,1409c <_dtoa_r+0x3e4>
   1408c:	20801b1e 	bne	r4,r2,140fc <_dtoa_r+0x444>
   14090:	00c00044 	movi	r3,1
   14094:	d8c00b15 	stw	r3,44(sp)
   14098:	00000906 	br	140c0 <_dtoa_r+0x408>
   1409c:	00800044 	movi	r2,1
   140a0:	d8800b15 	stw	r2,44(sp)
   140a4:	d9002017 	ldw	r4,128(sp)
   140a8:	01001c0e 	bge	zero,r4,1411c <_dtoa_r+0x464>
   140ac:	d9000515 	stw	r4,20(sp)
   140b0:	d9000415 	stw	r4,16(sp)
   140b4:	2005883a 	mov	r2,r4
   140b8:	00001f06 	br	14138 <_dtoa_r+0x480>
   140bc:	d8000b15 	stw	zero,44(sp)
   140c0:	d8802017 	ldw	r2,128(sp)
   140c4:	e085883a 	add	r2,fp,r2
   140c8:	10c00044 	addi	r3,r2,1
   140cc:	d8800515 	stw	r2,20(sp)
   140d0:	d8c00415 	stw	r3,16(sp)
   140d4:	00c0170e 	bge	zero,r3,14134 <_dtoa_r+0x47c>
   140d8:	1805883a 	mov	r2,r3
   140dc:	00001606 	br	14138 <_dtoa_r+0x480>
   140e0:	013fffc4 	movi	r4,-1
   140e4:	04800044 	movi	r18,1
   140e8:	d8000815 	stw	zero,32(sp)
   140ec:	dc800b15 	stw	r18,44(sp)
   140f0:	d9000515 	stw	r4,20(sp)
   140f4:	d9000415 	stw	r4,16(sp)
   140f8:	00000506 	br	14110 <_dtoa_r+0x458>
   140fc:	00ffffc4 	movi	r3,-1
   14100:	00800044 	movi	r2,1
   14104:	d8800b15 	stw	r2,44(sp)
   14108:	d8c00515 	stw	r3,20(sp)
   1410c:	d8c00415 	stw	r3,16(sp)
   14110:	00800484 	movi	r2,18
   14114:	d8002015 	stw	zero,128(sp)
   14118:	00000706 	br	14138 <_dtoa_r+0x480>
   1411c:	01000044 	movi	r4,1
   14120:	d9000515 	stw	r4,20(sp)
   14124:	d9000415 	stw	r4,16(sp)
   14128:	2005883a 	mov	r2,r4
   1412c:	d9002015 	stw	r4,128(sp)
   14130:	00000106 	br	14138 <_dtoa_r+0x480>
   14134:	00800044 	movi	r2,1
   14138:	85000417 	ldw	r20,16(r16)
   1413c:	00c00104 	movi	r3,4
   14140:	a0000115 	stw	zero,4(r20)
   14144:	19000504 	addi	r4,r3,20
   14148:	a1400117 	ldw	r5,4(r20)
   1414c:	11000436 	bltu	r2,r4,14160 <_dtoa_r+0x4a8>
   14150:	29400044 	addi	r5,r5,1
   14154:	a1400115 	stw	r5,4(r20)
   14158:	18c7883a 	add	r3,r3,r3
   1415c:	003ff906 	br	14144 <_gp+0xffff26f4>
   14160:	8009883a 	mov	r4,r16
   14164:	00127580 	call	12758 <_Balloc>
   14168:	a0800015 	stw	r2,0(r20)
   1416c:	80800417 	ldw	r2,16(r16)
   14170:	d8c00417 	ldw	r3,16(sp)
   14174:	10800017 	ldw	r2,0(r2)
   14178:	d8800715 	stw	r2,28(sp)
   1417c:	00800384 	movi	r2,14
   14180:	10c13436 	bltu	r2,r3,14654 <_dtoa_r+0x99c>
   14184:	90013326 	beq	r18,zero,14654 <_dtoa_r+0x99c>
   14188:	dcc01315 	stw	r19,76(sp)
   1418c:	0700330e 	bge	zero,fp,1425c <_dtoa_r+0x5a4>
   14190:	e08003cc 	andi	r2,fp,15
   14194:	100490fa 	slli	r2,r2,3
   14198:	00c000b4 	movhi	r3,2
   1419c:	e029d13a 	srai	r20,fp,4
   141a0:	18e5a504 	addi	r3,r3,-26988
   141a4:	1885883a 	add	r2,r3,r2
   141a8:	15800017 	ldw	r22,0(r2)
   141ac:	15400117 	ldw	r21,4(r2)
   141b0:	a080040c 	andi	r2,r20,16
   141b4:	10000c26 	beq	r2,zero,141e8 <_dtoa_r+0x530>
   141b8:	008000b4 	movhi	r2,2
   141bc:	10a59b04 	addi	r2,r2,-27028
   141c0:	11800817 	ldw	r6,32(r2)
   141c4:	11c00917 	ldw	r7,36(r2)
   141c8:	d9000917 	ldw	r4,36(sp)
   141cc:	980b883a 	mov	r5,r19
   141d0:	a50003cc 	andi	r20,r20,15
   141d4:	0015b800 	call	15b80 <__divdf3>
   141d8:	1023883a 	mov	r17,r2
   141dc:	1827883a 	mov	r19,r3
   141e0:	048000c4 	movi	r18,3
   141e4:	00000106 	br	141ec <_dtoa_r+0x534>
   141e8:	04800084 	movi	r18,2
   141ec:	024000b4 	movhi	r9,2
   141f0:	0011883a 	mov	r8,zero
   141f4:	4a659b04 	addi	r9,r9,-27028
   141f8:	a0001226 	beq	r20,zero,14244 <_dtoa_r+0x58c>
   141fc:	a080004c 	andi	r2,r20,1
   14200:	10000d26 	beq	r2,zero,14238 <_dtoa_r+0x580>
   14204:	4245883a 	add	r2,r8,r9
   14208:	11800017 	ldw	r6,0(r2)
   1420c:	11c00117 	ldw	r7,4(r2)
   14210:	b009883a 	mov	r4,r22
   14214:	a80b883a 	mov	r5,r21
   14218:	da001415 	stw	r8,80(sp)
   1421c:	da401515 	stw	r9,84(sp)
   14220:	00167a80 	call	167a8 <__muldf3>
   14224:	da401517 	ldw	r9,84(sp)
   14228:	da001417 	ldw	r8,80(sp)
   1422c:	94800044 	addi	r18,r18,1
   14230:	102d883a 	mov	r22,r2
   14234:	182b883a 	mov	r21,r3
   14238:	a029d07a 	srai	r20,r20,1
   1423c:	42000204 	addi	r8,r8,8
   14240:	003fed06 	br	141f8 <_gp+0xffff27a8>
   14244:	b00d883a 	mov	r6,r22
   14248:	a80f883a 	mov	r7,r21
   1424c:	8809883a 	mov	r4,r17
   14250:	980b883a 	mov	r5,r19
   14254:	0015b800 	call	15b80 <__divdf3>
   14258:	00002406 	br	142ec <_dtoa_r+0x634>
   1425c:	0729c83a 	sub	r20,zero,fp
   14260:	a0002526 	beq	r20,zero,142f8 <_dtoa_r+0x640>
   14264:	a08003cc 	andi	r2,r20,15
   14268:	100490fa 	slli	r2,r2,3
   1426c:	00c000b4 	movhi	r3,2
   14270:	18e5a504 	addi	r3,r3,-26988
   14274:	1885883a 	add	r2,r3,r2
   14278:	d9000917 	ldw	r4,36(sp)
   1427c:	11800017 	ldw	r6,0(r2)
   14280:	11c00117 	ldw	r7,4(r2)
   14284:	980b883a 	mov	r5,r19
   14288:	a029d13a 	srai	r20,r20,4
   1428c:	00167a80 	call	167a8 <__muldf3>
   14290:	058000b4 	movhi	r22,2
   14294:	1023883a 	mov	r17,r2
   14298:	1827883a 	mov	r19,r3
   1429c:	002b883a 	mov	r21,zero
   142a0:	0009883a 	mov	r4,zero
   142a4:	04800084 	movi	r18,2
   142a8:	b5a59b04 	addi	r22,r22,-27028
   142ac:	a0000d26 	beq	r20,zero,142e4 <_dtoa_r+0x62c>
   142b0:	a140004c 	andi	r5,r20,1
   142b4:	28000826 	beq	r5,zero,142d8 <_dtoa_r+0x620>
   142b8:	ad89883a 	add	r4,r21,r22
   142bc:	21800017 	ldw	r6,0(r4)
   142c0:	21c00117 	ldw	r7,4(r4)
   142c4:	180b883a 	mov	r5,r3
   142c8:	1009883a 	mov	r4,r2
   142cc:	00167a80 	call	167a8 <__muldf3>
   142d0:	94800044 	addi	r18,r18,1
   142d4:	01000044 	movi	r4,1
   142d8:	a029d07a 	srai	r20,r20,1
   142dc:	ad400204 	addi	r21,r21,8
   142e0:	003ff206 	br	142ac <_gp+0xffff285c>
   142e4:	21003fcc 	andi	r4,r4,255
   142e8:	20000426 	beq	r4,zero,142fc <_dtoa_r+0x644>
   142ec:	1023883a 	mov	r17,r2
   142f0:	1827883a 	mov	r19,r3
   142f4:	00000106 	br	142fc <_dtoa_r+0x644>
   142f8:	04800084 	movi	r18,2
   142fc:	d9000f17 	ldw	r4,60(sp)
   14300:	20001626 	beq	r4,zero,1435c <_dtoa_r+0x6a4>
   14304:	000d883a 	mov	r6,zero
   14308:	01cffc34 	movhi	r7,16368
   1430c:	8809883a 	mov	r4,r17
   14310:	980b883a 	mov	r5,r19
   14314:	00166b40 	call	166b4 <__ledf2>
   14318:	1000140e 	bge	r2,zero,1436c <_dtoa_r+0x6b4>
   1431c:	d8800417 	ldw	r2,16(sp)
   14320:	10001626 	beq	r2,zero,1437c <_dtoa_r+0x6c4>
   14324:	d8c00517 	ldw	r3,20(sp)
   14328:	00c0c90e 	bge	zero,r3,14650 <_dtoa_r+0x998>
   1432c:	8809883a 	mov	r4,r17
   14330:	980b883a 	mov	r5,r19
   14334:	000d883a 	mov	r6,zero
   14338:	01d00934 	movhi	r7,16420
   1433c:	00167a80 	call	167a8 <__muldf3>
   14340:	d9000517 	ldw	r4,20(sp)
   14344:	e57fffc4 	addi	r21,fp,-1
   14348:	1023883a 	mov	r17,r2
   1434c:	1827883a 	mov	r19,r3
   14350:	94800044 	addi	r18,r18,1
   14354:	d9000c15 	stw	r4,48(sp)
   14358:	00000a06 	br	14384 <_dtoa_r+0x6cc>
   1435c:	d8800417 	ldw	r2,16(sp)
   14360:	e02b883a 	mov	r21,fp
   14364:	d8800c15 	stw	r2,48(sp)
   14368:	00000606 	br	14384 <_dtoa_r+0x6cc>
   1436c:	d8c00417 	ldw	r3,16(sp)
   14370:	e02b883a 	mov	r21,fp
   14374:	d8c00c15 	stw	r3,48(sp)
   14378:	00000206 	br	14384 <_dtoa_r+0x6cc>
   1437c:	e02b883a 	mov	r21,fp
   14380:	d8000c15 	stw	zero,48(sp)
   14384:	9009883a 	mov	r4,r18
   14388:	dc400e15 	stw	r17,56(sp)
   1438c:	00179900 	call	17990 <__floatsidf>
   14390:	880d883a 	mov	r6,r17
   14394:	980f883a 	mov	r7,r19
   14398:	1009883a 	mov	r4,r2
   1439c:	180b883a 	mov	r5,r3
   143a0:	00167a80 	call	167a8 <__muldf3>
   143a4:	1009883a 	mov	r4,r2
   143a8:	000d883a 	mov	r6,zero
   143ac:	01d00734 	movhi	r7,16412
   143b0:	180b883a 	mov	r5,r3
   143b4:	00152d40 	call	152d4 <__adddf3>
   143b8:	d9000c17 	ldw	r4,48(sp)
   143bc:	04bf3034 	movhi	r18,64704
   143c0:	9829883a 	mov	r20,r19
   143c4:	102d883a 	mov	r22,r2
   143c8:	1ca5883a 	add	r18,r3,r18
   143cc:	2000141e 	bne	r4,zero,14420 <_dtoa_r+0x768>
   143d0:	8809883a 	mov	r4,r17
   143d4:	980b883a 	mov	r5,r19
   143d8:	000d883a 	mov	r6,zero
   143dc:	01d00534 	movhi	r7,16404
   143e0:	00170140 	call	17014 <__subdf3>
   143e4:	b00d883a 	mov	r6,r22
   143e8:	900f883a 	mov	r7,r18
   143ec:	1009883a 	mov	r4,r2
   143f0:	180b883a 	mov	r5,r3
   143f4:	1027883a 	mov	r19,r2
   143f8:	1823883a 	mov	r17,r3
   143fc:	00165d80 	call	165d8 <__gedf2>
   14400:	0081dc16 	blt	zero,r2,14b74 <_dtoa_r+0xebc>
   14404:	91e0003c 	xorhi	r7,r18,32768
   14408:	b00d883a 	mov	r6,r22
   1440c:	9809883a 	mov	r4,r19
   14410:	880b883a 	mov	r5,r17
   14414:	00166b40 	call	166b4 <__ledf2>
   14418:	1001d016 	blt	r2,zero,14b5c <_dtoa_r+0xea4>
   1441c:	00008c06 	br	14650 <_dtoa_r+0x998>
   14420:	d9000c17 	ldw	r4,48(sp)
   14424:	008000b4 	movhi	r2,2
   14428:	10a5a504 	addi	r2,r2,-26988
   1442c:	20ffffc4 	addi	r3,r4,-1
   14430:	180690fa 	slli	r3,r3,3
   14434:	d9000b17 	ldw	r4,44(sp)
   14438:	10c5883a 	add	r2,r2,r3
   1443c:	20004526 	beq	r4,zero,14554 <_dtoa_r+0x89c>
   14440:	11800017 	ldw	r6,0(r2)
   14444:	11c00117 	ldw	r7,4(r2)
   14448:	0009883a 	mov	r4,zero
   1444c:	014ff834 	movhi	r5,16352
   14450:	0015b800 	call	15b80 <__divdf3>
   14454:	900f883a 	mov	r7,r18
   14458:	b00d883a 	mov	r6,r22
   1445c:	1009883a 	mov	r4,r2
   14460:	180b883a 	mov	r5,r3
   14464:	00170140 	call	17014 <__subdf3>
   14468:	da400717 	ldw	r9,28(sp)
   1446c:	1025883a 	mov	r18,r2
   14470:	1823883a 	mov	r17,r3
   14474:	d9000e17 	ldw	r4,56(sp)
   14478:	a00b883a 	mov	r5,r20
   1447c:	da401515 	stw	r9,84(sp)
   14480:	00179100 	call	17910 <__fixdfsi>
   14484:	1009883a 	mov	r4,r2
   14488:	d8801415 	stw	r2,80(sp)
   1448c:	00179900 	call	17990 <__floatsidf>
   14490:	d9000e17 	ldw	r4,56(sp)
   14494:	a00b883a 	mov	r5,r20
   14498:	100d883a 	mov	r6,r2
   1449c:	180f883a 	mov	r7,r3
   144a0:	00170140 	call	17014 <__subdf3>
   144a4:	da001417 	ldw	r8,80(sp)
   144a8:	da401517 	ldw	r9,84(sp)
   144ac:	900d883a 	mov	r6,r18
   144b0:	42000c04 	addi	r8,r8,48
   144b4:	4a000005 	stb	r8,0(r9)
   144b8:	880f883a 	mov	r7,r17
   144bc:	1009883a 	mov	r4,r2
   144c0:	180b883a 	mov	r5,r3
   144c4:	1029883a 	mov	r20,r2
   144c8:	1827883a 	mov	r19,r3
   144cc:	4d800044 	addi	r22,r9,1
   144d0:	00166b40 	call	166b4 <__ledf2>
   144d4:	10028a16 	blt	r2,zero,14f00 <_dtoa_r+0x1248>
   144d8:	a00d883a 	mov	r6,r20
   144dc:	980f883a 	mov	r7,r19
   144e0:	0009883a 	mov	r4,zero
   144e4:	014ffc34 	movhi	r5,16368
   144e8:	00170140 	call	17014 <__subdf3>
   144ec:	900d883a 	mov	r6,r18
   144f0:	880f883a 	mov	r7,r17
   144f4:	1009883a 	mov	r4,r2
   144f8:	180b883a 	mov	r5,r3
   144fc:	00166b40 	call	166b4 <__ledf2>
   14500:	1000a716 	blt	r2,zero,147a0 <_dtoa_r+0xae8>
   14504:	d8c00717 	ldw	r3,28(sp)
   14508:	d9000c17 	ldw	r4,48(sp)
   1450c:	b0c5c83a 	sub	r2,r22,r3
   14510:	11004f0e 	bge	r2,r4,14650 <_dtoa_r+0x998>
   14514:	9009883a 	mov	r4,r18
   14518:	880b883a 	mov	r5,r17
   1451c:	000d883a 	mov	r6,zero
   14520:	01d00934 	movhi	r7,16420
   14524:	00167a80 	call	167a8 <__muldf3>
   14528:	a009883a 	mov	r4,r20
   1452c:	000d883a 	mov	r6,zero
   14530:	01d00934 	movhi	r7,16420
   14534:	980b883a 	mov	r5,r19
   14538:	1025883a 	mov	r18,r2
   1453c:	1823883a 	mov	r17,r3
   14540:	00167a80 	call	167a8 <__muldf3>
   14544:	d8800e15 	stw	r2,56(sp)
   14548:	1829883a 	mov	r20,r3
   1454c:	b013883a 	mov	r9,r22
   14550:	003fc806 	br	14474 <_gp+0xffff2a24>
   14554:	11000017 	ldw	r4,0(r2)
   14558:	11400117 	ldw	r5,4(r2)
   1455c:	b00d883a 	mov	r6,r22
   14560:	900f883a 	mov	r7,r18
   14564:	00167a80 	call	167a8 <__muldf3>
   14568:	d8801115 	stw	r2,68(sp)
   1456c:	dcc00717 	ldw	r19,28(sp)
   14570:	d8800c17 	ldw	r2,48(sp)
   14574:	d8c01215 	stw	r3,72(sp)
   14578:	98ad883a 	add	r22,r19,r2
   1457c:	d9000e17 	ldw	r4,56(sp)
   14580:	a00b883a 	mov	r5,r20
   14584:	9cc00044 	addi	r19,r19,1
   14588:	00179100 	call	17910 <__fixdfsi>
   1458c:	1009883a 	mov	r4,r2
   14590:	d8801515 	stw	r2,84(sp)
   14594:	00179900 	call	17990 <__floatsidf>
   14598:	d9000e17 	ldw	r4,56(sp)
   1459c:	100d883a 	mov	r6,r2
   145a0:	180f883a 	mov	r7,r3
   145a4:	a00b883a 	mov	r5,r20
   145a8:	00170140 	call	17014 <__subdf3>
   145ac:	da401517 	ldw	r9,84(sp)
   145b0:	1025883a 	mov	r18,r2
   145b4:	1823883a 	mov	r17,r3
   145b8:	4a400c04 	addi	r9,r9,48
   145bc:	9a7fffc5 	stb	r9,-1(r19)
   145c0:	000d883a 	mov	r6,zero
   145c4:	b4c01b1e 	bne	r22,r19,14634 <_dtoa_r+0x97c>
   145c8:	d9001117 	ldw	r4,68(sp)
   145cc:	d9401217 	ldw	r5,72(sp)
   145d0:	01cff834 	movhi	r7,16352
   145d4:	00152d40 	call	152d4 <__adddf3>
   145d8:	100d883a 	mov	r6,r2
   145dc:	180f883a 	mov	r7,r3
   145e0:	9009883a 	mov	r4,r18
   145e4:	880b883a 	mov	r5,r17
   145e8:	00165d80 	call	165d8 <__gedf2>
   145ec:	00806c16 	blt	zero,r2,147a0 <_dtoa_r+0xae8>
   145f0:	d9801117 	ldw	r6,68(sp)
   145f4:	d9c01217 	ldw	r7,72(sp)
   145f8:	0009883a 	mov	r4,zero
   145fc:	014ff834 	movhi	r5,16352
   14600:	00170140 	call	17014 <__subdf3>
   14604:	100d883a 	mov	r6,r2
   14608:	180f883a 	mov	r7,r3
   1460c:	9009883a 	mov	r4,r18
   14610:	880b883a 	mov	r5,r17
   14614:	00166b40 	call	166b4 <__ledf2>
   14618:	10000d0e 	bge	r2,zero,14650 <_dtoa_r+0x998>
   1461c:	00c00c04 	movi	r3,48
   14620:	b0bfffc4 	addi	r2,r22,-1
   14624:	11000007 	ldb	r4,0(r2)
   14628:	20c2351e 	bne	r4,r3,14f00 <_dtoa_r+0x1248>
   1462c:	102d883a 	mov	r22,r2
   14630:	003ffb06 	br	14620 <_gp+0xffff2bd0>
   14634:	01d00934 	movhi	r7,16420
   14638:	1009883a 	mov	r4,r2
   1463c:	180b883a 	mov	r5,r3
   14640:	00167a80 	call	167a8 <__muldf3>
   14644:	d8800e15 	stw	r2,56(sp)
   14648:	1829883a 	mov	r20,r3
   1464c:	003fcb06 	br	1457c <_gp+0xffff2b2c>
   14650:	dcc01317 	ldw	r19,76(sp)
   14654:	d8800117 	ldw	r2,4(sp)
   14658:	10007116 	blt	r2,zero,14820 <_dtoa_r+0xb68>
   1465c:	00c00384 	movi	r3,14
   14660:	1f006f16 	blt	r3,fp,14820 <_dtoa_r+0xb68>
   14664:	e00490fa 	slli	r2,fp,3
   14668:	00c000b4 	movhi	r3,2
   1466c:	18e5a504 	addi	r3,r3,-26988
   14670:	1885883a 	add	r2,r3,r2
   14674:	d8c02017 	ldw	r3,128(sp)
   14678:	14400017 	ldw	r17,0(r2)
   1467c:	14800117 	ldw	r18,4(r2)
   14680:	1800110e 	bge	r3,zero,146c8 <_dtoa_r+0xa10>
   14684:	d9000417 	ldw	r4,16(sp)
   14688:	01000f16 	blt	zero,r4,146c8 <_dtoa_r+0xa10>
   1468c:	2001331e 	bne	r4,zero,14b5c <_dtoa_r+0xea4>
   14690:	8809883a 	mov	r4,r17
   14694:	900b883a 	mov	r5,r18
   14698:	000d883a 	mov	r6,zero
   1469c:	01d00534 	movhi	r7,16404
   146a0:	00167a80 	call	167a8 <__muldf3>
   146a4:	d9800917 	ldw	r6,36(sp)
   146a8:	980f883a 	mov	r7,r19
   146ac:	1009883a 	mov	r4,r2
   146b0:	180b883a 	mov	r5,r3
   146b4:	00165d80 	call	165d8 <__gedf2>
   146b8:	0025883a 	mov	r18,zero
   146bc:	0023883a 	mov	r17,zero
   146c0:	1001280e 	bge	r2,zero,14b64 <_dtoa_r+0xeac>
   146c4:	00012e06 	br	14b80 <_dtoa_r+0xec8>
   146c8:	d8c00417 	ldw	r3,16(sp)
   146cc:	dd400717 	ldw	r21,28(sp)
   146d0:	ddc00917 	ldw	r23,36(sp)
   146d4:	18bfffc4 	addi	r2,r3,-1
   146d8:	a885883a 	add	r2,r21,r2
   146dc:	d8800415 	stw	r2,16(sp)
   146e0:	880d883a 	mov	r6,r17
   146e4:	900f883a 	mov	r7,r18
   146e8:	b809883a 	mov	r4,r23
   146ec:	980b883a 	mov	r5,r19
   146f0:	0015b800 	call	15b80 <__divdf3>
   146f4:	180b883a 	mov	r5,r3
   146f8:	1009883a 	mov	r4,r2
   146fc:	00179100 	call	17910 <__fixdfsi>
   14700:	1009883a 	mov	r4,r2
   14704:	1029883a 	mov	r20,r2
   14708:	00179900 	call	17990 <__floatsidf>
   1470c:	880d883a 	mov	r6,r17
   14710:	900f883a 	mov	r7,r18
   14714:	1009883a 	mov	r4,r2
   14718:	180b883a 	mov	r5,r3
   1471c:	00167a80 	call	167a8 <__muldf3>
   14720:	b809883a 	mov	r4,r23
   14724:	100d883a 	mov	r6,r2
   14728:	180f883a 	mov	r7,r3
   1472c:	980b883a 	mov	r5,r19
   14730:	00170140 	call	17014 <__subdf3>
   14734:	a1000c04 	addi	r4,r20,48
   14738:	a9000005 	stb	r4,0(r21)
   1473c:	d9000417 	ldw	r4,16(sp)
   14740:	ad800044 	addi	r22,r21,1
   14744:	a900271e 	bne	r21,r4,147e4 <_dtoa_r+0xb2c>
   14748:	100d883a 	mov	r6,r2
   1474c:	180f883a 	mov	r7,r3
   14750:	1009883a 	mov	r4,r2
   14754:	180b883a 	mov	r5,r3
   14758:	00152d40 	call	152d4 <__adddf3>
   1475c:	100d883a 	mov	r6,r2
   14760:	180f883a 	mov	r7,r3
   14764:	8809883a 	mov	r4,r17
   14768:	900b883a 	mov	r5,r18
   1476c:	102b883a 	mov	r21,r2
   14770:	1827883a 	mov	r19,r3
   14774:	00166b40 	call	166b4 <__ledf2>
   14778:	10000a16 	blt	r2,zero,147a4 <_dtoa_r+0xaec>
   1477c:	a80d883a 	mov	r6,r21
   14780:	980f883a 	mov	r7,r19
   14784:	8809883a 	mov	r4,r17
   14788:	900b883a 	mov	r5,r18
   1478c:	00165500 	call	16550 <__eqdf2>
   14790:	1001dc1e 	bne	r2,zero,14f04 <_dtoa_r+0x124c>
   14794:	a500004c 	andi	r20,r20,1
   14798:	a000021e 	bne	r20,zero,147a4 <_dtoa_r+0xaec>
   1479c:	0001d906 	br	14f04 <_dtoa_r+0x124c>
   147a0:	a839883a 	mov	fp,r21
   147a4:	00c00e44 	movi	r3,57
   147a8:	b0bfffc4 	addi	r2,r22,-1
   147ac:	11000007 	ldb	r4,0(r2)
   147b0:	20c0081e 	bne	r4,r3,147d4 <_dtoa_r+0xb1c>
   147b4:	d9000717 	ldw	r4,28(sp)
   147b8:	2080041e 	bne	r4,r2,147cc <_dtoa_r+0xb14>
   147bc:	00c00c04 	movi	r3,48
   147c0:	e7000044 	addi	fp,fp,1
   147c4:	20c00005 	stb	r3,0(r4)
   147c8:	00000206 	br	147d4 <_dtoa_r+0xb1c>
   147cc:	102d883a 	mov	r22,r2
   147d0:	003ff506 	br	147a8 <_gp+0xffff2d58>
   147d4:	10c00003 	ldbu	r3,0(r2)
   147d8:	18c00044 	addi	r3,r3,1
   147dc:	10c00005 	stb	r3,0(r2)
   147e0:	0001c806 	br	14f04 <_dtoa_r+0x124c>
   147e4:	000d883a 	mov	r6,zero
   147e8:	01d00934 	movhi	r7,16420
   147ec:	1009883a 	mov	r4,r2
   147f0:	180b883a 	mov	r5,r3
   147f4:	00167a80 	call	167a8 <__muldf3>
   147f8:	000d883a 	mov	r6,zero
   147fc:	000f883a 	mov	r7,zero
   14800:	1009883a 	mov	r4,r2
   14804:	180b883a 	mov	r5,r3
   14808:	102f883a 	mov	r23,r2
   1480c:	1827883a 	mov	r19,r3
   14810:	b02b883a 	mov	r21,r22
   14814:	00165500 	call	16550 <__eqdf2>
   14818:	103fb11e 	bne	r2,zero,146e0 <_gp+0xffff2c90>
   1481c:	0001b906 	br	14f04 <_dtoa_r+0x124c>
   14820:	d8c00b17 	ldw	r3,44(sp)
   14824:	18002b26 	beq	r3,zero,148d4 <_dtoa_r+0xc1c>
   14828:	d9000817 	ldw	r4,32(sp)
   1482c:	00c00044 	movi	r3,1
   14830:	19000a16 	blt	r3,r4,1485c <_dtoa_r+0xba4>
   14834:	d8c01017 	ldw	r3,64(sp)
   14838:	18000226 	beq	r3,zero,14844 <_dtoa_r+0xb8c>
   1483c:	10810cc4 	addi	r2,r2,1075
   14840:	00000306 	br	14850 <_dtoa_r+0xb98>
   14844:	d8c00217 	ldw	r3,8(sp)
   14848:	00800d84 	movi	r2,54
   1484c:	10c5c83a 	sub	r2,r2,r3
   14850:	dc800a17 	ldw	r18,40(sp)
   14854:	dd000617 	ldw	r20,24(sp)
   14858:	00001506 	br	148b0 <_dtoa_r+0xbf8>
   1485c:	d9000417 	ldw	r4,16(sp)
   14860:	d8800a17 	ldw	r2,40(sp)
   14864:	24bfffc4 	addi	r18,r4,-1
   14868:	14800216 	blt	r2,r18,14874 <_dtoa_r+0xbbc>
   1486c:	14a5c83a 	sub	r18,r2,r18
   14870:	00000706 	br	14890 <_dtoa_r+0xbd8>
   14874:	d8c00a17 	ldw	r3,40(sp)
   14878:	d9000d17 	ldw	r4,52(sp)
   1487c:	dc800a15 	stw	r18,40(sp)
   14880:	90cdc83a 	sub	r6,r18,r3
   14884:	2189883a 	add	r4,r4,r6
   14888:	d9000d15 	stw	r4,52(sp)
   1488c:	0025883a 	mov	r18,zero
   14890:	d8800417 	ldw	r2,16(sp)
   14894:	1000040e 	bge	r2,zero,148a8 <_dtoa_r+0xbf0>
   14898:	d8c00617 	ldw	r3,24(sp)
   1489c:	18a9c83a 	sub	r20,r3,r2
   148a0:	0005883a 	mov	r2,zero
   148a4:	00000206 	br	148b0 <_dtoa_r+0xbf8>
   148a8:	dd000617 	ldw	r20,24(sp)
   148ac:	d8800417 	ldw	r2,16(sp)
   148b0:	d9000617 	ldw	r4,24(sp)
   148b4:	01400044 	movi	r5,1
   148b8:	b8af883a 	add	r23,r23,r2
   148bc:	2089883a 	add	r4,r4,r2
   148c0:	d9000615 	stw	r4,24(sp)
   148c4:	8009883a 	mov	r4,r16
   148c8:	0012bfc0 	call	12bfc <__i2b>
   148cc:	1023883a 	mov	r17,r2
   148d0:	00000306 	br	148e0 <_dtoa_r+0xc28>
   148d4:	dc800a17 	ldw	r18,40(sp)
   148d8:	dd000617 	ldw	r20,24(sp)
   148dc:	0023883a 	mov	r17,zero
   148e0:	a0000926 	beq	r20,zero,14908 <_dtoa_r+0xc50>
   148e4:	05c0080e 	bge	zero,r23,14908 <_dtoa_r+0xc50>
   148e8:	a005883a 	mov	r2,r20
   148ec:	bd00010e 	bge	r23,r20,148f4 <_dtoa_r+0xc3c>
   148f0:	b805883a 	mov	r2,r23
   148f4:	d8c00617 	ldw	r3,24(sp)
   148f8:	a0a9c83a 	sub	r20,r20,r2
   148fc:	b8afc83a 	sub	r23,r23,r2
   14900:	1887c83a 	sub	r3,r3,r2
   14904:	d8c00615 	stw	r3,24(sp)
   14908:	d9000a17 	ldw	r4,40(sp)
   1490c:	01001a0e 	bge	zero,r4,14978 <_dtoa_r+0xcc0>
   14910:	d8800b17 	ldw	r2,44(sp)
   14914:	10001326 	beq	r2,zero,14964 <_dtoa_r+0xcac>
   14918:	90000e26 	beq	r18,zero,14954 <_dtoa_r+0xc9c>
   1491c:	880b883a 	mov	r5,r17
   14920:	900d883a 	mov	r6,r18
   14924:	8009883a 	mov	r4,r16
   14928:	0012eb00 	call	12eb0 <__pow5mult>
   1492c:	d9800317 	ldw	r6,12(sp)
   14930:	100b883a 	mov	r5,r2
   14934:	8009883a 	mov	r4,r16
   14938:	1023883a 	mov	r17,r2
   1493c:	0012c380 	call	12c38 <__multiply>
   14940:	d9400317 	ldw	r5,12(sp)
   14944:	102b883a 	mov	r21,r2
   14948:	8009883a 	mov	r4,r16
   1494c:	001283c0 	call	1283c <_Bfree>
   14950:	dd400315 	stw	r21,12(sp)
   14954:	d8c00a17 	ldw	r3,40(sp)
   14958:	1c8dc83a 	sub	r6,r3,r18
   1495c:	30000626 	beq	r6,zero,14978 <_dtoa_r+0xcc0>
   14960:	00000106 	br	14968 <_dtoa_r+0xcb0>
   14964:	d9800a17 	ldw	r6,40(sp)
   14968:	d9400317 	ldw	r5,12(sp)
   1496c:	8009883a 	mov	r4,r16
   14970:	0012eb00 	call	12eb0 <__pow5mult>
   14974:	d8800315 	stw	r2,12(sp)
   14978:	05400044 	movi	r21,1
   1497c:	8009883a 	mov	r4,r16
   14980:	a80b883a 	mov	r5,r21
   14984:	0012bfc0 	call	12bfc <__i2b>
   14988:	d9000d17 	ldw	r4,52(sp)
   1498c:	1025883a 	mov	r18,r2
   14990:	20016c26 	beq	r4,zero,14f44 <_dtoa_r+0x128c>
   14994:	200d883a 	mov	r6,r4
   14998:	100b883a 	mov	r5,r2
   1499c:	8009883a 	mov	r4,r16
   149a0:	0012eb00 	call	12eb0 <__pow5mult>
   149a4:	1025883a 	mov	r18,r2
   149a8:	d8800817 	ldw	r2,32(sp)
   149ac:	a8801216 	blt	r21,r2,149f8 <_dtoa_r+0xd40>
   149b0:	d8c00917 	ldw	r3,36(sp)
   149b4:	18000c1e 	bne	r3,zero,149e8 <_dtoa_r+0xd30>
   149b8:	00800434 	movhi	r2,16
   149bc:	10bfffc4 	addi	r2,r2,-1
   149c0:	9884703a 	and	r2,r19,r2
   149c4:	1000081e 	bne	r2,zero,149e8 <_dtoa_r+0xd30>
   149c8:	9cdffc2c 	andhi	r19,r19,32752
   149cc:	98000626 	beq	r19,zero,149e8 <_dtoa_r+0xd30>
   149d0:	d9000617 	ldw	r4,24(sp)
   149d4:	bdc00044 	addi	r23,r23,1
   149d8:	04c00044 	movi	r19,1
   149dc:	21000044 	addi	r4,r4,1
   149e0:	d9000615 	stw	r4,24(sp)
   149e4:	00000106 	br	149ec <_dtoa_r+0xd34>
   149e8:	0027883a 	mov	r19,zero
   149ec:	d8800d17 	ldw	r2,52(sp)
   149f0:	10000c26 	beq	r2,zero,14a24 <_dtoa_r+0xd6c>
   149f4:	00000106 	br	149fc <_dtoa_r+0xd44>
   149f8:	0027883a 	mov	r19,zero
   149fc:	90800417 	ldw	r2,16(r18)
   14a00:	05400804 	movi	r21,32
   14a04:	10800104 	addi	r2,r2,4
   14a08:	1085883a 	add	r2,r2,r2
   14a0c:	1085883a 	add	r2,r2,r2
   14a10:	9085883a 	add	r2,r18,r2
   14a14:	11000017 	ldw	r4,0(r2)
   14a18:	0012ae40 	call	12ae4 <__hi0bits>
   14a1c:	a885c83a 	sub	r2,r21,r2
   14a20:	00000106 	br	14a28 <_dtoa_r+0xd70>
   14a24:	00800044 	movi	r2,1
   14a28:	15eb883a 	add	r21,r2,r23
   14a2c:	a88007cc 	andi	r2,r21,31
   14a30:	10000c26 	beq	r2,zero,14a64 <_dtoa_r+0xdac>
   14a34:	00c00804 	movi	r3,32
   14a38:	1887c83a 	sub	r3,r3,r2
   14a3c:	01000104 	movi	r4,4
   14a40:	20c0060e 	bge	r4,r3,14a5c <_dtoa_r+0xda4>
   14a44:	00c00704 	movi	r3,28
   14a48:	1885c83a 	sub	r2,r3,r2
   14a4c:	d8c00617 	ldw	r3,24(sp)
   14a50:	1887883a 	add	r3,r3,r2
   14a54:	d8c00615 	stw	r3,24(sp)
   14a58:	00000606 	br	14a74 <_dtoa_r+0xdbc>
   14a5c:	19000726 	beq	r3,r4,14a7c <_dtoa_r+0xdc4>
   14a60:	1805883a 	mov	r2,r3
   14a64:	d9000617 	ldw	r4,24(sp)
   14a68:	10800704 	addi	r2,r2,28
   14a6c:	2089883a 	add	r4,r4,r2
   14a70:	d9000615 	stw	r4,24(sp)
   14a74:	a0a9883a 	add	r20,r20,r2
   14a78:	b8af883a 	add	r23,r23,r2
   14a7c:	d8800617 	ldw	r2,24(sp)
   14a80:	0080050e 	bge	zero,r2,14a98 <_dtoa_r+0xde0>
   14a84:	d9400317 	ldw	r5,12(sp)
   14a88:	100d883a 	mov	r6,r2
   14a8c:	8009883a 	mov	r4,r16
   14a90:	0012fe40 	call	12fe4 <__lshift>
   14a94:	d8800315 	stw	r2,12(sp)
   14a98:	05c0050e 	bge	zero,r23,14ab0 <_dtoa_r+0xdf8>
   14a9c:	900b883a 	mov	r5,r18
   14aa0:	b80d883a 	mov	r6,r23
   14aa4:	8009883a 	mov	r4,r16
   14aa8:	0012fe40 	call	12fe4 <__lshift>
   14aac:	1025883a 	mov	r18,r2
   14ab0:	d8c00f17 	ldw	r3,60(sp)
   14ab4:	18001626 	beq	r3,zero,14b10 <_dtoa_r+0xe58>
   14ab8:	d9000317 	ldw	r4,12(sp)
   14abc:	900b883a 	mov	r5,r18
   14ac0:	001312c0 	call	1312c <__mcmp>
   14ac4:	1000120e 	bge	r2,zero,14b10 <_dtoa_r+0xe58>
   14ac8:	d9400317 	ldw	r5,12(sp)
   14acc:	8009883a 	mov	r4,r16
   14ad0:	000f883a 	mov	r7,zero
   14ad4:	01800284 	movi	r6,10
   14ad8:	00128b40 	call	128b4 <__multadd>
   14adc:	d9000b17 	ldw	r4,44(sp)
   14ae0:	d8800315 	stw	r2,12(sp)
   14ae4:	e73fffc4 	addi	fp,fp,-1
   14ae8:	20011b26 	beq	r4,zero,14f58 <_dtoa_r+0x12a0>
   14aec:	880b883a 	mov	r5,r17
   14af0:	000f883a 	mov	r7,zero
   14af4:	01800284 	movi	r6,10
   14af8:	8009883a 	mov	r4,r16
   14afc:	00128b40 	call	128b4 <__multadd>
   14b00:	1023883a 	mov	r17,r2
   14b04:	d8800517 	ldw	r2,20(sp)
   14b08:	00802d16 	blt	zero,r2,14bc0 <_dtoa_r+0xf08>
   14b0c:	00011806 	br	14f70 <_dtoa_r+0x12b8>
   14b10:	d8c00417 	ldw	r3,16(sp)
   14b14:	00c02216 	blt	zero,r3,14ba0 <_dtoa_r+0xee8>
   14b18:	d9000817 	ldw	r4,32(sp)
   14b1c:	00800084 	movi	r2,2
   14b20:	11001f0e 	bge	r2,r4,14ba0 <_dtoa_r+0xee8>
   14b24:	d8c00515 	stw	r3,20(sp)
   14b28:	d8800517 	ldw	r2,20(sp)
   14b2c:	10000d1e 	bne	r2,zero,14b64 <_dtoa_r+0xeac>
   14b30:	900b883a 	mov	r5,r18
   14b34:	8009883a 	mov	r4,r16
   14b38:	000f883a 	mov	r7,zero
   14b3c:	01800144 	movi	r6,5
   14b40:	00128b40 	call	128b4 <__multadd>
   14b44:	d9000317 	ldw	r4,12(sp)
   14b48:	100b883a 	mov	r5,r2
   14b4c:	1025883a 	mov	r18,r2
   14b50:	001312c0 	call	1312c <__mcmp>
   14b54:	00800a16 	blt	zero,r2,14b80 <_dtoa_r+0xec8>
   14b58:	00000206 	br	14b64 <_dtoa_r+0xeac>
   14b5c:	0025883a 	mov	r18,zero
   14b60:	0023883a 	mov	r17,zero
   14b64:	d8c02017 	ldw	r3,128(sp)
   14b68:	dd800717 	ldw	r22,28(sp)
   14b6c:	00f8303a 	nor	fp,zero,r3
   14b70:	00000806 	br	14b94 <_dtoa_r+0xedc>
   14b74:	a839883a 	mov	fp,r21
   14b78:	0025883a 	mov	r18,zero
   14b7c:	0023883a 	mov	r17,zero
   14b80:	d9000717 	ldw	r4,28(sp)
   14b84:	00800c44 	movi	r2,49
   14b88:	e7000044 	addi	fp,fp,1
   14b8c:	25800044 	addi	r22,r4,1
   14b90:	20800005 	stb	r2,0(r4)
   14b94:	8827883a 	mov	r19,r17
   14b98:	0023883a 	mov	r17,zero
   14b9c:	0000cb06 	br	14ecc <_dtoa_r+0x1214>
   14ba0:	d8800b17 	ldw	r2,44(sp)
   14ba4:	1000041e 	bne	r2,zero,14bb8 <_dtoa_r+0xf00>
   14ba8:	d8c00417 	ldw	r3,16(sp)
   14bac:	d8c00515 	stw	r3,20(sp)
   14bb0:	dcc00717 	ldw	r19,28(sp)
   14bb4:	00009006 	br	14df8 <_dtoa_r+0x1140>
   14bb8:	d9000417 	ldw	r4,16(sp)
   14bbc:	d9000515 	stw	r4,20(sp)
   14bc0:	0500050e 	bge	zero,r20,14bd8 <_dtoa_r+0xf20>
   14bc4:	880b883a 	mov	r5,r17
   14bc8:	a00d883a 	mov	r6,r20
   14bcc:	8009883a 	mov	r4,r16
   14bd0:	0012fe40 	call	12fe4 <__lshift>
   14bd4:	1023883a 	mov	r17,r2
   14bd8:	98001126 	beq	r19,zero,14c20 <_dtoa_r+0xf68>
   14bdc:	89400117 	ldw	r5,4(r17)
   14be0:	8009883a 	mov	r4,r16
   14be4:	00127580 	call	12758 <_Balloc>
   14be8:	89800417 	ldw	r6,16(r17)
   14bec:	89400304 	addi	r5,r17,12
   14bf0:	11000304 	addi	r4,r2,12
   14bf4:	31800084 	addi	r6,r6,2
   14bf8:	318d883a 	add	r6,r6,r6
   14bfc:	318d883a 	add	r6,r6,r6
   14c00:	1027883a 	mov	r19,r2
   14c04:	0014fd80 	call	14fd8 <memcpy>
   14c08:	980b883a 	mov	r5,r19
   14c0c:	01800044 	movi	r6,1
   14c10:	8009883a 	mov	r4,r16
   14c14:	0012fe40 	call	12fe4 <__lshift>
   14c18:	1027883a 	mov	r19,r2
   14c1c:	00000106 	br	14c24 <_dtoa_r+0xf6c>
   14c20:	8827883a 	mov	r19,r17
   14c24:	d8800517 	ldw	r2,20(sp)
   14c28:	ddc00717 	ldw	r23,28(sp)
   14c2c:	d8c00917 	ldw	r3,36(sp)
   14c30:	157fffc4 	addi	r21,r2,-1
   14c34:	bd6b883a 	add	r21,r23,r21
   14c38:	18c0004c 	andi	r3,r3,1
   14c3c:	dd400615 	stw	r21,24(sp)
   14c40:	d8c00515 	stw	r3,20(sp)
   14c44:	d9000317 	ldw	r4,12(sp)
   14c48:	900b883a 	mov	r5,r18
   14c4c:	0013a980 	call	13a98 <quorem>
   14c50:	d9000317 	ldw	r4,12(sp)
   14c54:	880b883a 	mov	r5,r17
   14c58:	102d883a 	mov	r22,r2
   14c5c:	15400c04 	addi	r21,r2,48
   14c60:	001312c0 	call	1312c <__mcmp>
   14c64:	980d883a 	mov	r6,r19
   14c68:	900b883a 	mov	r5,r18
   14c6c:	8009883a 	mov	r4,r16
   14c70:	d8800415 	stw	r2,16(sp)
   14c74:	00131880 	call	13188 <__mdiff>
   14c78:	1029883a 	mov	r20,r2
   14c7c:	10800317 	ldw	r2,12(r2)
   14c80:	1000041e 	bne	r2,zero,14c94 <_dtoa_r+0xfdc>
   14c84:	d9000317 	ldw	r4,12(sp)
   14c88:	a00b883a 	mov	r5,r20
   14c8c:	001312c0 	call	1312c <__mcmp>
   14c90:	00000106 	br	14c98 <_dtoa_r+0xfe0>
   14c94:	00800044 	movi	r2,1
   14c98:	a00b883a 	mov	r5,r20
   14c9c:	8009883a 	mov	r4,r16
   14ca0:	d8801415 	stw	r2,80(sp)
   14ca4:	001283c0 	call	1283c <_Bfree>
   14ca8:	d8801417 	ldw	r2,80(sp)
   14cac:	bd000044 	addi	r20,r23,1
   14cb0:	1000091e 	bne	r2,zero,14cd8 <_dtoa_r+0x1020>
   14cb4:	d9000817 	ldw	r4,32(sp)
   14cb8:	2000071e 	bne	r4,zero,14cd8 <_dtoa_r+0x1020>
   14cbc:	d8c00517 	ldw	r3,20(sp)
   14cc0:	1800051e 	bne	r3,zero,14cd8 <_dtoa_r+0x1020>
   14cc4:	00800e44 	movi	r2,57
   14cc8:	a8802026 	beq	r21,r2,14d4c <_dtoa_r+0x1094>
   14ccc:	d8c00417 	ldw	r3,16(sp)
   14cd0:	00c01716 	blt	zero,r3,14d30 <_dtoa_r+0x1078>
   14cd4:	00001706 	br	14d34 <_dtoa_r+0x107c>
   14cd8:	d8c00417 	ldw	r3,16(sp)
   14cdc:	18000516 	blt	r3,zero,14cf4 <_dtoa_r+0x103c>
   14ce0:	1800171e 	bne	r3,zero,14d40 <_dtoa_r+0x1088>
   14ce4:	d9000817 	ldw	r4,32(sp)
   14ce8:	2000151e 	bne	r4,zero,14d40 <_dtoa_r+0x1088>
   14cec:	d8c00517 	ldw	r3,20(sp)
   14cf0:	1800131e 	bne	r3,zero,14d40 <_dtoa_r+0x1088>
   14cf4:	00800f0e 	bge	zero,r2,14d34 <_dtoa_r+0x107c>
   14cf8:	d9400317 	ldw	r5,12(sp)
   14cfc:	8009883a 	mov	r4,r16
   14d00:	01800044 	movi	r6,1
   14d04:	0012fe40 	call	12fe4 <__lshift>
   14d08:	900b883a 	mov	r5,r18
   14d0c:	1009883a 	mov	r4,r2
   14d10:	d8800315 	stw	r2,12(sp)
   14d14:	001312c0 	call	1312c <__mcmp>
   14d18:	00800316 	blt	zero,r2,14d28 <_dtoa_r+0x1070>
   14d1c:	1000051e 	bne	r2,zero,14d34 <_dtoa_r+0x107c>
   14d20:	a880004c 	andi	r2,r21,1
   14d24:	10000326 	beq	r2,zero,14d34 <_dtoa_r+0x107c>
   14d28:	00800e44 	movi	r2,57
   14d2c:	a8800726 	beq	r21,r2,14d4c <_dtoa_r+0x1094>
   14d30:	b5400c44 	addi	r21,r22,49
   14d34:	a02d883a 	mov	r22,r20
   14d38:	bd400005 	stb	r21,0(r23)
   14d3c:	00006306 	br	14ecc <_dtoa_r+0x1214>
   14d40:	00800a0e 	bge	zero,r2,14d6c <_dtoa_r+0x10b4>
   14d44:	00800e44 	movi	r2,57
   14d48:	a880041e 	bne	r21,r2,14d5c <_dtoa_r+0x10a4>
   14d4c:	00800e44 	movi	r2,57
   14d50:	a02d883a 	mov	r22,r20
   14d54:	b8800005 	stb	r2,0(r23)
   14d58:	00004406 	br	14e6c <_dtoa_r+0x11b4>
   14d5c:	a8c00044 	addi	r3,r21,1
   14d60:	a02d883a 	mov	r22,r20
   14d64:	b8c00005 	stb	r3,0(r23)
   14d68:	00005806 	br	14ecc <_dtoa_r+0x1214>
   14d6c:	d8c00617 	ldw	r3,24(sp)
   14d70:	bd400005 	stb	r21,0(r23)
   14d74:	a02d883a 	mov	r22,r20
   14d78:	b8c03026 	beq	r23,r3,14e3c <_dtoa_r+0x1184>
   14d7c:	d9400317 	ldw	r5,12(sp)
   14d80:	000f883a 	mov	r7,zero
   14d84:	01800284 	movi	r6,10
   14d88:	8009883a 	mov	r4,r16
   14d8c:	00128b40 	call	128b4 <__multadd>
   14d90:	d8800315 	stw	r2,12(sp)
   14d94:	000f883a 	mov	r7,zero
   14d98:	01800284 	movi	r6,10
   14d9c:	880b883a 	mov	r5,r17
   14da0:	8009883a 	mov	r4,r16
   14da4:	8cc0041e 	bne	r17,r19,14db8 <_dtoa_r+0x1100>
   14da8:	00128b40 	call	128b4 <__multadd>
   14dac:	1023883a 	mov	r17,r2
   14db0:	1027883a 	mov	r19,r2
   14db4:	00000806 	br	14dd8 <_dtoa_r+0x1120>
   14db8:	00128b40 	call	128b4 <__multadd>
   14dbc:	980b883a 	mov	r5,r19
   14dc0:	000f883a 	mov	r7,zero
   14dc4:	01800284 	movi	r6,10
   14dc8:	8009883a 	mov	r4,r16
   14dcc:	1023883a 	mov	r17,r2
   14dd0:	00128b40 	call	128b4 <__multadd>
   14dd4:	1027883a 	mov	r19,r2
   14dd8:	a02f883a 	mov	r23,r20
   14ddc:	003f9906 	br	14c44 <_gp+0xffff31f4>
   14de0:	d9400317 	ldw	r5,12(sp)
   14de4:	000f883a 	mov	r7,zero
   14de8:	01800284 	movi	r6,10
   14dec:	8009883a 	mov	r4,r16
   14df0:	00128b40 	call	128b4 <__multadd>
   14df4:	d8800315 	stw	r2,12(sp)
   14df8:	d9000317 	ldw	r4,12(sp)
   14dfc:	900b883a 	mov	r5,r18
   14e00:	9cc00044 	addi	r19,r19,1
   14e04:	0013a980 	call	13a98 <quorem>
   14e08:	d9000717 	ldw	r4,28(sp)
   14e0c:	15400c04 	addi	r21,r2,48
   14e10:	d8c00517 	ldw	r3,20(sp)
   14e14:	9d7fffc5 	stb	r21,-1(r19)
   14e18:	9905c83a 	sub	r2,r19,r4
   14e1c:	10fff016 	blt	r2,r3,14de0 <_gp+0xffff3390>
   14e20:	182d883a 	mov	r22,r3
   14e24:	00c00116 	blt	zero,r3,14e2c <_dtoa_r+0x1174>
   14e28:	05800044 	movi	r22,1
   14e2c:	d9000717 	ldw	r4,28(sp)
   14e30:	8827883a 	mov	r19,r17
   14e34:	0023883a 	mov	r17,zero
   14e38:	25ad883a 	add	r22,r4,r22
   14e3c:	d9400317 	ldw	r5,12(sp)
   14e40:	8009883a 	mov	r4,r16
   14e44:	01800044 	movi	r6,1
   14e48:	0012fe40 	call	12fe4 <__lshift>
   14e4c:	900b883a 	mov	r5,r18
   14e50:	1009883a 	mov	r4,r2
   14e54:	d8800315 	stw	r2,12(sp)
   14e58:	001312c0 	call	1312c <__mcmp>
   14e5c:	00800316 	blt	zero,r2,14e6c <_dtoa_r+0x11b4>
   14e60:	1000141e 	bne	r2,zero,14eb4 <_dtoa_r+0x11fc>
   14e64:	a8c0004c 	andi	r3,r21,1
   14e68:	18001226 	beq	r3,zero,14eb4 <_dtoa_r+0x11fc>
   14e6c:	01000e44 	movi	r4,57
   14e70:	b0bfffc4 	addi	r2,r22,-1
   14e74:	10c00003 	ldbu	r3,0(r2)
   14e78:	19403fcc 	andi	r5,r3,255
   14e7c:	2940201c 	xori	r5,r5,128
   14e80:	297fe004 	addi	r5,r5,-128
   14e84:	2900081e 	bne	r5,r4,14ea8 <_dtoa_r+0x11f0>
   14e88:	d8c00717 	ldw	r3,28(sp)
   14e8c:	1880041e 	bne	r3,r2,14ea0 <_dtoa_r+0x11e8>
   14e90:	00800c44 	movi	r2,49
   14e94:	e7000044 	addi	fp,fp,1
   14e98:	18800005 	stb	r2,0(r3)
   14e9c:	00000b06 	br	14ecc <_dtoa_r+0x1214>
   14ea0:	102d883a 	mov	r22,r2
   14ea4:	003ff206 	br	14e70 <_gp+0xffff3420>
   14ea8:	18c00044 	addi	r3,r3,1
   14eac:	10c00005 	stb	r3,0(r2)
   14eb0:	00000606 	br	14ecc <_dtoa_r+0x1214>
   14eb4:	00c00c04 	movi	r3,48
   14eb8:	b0bfffc4 	addi	r2,r22,-1
   14ebc:	11000007 	ldb	r4,0(r2)
   14ec0:	20c0021e 	bne	r4,r3,14ecc <_dtoa_r+0x1214>
   14ec4:	102d883a 	mov	r22,r2
   14ec8:	003ffb06 	br	14eb8 <_gp+0xffff3468>
   14ecc:	900b883a 	mov	r5,r18
   14ed0:	8009883a 	mov	r4,r16
   14ed4:	001283c0 	call	1283c <_Bfree>
   14ed8:	98000a26 	beq	r19,zero,14f04 <_dtoa_r+0x124c>
   14edc:	88000426 	beq	r17,zero,14ef0 <_dtoa_r+0x1238>
   14ee0:	8cc00326 	beq	r17,r19,14ef0 <_dtoa_r+0x1238>
   14ee4:	880b883a 	mov	r5,r17
   14ee8:	8009883a 	mov	r4,r16
   14eec:	001283c0 	call	1283c <_Bfree>
   14ef0:	980b883a 	mov	r5,r19
   14ef4:	8009883a 	mov	r4,r16
   14ef8:	001283c0 	call	1283c <_Bfree>
   14efc:	00000106 	br	14f04 <_dtoa_r+0x124c>
   14f00:	a839883a 	mov	fp,r21
   14f04:	d9400317 	ldw	r5,12(sp)
   14f08:	8009883a 	mov	r4,r16
   14f0c:	001283c0 	call	1283c <_Bfree>
   14f10:	d9002117 	ldw	r4,132(sp)
   14f14:	e0800044 	addi	r2,fp,1
   14f18:	b0000005 	stb	zero,0(r22)
   14f1c:	20800015 	stw	r2,0(r4)
   14f20:	d8802317 	ldw	r2,140(sp)
   14f24:	10000526 	beq	r2,zero,14f3c <_dtoa_r+0x1284>
   14f28:	15800015 	stw	r22,0(r2)
   14f2c:	00000306 	br	14f3c <_dtoa_r+0x1284>
   14f30:	008000b4 	movhi	r2,2
   14f34:	10a5db04 	addi	r2,r2,-26772
   14f38:	00001106 	br	14f80 <_dtoa_r+0x12c8>
   14f3c:	d8800717 	ldw	r2,28(sp)
   14f40:	00000f06 	br	14f80 <_dtoa_r+0x12c8>
   14f44:	d8c00817 	ldw	r3,32(sp)
   14f48:	a8fe990e 	bge	r21,r3,149b0 <_gp+0xffff2f60>
   14f4c:	0027883a 	mov	r19,zero
   14f50:	a805883a 	mov	r2,r21
   14f54:	003eb406 	br	14a28 <_gp+0xffff2fd8>
   14f58:	d9000517 	ldw	r4,20(sp)
   14f5c:	013f1416 	blt	zero,r4,14bb0 <_gp+0xffff3160>
   14f60:	d8c00817 	ldw	r3,32(sp)
   14f64:	00800084 	movi	r2,2
   14f68:	10ff110e 	bge	r2,r3,14bb0 <_gp+0xffff3160>
   14f6c:	003eee06 	br	14b28 <_gp+0xffff30d8>
   14f70:	d9000817 	ldw	r4,32(sp)
   14f74:	00800084 	movi	r2,2
   14f78:	113f110e 	bge	r2,r4,14bc0 <_gp+0xffff3170>
   14f7c:	003eea06 	br	14b28 <_gp+0xffff30d8>
   14f80:	dfc01f17 	ldw	ra,124(sp)
   14f84:	df001e17 	ldw	fp,120(sp)
   14f88:	ddc01d17 	ldw	r23,116(sp)
   14f8c:	dd801c17 	ldw	r22,112(sp)
   14f90:	dd401b17 	ldw	r21,108(sp)
   14f94:	dd001a17 	ldw	r20,104(sp)
   14f98:	dcc01917 	ldw	r19,100(sp)
   14f9c:	dc801817 	ldw	r18,96(sp)
   14fa0:	dc401717 	ldw	r17,92(sp)
   14fa4:	dc001617 	ldw	r16,88(sp)
   14fa8:	dec02004 	addi	sp,sp,128
   14fac:	f800283a 	ret

00014fb0 <malloc>:
   14fb0:	008000b4 	movhi	r2,2
   14fb4:	10a69504 	addi	r2,r2,-26028
   14fb8:	200b883a 	mov	r5,r4
   14fbc:	11000017 	ldw	r4,0(r2)
   14fc0:	00137c81 	jmpi	137c8 <_malloc_r>

00014fc4 <free>:
   14fc4:	008000b4 	movhi	r2,2
   14fc8:	10a69504 	addi	r2,r2,-26028
   14fcc:	200b883a 	mov	r5,r4
   14fd0:	11000017 	ldw	r4,0(r2)
   14fd4:	00150201 	jmpi	15020 <_free_r>

00014fd8 <memcpy>:
   14fd8:	2005883a 	mov	r2,r4
   14fdc:	2007883a 	mov	r3,r4
   14fe0:	218d883a 	add	r6,r4,r6
   14fe4:	19800526 	beq	r3,r6,14ffc <memcpy+0x24>
   14fe8:	29000003 	ldbu	r4,0(r5)
   14fec:	18c00044 	addi	r3,r3,1
   14ff0:	29400044 	addi	r5,r5,1
   14ff4:	193fffc5 	stb	r4,-1(r3)
   14ff8:	003ffa06 	br	14fe4 <_gp+0xffff3594>
   14ffc:	f800283a 	ret

00015000 <memset>:
   15000:	2005883a 	mov	r2,r4
   15004:	2007883a 	mov	r3,r4
   15008:	218d883a 	add	r6,r4,r6
   1500c:	19800326 	beq	r3,r6,1501c <memset+0x1c>
   15010:	19400005 	stb	r5,0(r3)
   15014:	18c00044 	addi	r3,r3,1
   15018:	003ffc06 	br	1500c <_gp+0xffff35bc>
   1501c:	f800283a 	ret

00015020 <_free_r>:
   15020:	28003726 	beq	r5,zero,15100 <_free_r+0xe0>
   15024:	28ffff17 	ldw	r3,-4(r5)
   15028:	28bfff04 	addi	r2,r5,-4
   1502c:	1800010e 	bge	r3,zero,15034 <_free_r+0x14>
   15030:	10c5883a 	add	r2,r2,r3
   15034:	014000b4 	movhi	r5,2
   15038:	29675a04 	addi	r5,r5,-25240
   1503c:	28c00017 	ldw	r3,0(r5)
   15040:	280d883a 	mov	r6,r5
   15044:	1800031e 	bne	r3,zero,15054 <_free_r+0x34>
   15048:	10000115 	stw	zero,4(r2)
   1504c:	28800015 	stw	r2,0(r5)
   15050:	f800283a 	ret
   15054:	10c00c2e 	bgeu	r2,r3,15088 <_free_r+0x68>
   15058:	11000017 	ldw	r4,0(r2)
   1505c:	110b883a 	add	r5,r2,r4
   15060:	1940041e 	bne	r3,r5,15074 <_free_r+0x54>
   15064:	19400017 	ldw	r5,0(r3)
   15068:	18c00117 	ldw	r3,4(r3)
   1506c:	2909883a 	add	r4,r5,r4
   15070:	11000015 	stw	r4,0(r2)
   15074:	10c00115 	stw	r3,4(r2)
   15078:	30800015 	stw	r2,0(r6)
   1507c:	f800283a 	ret
   15080:	11400336 	bltu	r2,r5,15090 <_free_r+0x70>
   15084:	2807883a 	mov	r3,r5
   15088:	19400117 	ldw	r5,4(r3)
   1508c:	283ffc1e 	bne	r5,zero,15080 <_gp+0xffff3630>
   15090:	19c00017 	ldw	r7,0(r3)
   15094:	19cd883a 	add	r6,r3,r7
   15098:	30800a1e 	bne	r6,r2,150c4 <_free_r+0xa4>
   1509c:	10800017 	ldw	r2,0(r2)
   150a0:	3885883a 	add	r2,r7,r2
   150a4:	18800015 	stw	r2,0(r3)
   150a8:	1889883a 	add	r4,r3,r2
   150ac:	2900141e 	bne	r5,r4,15100 <_free_r+0xe0>
   150b0:	29000017 	ldw	r4,0(r5)
   150b4:	2085883a 	add	r2,r4,r2
   150b8:	18800015 	stw	r2,0(r3)
   150bc:	28800117 	ldw	r2,4(r5)
   150c0:	00000e06 	br	150fc <_free_r+0xdc>
   150c4:	1180032e 	bgeu	r2,r6,150d4 <_free_r+0xb4>
   150c8:	00800304 	movi	r2,12
   150cc:	20800015 	stw	r2,0(r4)
   150d0:	f800283a 	ret
   150d4:	11000017 	ldw	r4,0(r2)
   150d8:	110d883a 	add	r6,r2,r4
   150dc:	2980061e 	bne	r5,r6,150f8 <_free_r+0xd8>
   150e0:	29800017 	ldw	r6,0(r5)
   150e4:	3109883a 	add	r4,r6,r4
   150e8:	11000015 	stw	r4,0(r2)
   150ec:	29000117 	ldw	r4,4(r5)
   150f0:	11000115 	stw	r4,4(r2)
   150f4:	00000106 	br	150fc <_free_r+0xdc>
   150f8:	11400115 	stw	r5,4(r2)
   150fc:	18800115 	stw	r2,4(r3)
   15100:	f800283a 	ret

00015104 <_malloc_usable_size_r>:
   15104:	28bfff17 	ldw	r2,-4(r5)
   15108:	1000030e 	bge	r2,zero,15118 <_malloc_usable_size_r+0x14>
   1510c:	288b883a 	add	r5,r5,r2
   15110:	28ffff17 	ldw	r3,-4(r5)
   15114:	10c5883a 	add	r2,r2,r3
   15118:	10bfff04 	addi	r2,r2,-4
   1511c:	f800283a 	ret

00015120 <__divsi3>:
   15120:	20001b16 	blt	r4,zero,15190 <__divsi3+0x70>
   15124:	000f883a 	mov	r7,zero
   15128:	28001616 	blt	r5,zero,15184 <__divsi3+0x64>
   1512c:	200d883a 	mov	r6,r4
   15130:	29001a2e 	bgeu	r5,r4,1519c <__divsi3+0x7c>
   15134:	00800804 	movi	r2,32
   15138:	00c00044 	movi	r3,1
   1513c:	00000106 	br	15144 <__divsi3+0x24>
   15140:	10000d26 	beq	r2,zero,15178 <__divsi3+0x58>
   15144:	294b883a 	add	r5,r5,r5
   15148:	10bfffc4 	addi	r2,r2,-1
   1514c:	18c7883a 	add	r3,r3,r3
   15150:	293ffb36 	bltu	r5,r4,15140 <_gp+0xffff36f0>
   15154:	0005883a 	mov	r2,zero
   15158:	18000726 	beq	r3,zero,15178 <__divsi3+0x58>
   1515c:	0005883a 	mov	r2,zero
   15160:	31400236 	bltu	r6,r5,1516c <__divsi3+0x4c>
   15164:	314dc83a 	sub	r6,r6,r5
   15168:	10c4b03a 	or	r2,r2,r3
   1516c:	1806d07a 	srli	r3,r3,1
   15170:	280ad07a 	srli	r5,r5,1
   15174:	183ffa1e 	bne	r3,zero,15160 <_gp+0xffff3710>
   15178:	38000126 	beq	r7,zero,15180 <__divsi3+0x60>
   1517c:	0085c83a 	sub	r2,zero,r2
   15180:	f800283a 	ret
   15184:	014bc83a 	sub	r5,zero,r5
   15188:	39c0005c 	xori	r7,r7,1
   1518c:	003fe706 	br	1512c <_gp+0xffff36dc>
   15190:	0109c83a 	sub	r4,zero,r4
   15194:	01c00044 	movi	r7,1
   15198:	003fe306 	br	15128 <_gp+0xffff36d8>
   1519c:	00c00044 	movi	r3,1
   151a0:	003fee06 	br	1515c <_gp+0xffff370c>

000151a4 <__modsi3>:
   151a4:	20001716 	blt	r4,zero,15204 <__modsi3+0x60>
   151a8:	000f883a 	mov	r7,zero
   151ac:	2005883a 	mov	r2,r4
   151b0:	28001216 	blt	r5,zero,151fc <__modsi3+0x58>
   151b4:	2900162e 	bgeu	r5,r4,15210 <__modsi3+0x6c>
   151b8:	01800804 	movi	r6,32
   151bc:	00c00044 	movi	r3,1
   151c0:	00000106 	br	151c8 <__modsi3+0x24>
   151c4:	30000a26 	beq	r6,zero,151f0 <__modsi3+0x4c>
   151c8:	294b883a 	add	r5,r5,r5
   151cc:	31bfffc4 	addi	r6,r6,-1
   151d0:	18c7883a 	add	r3,r3,r3
   151d4:	293ffb36 	bltu	r5,r4,151c4 <_gp+0xffff3774>
   151d8:	18000526 	beq	r3,zero,151f0 <__modsi3+0x4c>
   151dc:	1806d07a 	srli	r3,r3,1
   151e0:	11400136 	bltu	r2,r5,151e8 <__modsi3+0x44>
   151e4:	1145c83a 	sub	r2,r2,r5
   151e8:	280ad07a 	srli	r5,r5,1
   151ec:	183ffb1e 	bne	r3,zero,151dc <_gp+0xffff378c>
   151f0:	38000126 	beq	r7,zero,151f8 <__modsi3+0x54>
   151f4:	0085c83a 	sub	r2,zero,r2
   151f8:	f800283a 	ret
   151fc:	014bc83a 	sub	r5,zero,r5
   15200:	003fec06 	br	151b4 <_gp+0xffff3764>
   15204:	0109c83a 	sub	r4,zero,r4
   15208:	01c00044 	movi	r7,1
   1520c:	003fe706 	br	151ac <_gp+0xffff375c>
   15210:	00c00044 	movi	r3,1
   15214:	003ff106 	br	151dc <_gp+0xffff378c>

00015218 <__udivsi3>:
   15218:	200d883a 	mov	r6,r4
   1521c:	2900152e 	bgeu	r5,r4,15274 <__udivsi3+0x5c>
   15220:	28001416 	blt	r5,zero,15274 <__udivsi3+0x5c>
   15224:	00800804 	movi	r2,32
   15228:	00c00044 	movi	r3,1
   1522c:	00000206 	br	15238 <__udivsi3+0x20>
   15230:	10000e26 	beq	r2,zero,1526c <__udivsi3+0x54>
   15234:	28000516 	blt	r5,zero,1524c <__udivsi3+0x34>
   15238:	294b883a 	add	r5,r5,r5
   1523c:	10bfffc4 	addi	r2,r2,-1
   15240:	18c7883a 	add	r3,r3,r3
   15244:	293ffa36 	bltu	r5,r4,15230 <_gp+0xffff37e0>
   15248:	18000826 	beq	r3,zero,1526c <__udivsi3+0x54>
   1524c:	0005883a 	mov	r2,zero
   15250:	31400236 	bltu	r6,r5,1525c <__udivsi3+0x44>
   15254:	314dc83a 	sub	r6,r6,r5
   15258:	10c4b03a 	or	r2,r2,r3
   1525c:	1806d07a 	srli	r3,r3,1
   15260:	280ad07a 	srli	r5,r5,1
   15264:	183ffa1e 	bne	r3,zero,15250 <_gp+0xffff3800>
   15268:	f800283a 	ret
   1526c:	0005883a 	mov	r2,zero
   15270:	f800283a 	ret
   15274:	00c00044 	movi	r3,1
   15278:	003ff406 	br	1524c <_gp+0xffff37fc>

0001527c <__umodsi3>:
   1527c:	2005883a 	mov	r2,r4
   15280:	2900122e 	bgeu	r5,r4,152cc <__umodsi3+0x50>
   15284:	28001116 	blt	r5,zero,152cc <__umodsi3+0x50>
   15288:	01800804 	movi	r6,32
   1528c:	00c00044 	movi	r3,1
   15290:	00000206 	br	1529c <__umodsi3+0x20>
   15294:	30000c26 	beq	r6,zero,152c8 <__umodsi3+0x4c>
   15298:	28000516 	blt	r5,zero,152b0 <__umodsi3+0x34>
   1529c:	294b883a 	add	r5,r5,r5
   152a0:	31bfffc4 	addi	r6,r6,-1
   152a4:	18c7883a 	add	r3,r3,r3
   152a8:	293ffa36 	bltu	r5,r4,15294 <_gp+0xffff3844>
   152ac:	18000626 	beq	r3,zero,152c8 <__umodsi3+0x4c>
   152b0:	1806d07a 	srli	r3,r3,1
   152b4:	11400136 	bltu	r2,r5,152bc <__umodsi3+0x40>
   152b8:	1145c83a 	sub	r2,r2,r5
   152bc:	280ad07a 	srli	r5,r5,1
   152c0:	183ffb1e 	bne	r3,zero,152b0 <_gp+0xffff3860>
   152c4:	f800283a 	ret
   152c8:	f800283a 	ret
   152cc:	00c00044 	movi	r3,1
   152d0:	003ff706 	br	152b0 <_gp+0xffff3860>

000152d4 <__adddf3>:
   152d4:	02c00434 	movhi	r11,16
   152d8:	5affffc4 	addi	r11,r11,-1
   152dc:	2806d7fa 	srli	r3,r5,31
   152e0:	2ad4703a 	and	r10,r5,r11
   152e4:	3ad2703a 	and	r9,r7,r11
   152e8:	3804d53a 	srli	r2,r7,20
   152ec:	3018d77a 	srli	r12,r6,29
   152f0:	280ad53a 	srli	r5,r5,20
   152f4:	501490fa 	slli	r10,r10,3
   152f8:	2010d77a 	srli	r8,r4,29
   152fc:	481290fa 	slli	r9,r9,3
   15300:	380ed7fa 	srli	r7,r7,31
   15304:	defffb04 	addi	sp,sp,-20
   15308:	dc800215 	stw	r18,8(sp)
   1530c:	dc400115 	stw	r17,4(sp)
   15310:	dc000015 	stw	r16,0(sp)
   15314:	dfc00415 	stw	ra,16(sp)
   15318:	dcc00315 	stw	r19,12(sp)
   1531c:	1c803fcc 	andi	r18,r3,255
   15320:	2c01ffcc 	andi	r16,r5,2047
   15324:	5210b03a 	or	r8,r10,r8
   15328:	202290fa 	slli	r17,r4,3
   1532c:	1081ffcc 	andi	r2,r2,2047
   15330:	4b12b03a 	or	r9,r9,r12
   15334:	300c90fa 	slli	r6,r6,3
   15338:	91c07526 	beq	r18,r7,15510 <__adddf3+0x23c>
   1533c:	8087c83a 	sub	r3,r16,r2
   15340:	00c0ab0e 	bge	zero,r3,155f0 <__adddf3+0x31c>
   15344:	10002a1e 	bne	r2,zero,153f0 <__adddf3+0x11c>
   15348:	4984b03a 	or	r2,r9,r6
   1534c:	1000961e 	bne	r2,zero,155a8 <__adddf3+0x2d4>
   15350:	888001cc 	andi	r2,r17,7
   15354:	10000726 	beq	r2,zero,15374 <__adddf3+0xa0>
   15358:	888003cc 	andi	r2,r17,15
   1535c:	00c00104 	movi	r3,4
   15360:	10c00426 	beq	r2,r3,15374 <__adddf3+0xa0>
   15364:	88c7883a 	add	r3,r17,r3
   15368:	1c63803a 	cmpltu	r17,r3,r17
   1536c:	4451883a 	add	r8,r8,r17
   15370:	1823883a 	mov	r17,r3
   15374:	4080202c 	andhi	r2,r8,128
   15378:	10005926 	beq	r2,zero,154e0 <__adddf3+0x20c>
   1537c:	84000044 	addi	r16,r16,1
   15380:	0081ffc4 	movi	r2,2047
   15384:	8080ba26 	beq	r16,r2,15670 <__adddf3+0x39c>
   15388:	00bfe034 	movhi	r2,65408
   1538c:	10bfffc4 	addi	r2,r2,-1
   15390:	4090703a 	and	r8,r8,r2
   15394:	4004977a 	slli	r2,r8,29
   15398:	4010927a 	slli	r8,r8,9
   1539c:	8822d0fa 	srli	r17,r17,3
   153a0:	8401ffcc 	andi	r16,r16,2047
   153a4:	4010d33a 	srli	r8,r8,12
   153a8:	9007883a 	mov	r3,r18
   153ac:	1444b03a 	or	r2,r2,r17
   153b0:	8401ffcc 	andi	r16,r16,2047
   153b4:	8020953a 	slli	r16,r16,20
   153b8:	18c03fcc 	andi	r3,r3,255
   153bc:	01000434 	movhi	r4,16
   153c0:	213fffc4 	addi	r4,r4,-1
   153c4:	180697fa 	slli	r3,r3,31
   153c8:	4110703a 	and	r8,r8,r4
   153cc:	4410b03a 	or	r8,r8,r16
   153d0:	40c6b03a 	or	r3,r8,r3
   153d4:	dfc00417 	ldw	ra,16(sp)
   153d8:	dcc00317 	ldw	r19,12(sp)
   153dc:	dc800217 	ldw	r18,8(sp)
   153e0:	dc400117 	ldw	r17,4(sp)
   153e4:	dc000017 	ldw	r16,0(sp)
   153e8:	dec00504 	addi	sp,sp,20
   153ec:	f800283a 	ret
   153f0:	0081ffc4 	movi	r2,2047
   153f4:	80bfd626 	beq	r16,r2,15350 <_gp+0xffff3900>
   153f8:	4a402034 	orhi	r9,r9,128
   153fc:	00800e04 	movi	r2,56
   15400:	10c09f16 	blt	r2,r3,15680 <__adddf3+0x3ac>
   15404:	008007c4 	movi	r2,31
   15408:	10c0c216 	blt	r2,r3,15714 <__adddf3+0x440>
   1540c:	00800804 	movi	r2,32
   15410:	10c5c83a 	sub	r2,r2,r3
   15414:	488a983a 	sll	r5,r9,r2
   15418:	30c8d83a 	srl	r4,r6,r3
   1541c:	3084983a 	sll	r2,r6,r2
   15420:	48c6d83a 	srl	r3,r9,r3
   15424:	290cb03a 	or	r6,r5,r4
   15428:	1004c03a 	cmpne	r2,r2,zero
   1542c:	308cb03a 	or	r6,r6,r2
   15430:	898dc83a 	sub	r6,r17,r6
   15434:	89a3803a 	cmpltu	r17,r17,r6
   15438:	40d1c83a 	sub	r8,r8,r3
   1543c:	4451c83a 	sub	r8,r8,r17
   15440:	3023883a 	mov	r17,r6
   15444:	4080202c 	andhi	r2,r8,128
   15448:	10002326 	beq	r2,zero,154d8 <__adddf3+0x204>
   1544c:	04c02034 	movhi	r19,128
   15450:	9cffffc4 	addi	r19,r19,-1
   15454:	44e6703a 	and	r19,r8,r19
   15458:	98007626 	beq	r19,zero,15634 <__adddf3+0x360>
   1545c:	9809883a 	mov	r4,r19
   15460:	001139c0 	call	1139c <__clzsi2>
   15464:	10fffe04 	addi	r3,r2,-8
   15468:	010007c4 	movi	r4,31
   1546c:	20c07716 	blt	r4,r3,1564c <__adddf3+0x378>
   15470:	00800804 	movi	r2,32
   15474:	10c5c83a 	sub	r2,r2,r3
   15478:	8884d83a 	srl	r2,r17,r2
   1547c:	98d0983a 	sll	r8,r19,r3
   15480:	88e2983a 	sll	r17,r17,r3
   15484:	1204b03a 	or	r2,r2,r8
   15488:	1c007416 	blt	r3,r16,1565c <__adddf3+0x388>
   1548c:	1c21c83a 	sub	r16,r3,r16
   15490:	82000044 	addi	r8,r16,1
   15494:	00c007c4 	movi	r3,31
   15498:	1a009116 	blt	r3,r8,156e0 <__adddf3+0x40c>
   1549c:	00c00804 	movi	r3,32
   154a0:	1a07c83a 	sub	r3,r3,r8
   154a4:	8a08d83a 	srl	r4,r17,r8
   154a8:	88e2983a 	sll	r17,r17,r3
   154ac:	10c6983a 	sll	r3,r2,r3
   154b0:	1210d83a 	srl	r8,r2,r8
   154b4:	8804c03a 	cmpne	r2,r17,zero
   154b8:	1906b03a 	or	r3,r3,r4
   154bc:	18a2b03a 	or	r17,r3,r2
   154c0:	0021883a 	mov	r16,zero
   154c4:	003fa206 	br	15350 <_gp+0xffff3900>
   154c8:	1890b03a 	or	r8,r3,r2
   154cc:	40017d26 	beq	r8,zero,15ac4 <__adddf3+0x7f0>
   154d0:	1011883a 	mov	r8,r2
   154d4:	1823883a 	mov	r17,r3
   154d8:	888001cc 	andi	r2,r17,7
   154dc:	103f9e1e 	bne	r2,zero,15358 <_gp+0xffff3908>
   154e0:	4004977a 	slli	r2,r8,29
   154e4:	8822d0fa 	srli	r17,r17,3
   154e8:	4010d0fa 	srli	r8,r8,3
   154ec:	9007883a 	mov	r3,r18
   154f0:	1444b03a 	or	r2,r2,r17
   154f4:	0101ffc4 	movi	r4,2047
   154f8:	81002426 	beq	r16,r4,1558c <__adddf3+0x2b8>
   154fc:	8120703a 	and	r16,r16,r4
   15500:	01000434 	movhi	r4,16
   15504:	213fffc4 	addi	r4,r4,-1
   15508:	4110703a 	and	r8,r8,r4
   1550c:	003fa806 	br	153b0 <_gp+0xffff3960>
   15510:	8089c83a 	sub	r4,r16,r2
   15514:	01005e0e 	bge	zero,r4,15690 <__adddf3+0x3bc>
   15518:	10002b26 	beq	r2,zero,155c8 <__adddf3+0x2f4>
   1551c:	0081ffc4 	movi	r2,2047
   15520:	80bf8b26 	beq	r16,r2,15350 <_gp+0xffff3900>
   15524:	4a402034 	orhi	r9,r9,128
   15528:	00800e04 	movi	r2,56
   1552c:	1100a40e 	bge	r2,r4,157c0 <__adddf3+0x4ec>
   15530:	498cb03a 	or	r6,r9,r6
   15534:	300ac03a 	cmpne	r5,r6,zero
   15538:	0013883a 	mov	r9,zero
   1553c:	2c4b883a 	add	r5,r5,r17
   15540:	2c63803a 	cmpltu	r17,r5,r17
   15544:	4a11883a 	add	r8,r9,r8
   15548:	8a11883a 	add	r8,r17,r8
   1554c:	2823883a 	mov	r17,r5
   15550:	4080202c 	andhi	r2,r8,128
   15554:	103fe026 	beq	r2,zero,154d8 <_gp+0xffff3a88>
   15558:	84000044 	addi	r16,r16,1
   1555c:	0081ffc4 	movi	r2,2047
   15560:	8080d226 	beq	r16,r2,158ac <__adddf3+0x5d8>
   15564:	00bfe034 	movhi	r2,65408
   15568:	10bfffc4 	addi	r2,r2,-1
   1556c:	4090703a 	and	r8,r8,r2
   15570:	880ad07a 	srli	r5,r17,1
   15574:	400897fa 	slli	r4,r8,31
   15578:	88c0004c 	andi	r3,r17,1
   1557c:	28e2b03a 	or	r17,r5,r3
   15580:	4010d07a 	srli	r8,r8,1
   15584:	2462b03a 	or	r17,r4,r17
   15588:	003f7106 	br	15350 <_gp+0xffff3900>
   1558c:	4088b03a 	or	r4,r8,r2
   15590:	20014526 	beq	r4,zero,15aa8 <__adddf3+0x7d4>
   15594:	01000434 	movhi	r4,16
   15598:	42000234 	orhi	r8,r8,8
   1559c:	213fffc4 	addi	r4,r4,-1
   155a0:	4110703a 	and	r8,r8,r4
   155a4:	003f8206 	br	153b0 <_gp+0xffff3960>
   155a8:	18ffffc4 	addi	r3,r3,-1
   155ac:	1800491e 	bne	r3,zero,156d4 <__adddf3+0x400>
   155b0:	898bc83a 	sub	r5,r17,r6
   155b4:	8963803a 	cmpltu	r17,r17,r5
   155b8:	4251c83a 	sub	r8,r8,r9
   155bc:	4451c83a 	sub	r8,r8,r17
   155c0:	2823883a 	mov	r17,r5
   155c4:	003f9f06 	br	15444 <_gp+0xffff39f4>
   155c8:	4984b03a 	or	r2,r9,r6
   155cc:	103f6026 	beq	r2,zero,15350 <_gp+0xffff3900>
   155d0:	213fffc4 	addi	r4,r4,-1
   155d4:	2000931e 	bne	r4,zero,15824 <__adddf3+0x550>
   155d8:	898d883a 	add	r6,r17,r6
   155dc:	3463803a 	cmpltu	r17,r6,r17
   155e0:	4251883a 	add	r8,r8,r9
   155e4:	8a11883a 	add	r8,r17,r8
   155e8:	3023883a 	mov	r17,r6
   155ec:	003fd806 	br	15550 <_gp+0xffff3b00>
   155f0:	1800541e 	bne	r3,zero,15744 <__adddf3+0x470>
   155f4:	80800044 	addi	r2,r16,1
   155f8:	1081ffcc 	andi	r2,r2,2047
   155fc:	00c00044 	movi	r3,1
   15600:	1880a00e 	bge	r3,r2,15884 <__adddf3+0x5b0>
   15604:	8989c83a 	sub	r4,r17,r6
   15608:	8905803a 	cmpltu	r2,r17,r4
   1560c:	4267c83a 	sub	r19,r8,r9
   15610:	98a7c83a 	sub	r19,r19,r2
   15614:	9880202c 	andhi	r2,r19,128
   15618:	10006326 	beq	r2,zero,157a8 <__adddf3+0x4d4>
   1561c:	3463c83a 	sub	r17,r6,r17
   15620:	4a07c83a 	sub	r3,r9,r8
   15624:	344d803a 	cmpltu	r6,r6,r17
   15628:	19a7c83a 	sub	r19,r3,r6
   1562c:	3825883a 	mov	r18,r7
   15630:	983f8a1e 	bne	r19,zero,1545c <_gp+0xffff3a0c>
   15634:	8809883a 	mov	r4,r17
   15638:	001139c0 	call	1139c <__clzsi2>
   1563c:	10800804 	addi	r2,r2,32
   15640:	10fffe04 	addi	r3,r2,-8
   15644:	010007c4 	movi	r4,31
   15648:	20ff890e 	bge	r4,r3,15470 <_gp+0xffff3a20>
   1564c:	10bff604 	addi	r2,r2,-40
   15650:	8884983a 	sll	r2,r17,r2
   15654:	0023883a 	mov	r17,zero
   15658:	1c3f8c0e 	bge	r3,r16,1548c <_gp+0xffff3a3c>
   1565c:	023fe034 	movhi	r8,65408
   15660:	423fffc4 	addi	r8,r8,-1
   15664:	80e1c83a 	sub	r16,r16,r3
   15668:	1210703a 	and	r8,r2,r8
   1566c:	003f3806 	br	15350 <_gp+0xffff3900>
   15670:	9007883a 	mov	r3,r18
   15674:	0011883a 	mov	r8,zero
   15678:	0005883a 	mov	r2,zero
   1567c:	003f4c06 	br	153b0 <_gp+0xffff3960>
   15680:	498cb03a 	or	r6,r9,r6
   15684:	300cc03a 	cmpne	r6,r6,zero
   15688:	0007883a 	mov	r3,zero
   1568c:	003f6806 	br	15430 <_gp+0xffff39e0>
   15690:	20009c1e 	bne	r4,zero,15904 <__adddf3+0x630>
   15694:	80800044 	addi	r2,r16,1
   15698:	1141ffcc 	andi	r5,r2,2047
   1569c:	01000044 	movi	r4,1
   156a0:	2140670e 	bge	r4,r5,15840 <__adddf3+0x56c>
   156a4:	0101ffc4 	movi	r4,2047
   156a8:	11007f26 	beq	r2,r4,158a8 <__adddf3+0x5d4>
   156ac:	898d883a 	add	r6,r17,r6
   156b0:	4247883a 	add	r3,r8,r9
   156b4:	3451803a 	cmpltu	r8,r6,r17
   156b8:	40d1883a 	add	r8,r8,r3
   156bc:	402297fa 	slli	r17,r8,31
   156c0:	300cd07a 	srli	r6,r6,1
   156c4:	4010d07a 	srli	r8,r8,1
   156c8:	1021883a 	mov	r16,r2
   156cc:	89a2b03a 	or	r17,r17,r6
   156d0:	003f1f06 	br	15350 <_gp+0xffff3900>
   156d4:	0081ffc4 	movi	r2,2047
   156d8:	80bf481e 	bne	r16,r2,153fc <_gp+0xffff39ac>
   156dc:	003f1c06 	br	15350 <_gp+0xffff3900>
   156e0:	843ff844 	addi	r16,r16,-31
   156e4:	01000804 	movi	r4,32
   156e8:	1406d83a 	srl	r3,r2,r16
   156ec:	41005026 	beq	r8,r4,15830 <__adddf3+0x55c>
   156f0:	01001004 	movi	r4,64
   156f4:	2211c83a 	sub	r8,r4,r8
   156f8:	1204983a 	sll	r2,r2,r8
   156fc:	88a2b03a 	or	r17,r17,r2
   15700:	8822c03a 	cmpne	r17,r17,zero
   15704:	1c62b03a 	or	r17,r3,r17
   15708:	0011883a 	mov	r8,zero
   1570c:	0021883a 	mov	r16,zero
   15710:	003f7106 	br	154d8 <_gp+0xffff3a88>
   15714:	193ff804 	addi	r4,r3,-32
   15718:	00800804 	movi	r2,32
   1571c:	4908d83a 	srl	r4,r9,r4
   15720:	18804526 	beq	r3,r2,15838 <__adddf3+0x564>
   15724:	00801004 	movi	r2,64
   15728:	10c5c83a 	sub	r2,r2,r3
   1572c:	4886983a 	sll	r3,r9,r2
   15730:	198cb03a 	or	r6,r3,r6
   15734:	300cc03a 	cmpne	r6,r6,zero
   15738:	218cb03a 	or	r6,r4,r6
   1573c:	0007883a 	mov	r3,zero
   15740:	003f3b06 	br	15430 <_gp+0xffff39e0>
   15744:	80002a26 	beq	r16,zero,157f0 <__adddf3+0x51c>
   15748:	0101ffc4 	movi	r4,2047
   1574c:	11006826 	beq	r2,r4,158f0 <__adddf3+0x61c>
   15750:	00c7c83a 	sub	r3,zero,r3
   15754:	42002034 	orhi	r8,r8,128
   15758:	01000e04 	movi	r4,56
   1575c:	20c07c16 	blt	r4,r3,15950 <__adddf3+0x67c>
   15760:	010007c4 	movi	r4,31
   15764:	20c0da16 	blt	r4,r3,15ad0 <__adddf3+0x7fc>
   15768:	01000804 	movi	r4,32
   1576c:	20c9c83a 	sub	r4,r4,r3
   15770:	4114983a 	sll	r10,r8,r4
   15774:	88cad83a 	srl	r5,r17,r3
   15778:	8908983a 	sll	r4,r17,r4
   1577c:	40c6d83a 	srl	r3,r8,r3
   15780:	5162b03a 	or	r17,r10,r5
   15784:	2008c03a 	cmpne	r4,r4,zero
   15788:	8922b03a 	or	r17,r17,r4
   1578c:	3463c83a 	sub	r17,r6,r17
   15790:	48c7c83a 	sub	r3,r9,r3
   15794:	344d803a 	cmpltu	r6,r6,r17
   15798:	1991c83a 	sub	r8,r3,r6
   1579c:	1021883a 	mov	r16,r2
   157a0:	3825883a 	mov	r18,r7
   157a4:	003f2706 	br	15444 <_gp+0xffff39f4>
   157a8:	24d0b03a 	or	r8,r4,r19
   157ac:	40001b1e 	bne	r8,zero,1581c <__adddf3+0x548>
   157b0:	0005883a 	mov	r2,zero
   157b4:	0007883a 	mov	r3,zero
   157b8:	0021883a 	mov	r16,zero
   157bc:	003f4d06 	br	154f4 <_gp+0xffff3aa4>
   157c0:	008007c4 	movi	r2,31
   157c4:	11003c16 	blt	r2,r4,158b8 <__adddf3+0x5e4>
   157c8:	00800804 	movi	r2,32
   157cc:	1105c83a 	sub	r2,r2,r4
   157d0:	488e983a 	sll	r7,r9,r2
   157d4:	310ad83a 	srl	r5,r6,r4
   157d8:	3084983a 	sll	r2,r6,r2
   157dc:	4912d83a 	srl	r9,r9,r4
   157e0:	394ab03a 	or	r5,r7,r5
   157e4:	1004c03a 	cmpne	r2,r2,zero
   157e8:	288ab03a 	or	r5,r5,r2
   157ec:	003f5306 	br	1553c <_gp+0xffff3aec>
   157f0:	4448b03a 	or	r4,r8,r17
   157f4:	20003e26 	beq	r4,zero,158f0 <__adddf3+0x61c>
   157f8:	00c6303a 	nor	r3,zero,r3
   157fc:	18003a1e 	bne	r3,zero,158e8 <__adddf3+0x614>
   15800:	3463c83a 	sub	r17,r6,r17
   15804:	4a07c83a 	sub	r3,r9,r8
   15808:	344d803a 	cmpltu	r6,r6,r17
   1580c:	1991c83a 	sub	r8,r3,r6
   15810:	1021883a 	mov	r16,r2
   15814:	3825883a 	mov	r18,r7
   15818:	003f0a06 	br	15444 <_gp+0xffff39f4>
   1581c:	2023883a 	mov	r17,r4
   15820:	003f0d06 	br	15458 <_gp+0xffff3a08>
   15824:	0081ffc4 	movi	r2,2047
   15828:	80bf3f1e 	bne	r16,r2,15528 <_gp+0xffff3ad8>
   1582c:	003ec806 	br	15350 <_gp+0xffff3900>
   15830:	0005883a 	mov	r2,zero
   15834:	003fb106 	br	156fc <_gp+0xffff3cac>
   15838:	0007883a 	mov	r3,zero
   1583c:	003fbc06 	br	15730 <_gp+0xffff3ce0>
   15840:	4444b03a 	or	r2,r8,r17
   15844:	8000871e 	bne	r16,zero,15a64 <__adddf3+0x790>
   15848:	1000ba26 	beq	r2,zero,15b34 <__adddf3+0x860>
   1584c:	4984b03a 	or	r2,r9,r6
   15850:	103ebf26 	beq	r2,zero,15350 <_gp+0xffff3900>
   15854:	8985883a 	add	r2,r17,r6
   15858:	4247883a 	add	r3,r8,r9
   1585c:	1451803a 	cmpltu	r8,r2,r17
   15860:	40d1883a 	add	r8,r8,r3
   15864:	40c0202c 	andhi	r3,r8,128
   15868:	1023883a 	mov	r17,r2
   1586c:	183f1a26 	beq	r3,zero,154d8 <_gp+0xffff3a88>
   15870:	00bfe034 	movhi	r2,65408
   15874:	10bfffc4 	addi	r2,r2,-1
   15878:	2021883a 	mov	r16,r4
   1587c:	4090703a 	and	r8,r8,r2
   15880:	003eb306 	br	15350 <_gp+0xffff3900>
   15884:	4444b03a 	or	r2,r8,r17
   15888:	8000291e 	bne	r16,zero,15930 <__adddf3+0x65c>
   1588c:	10004b1e 	bne	r2,zero,159bc <__adddf3+0x6e8>
   15890:	4990b03a 	or	r8,r9,r6
   15894:	40008b26 	beq	r8,zero,15ac4 <__adddf3+0x7f0>
   15898:	4811883a 	mov	r8,r9
   1589c:	3023883a 	mov	r17,r6
   158a0:	3825883a 	mov	r18,r7
   158a4:	003eaa06 	br	15350 <_gp+0xffff3900>
   158a8:	1021883a 	mov	r16,r2
   158ac:	0011883a 	mov	r8,zero
   158b0:	0005883a 	mov	r2,zero
   158b4:	003f0f06 	br	154f4 <_gp+0xffff3aa4>
   158b8:	217ff804 	addi	r5,r4,-32
   158bc:	00800804 	movi	r2,32
   158c0:	494ad83a 	srl	r5,r9,r5
   158c4:	20807d26 	beq	r4,r2,15abc <__adddf3+0x7e8>
   158c8:	00801004 	movi	r2,64
   158cc:	1109c83a 	sub	r4,r2,r4
   158d0:	4912983a 	sll	r9,r9,r4
   158d4:	498cb03a 	or	r6,r9,r6
   158d8:	300cc03a 	cmpne	r6,r6,zero
   158dc:	298ab03a 	or	r5,r5,r6
   158e0:	0013883a 	mov	r9,zero
   158e4:	003f1506 	br	1553c <_gp+0xffff3aec>
   158e8:	0101ffc4 	movi	r4,2047
   158ec:	113f9a1e 	bne	r2,r4,15758 <_gp+0xffff3d08>
   158f0:	4811883a 	mov	r8,r9
   158f4:	3023883a 	mov	r17,r6
   158f8:	1021883a 	mov	r16,r2
   158fc:	3825883a 	mov	r18,r7
   15900:	003e9306 	br	15350 <_gp+0xffff3900>
   15904:	8000161e 	bne	r16,zero,15960 <__adddf3+0x68c>
   15908:	444ab03a 	or	r5,r8,r17
   1590c:	28005126 	beq	r5,zero,15a54 <__adddf3+0x780>
   15910:	0108303a 	nor	r4,zero,r4
   15914:	20004d1e 	bne	r4,zero,15a4c <__adddf3+0x778>
   15918:	89a3883a 	add	r17,r17,r6
   1591c:	4253883a 	add	r9,r8,r9
   15920:	898d803a 	cmpltu	r6,r17,r6
   15924:	3251883a 	add	r8,r6,r9
   15928:	1021883a 	mov	r16,r2
   1592c:	003f0806 	br	15550 <_gp+0xffff3b00>
   15930:	1000301e 	bne	r2,zero,159f4 <__adddf3+0x720>
   15934:	4984b03a 	or	r2,r9,r6
   15938:	10007126 	beq	r2,zero,15b00 <__adddf3+0x82c>
   1593c:	4811883a 	mov	r8,r9
   15940:	3023883a 	mov	r17,r6
   15944:	3825883a 	mov	r18,r7
   15948:	0401ffc4 	movi	r16,2047
   1594c:	003e8006 	br	15350 <_gp+0xffff3900>
   15950:	4462b03a 	or	r17,r8,r17
   15954:	8822c03a 	cmpne	r17,r17,zero
   15958:	0007883a 	mov	r3,zero
   1595c:	003f8b06 	br	1578c <_gp+0xffff3d3c>
   15960:	0141ffc4 	movi	r5,2047
   15964:	11403b26 	beq	r2,r5,15a54 <__adddf3+0x780>
   15968:	0109c83a 	sub	r4,zero,r4
   1596c:	42002034 	orhi	r8,r8,128
   15970:	01400e04 	movi	r5,56
   15974:	29006716 	blt	r5,r4,15b14 <__adddf3+0x840>
   15978:	014007c4 	movi	r5,31
   1597c:	29007016 	blt	r5,r4,15b40 <__adddf3+0x86c>
   15980:	01400804 	movi	r5,32
   15984:	290bc83a 	sub	r5,r5,r4
   15988:	4154983a 	sll	r10,r8,r5
   1598c:	890ed83a 	srl	r7,r17,r4
   15990:	894a983a 	sll	r5,r17,r5
   15994:	4108d83a 	srl	r4,r8,r4
   15998:	51e2b03a 	or	r17,r10,r7
   1599c:	280ac03a 	cmpne	r5,r5,zero
   159a0:	8962b03a 	or	r17,r17,r5
   159a4:	89a3883a 	add	r17,r17,r6
   159a8:	2253883a 	add	r9,r4,r9
   159ac:	898d803a 	cmpltu	r6,r17,r6
   159b0:	3251883a 	add	r8,r6,r9
   159b4:	1021883a 	mov	r16,r2
   159b8:	003ee506 	br	15550 <_gp+0xffff3b00>
   159bc:	4984b03a 	or	r2,r9,r6
   159c0:	103e6326 	beq	r2,zero,15350 <_gp+0xffff3900>
   159c4:	8987c83a 	sub	r3,r17,r6
   159c8:	88c9803a 	cmpltu	r4,r17,r3
   159cc:	4245c83a 	sub	r2,r8,r9
   159d0:	1105c83a 	sub	r2,r2,r4
   159d4:	1100202c 	andhi	r4,r2,128
   159d8:	203ebb26 	beq	r4,zero,154c8 <_gp+0xffff3a78>
   159dc:	3463c83a 	sub	r17,r6,r17
   159e0:	4a07c83a 	sub	r3,r9,r8
   159e4:	344d803a 	cmpltu	r6,r6,r17
   159e8:	1991c83a 	sub	r8,r3,r6
   159ec:	3825883a 	mov	r18,r7
   159f0:	003e5706 	br	15350 <_gp+0xffff3900>
   159f4:	4984b03a 	or	r2,r9,r6
   159f8:	10002e26 	beq	r2,zero,15ab4 <__adddf3+0x7e0>
   159fc:	4004d0fa 	srli	r2,r8,3
   15a00:	8822d0fa 	srli	r17,r17,3
   15a04:	4010977a 	slli	r8,r8,29
   15a08:	10c0022c 	andhi	r3,r2,8
   15a0c:	4462b03a 	or	r17,r8,r17
   15a10:	18000826 	beq	r3,zero,15a34 <__adddf3+0x760>
   15a14:	4808d0fa 	srli	r4,r9,3
   15a18:	20c0022c 	andhi	r3,r4,8
   15a1c:	1800051e 	bne	r3,zero,15a34 <__adddf3+0x760>
   15a20:	300cd0fa 	srli	r6,r6,3
   15a24:	4806977a 	slli	r3,r9,29
   15a28:	2005883a 	mov	r2,r4
   15a2c:	3825883a 	mov	r18,r7
   15a30:	19a2b03a 	or	r17,r3,r6
   15a34:	8810d77a 	srli	r8,r17,29
   15a38:	100490fa 	slli	r2,r2,3
   15a3c:	882290fa 	slli	r17,r17,3
   15a40:	0401ffc4 	movi	r16,2047
   15a44:	4090b03a 	or	r8,r8,r2
   15a48:	003e4106 	br	15350 <_gp+0xffff3900>
   15a4c:	0141ffc4 	movi	r5,2047
   15a50:	117fc71e 	bne	r2,r5,15970 <_gp+0xffff3f20>
   15a54:	4811883a 	mov	r8,r9
   15a58:	3023883a 	mov	r17,r6
   15a5c:	1021883a 	mov	r16,r2
   15a60:	003e3b06 	br	15350 <_gp+0xffff3900>
   15a64:	10002f26 	beq	r2,zero,15b24 <__adddf3+0x850>
   15a68:	4984b03a 	or	r2,r9,r6
   15a6c:	10001126 	beq	r2,zero,15ab4 <__adddf3+0x7e0>
   15a70:	4004d0fa 	srli	r2,r8,3
   15a74:	8822d0fa 	srli	r17,r17,3
   15a78:	4010977a 	slli	r8,r8,29
   15a7c:	10c0022c 	andhi	r3,r2,8
   15a80:	4462b03a 	or	r17,r8,r17
   15a84:	183feb26 	beq	r3,zero,15a34 <_gp+0xffff3fe4>
   15a88:	4808d0fa 	srli	r4,r9,3
   15a8c:	20c0022c 	andhi	r3,r4,8
   15a90:	183fe81e 	bne	r3,zero,15a34 <_gp+0xffff3fe4>
   15a94:	300cd0fa 	srli	r6,r6,3
   15a98:	4806977a 	slli	r3,r9,29
   15a9c:	2005883a 	mov	r2,r4
   15aa0:	19a2b03a 	or	r17,r3,r6
   15aa4:	003fe306 	br	15a34 <_gp+0xffff3fe4>
   15aa8:	0011883a 	mov	r8,zero
   15aac:	0005883a 	mov	r2,zero
   15ab0:	003e3f06 	br	153b0 <_gp+0xffff3960>
   15ab4:	0401ffc4 	movi	r16,2047
   15ab8:	003e2506 	br	15350 <_gp+0xffff3900>
   15abc:	0013883a 	mov	r9,zero
   15ac0:	003f8406 	br	158d4 <_gp+0xffff3e84>
   15ac4:	0005883a 	mov	r2,zero
   15ac8:	0007883a 	mov	r3,zero
   15acc:	003e8906 	br	154f4 <_gp+0xffff3aa4>
   15ad0:	197ff804 	addi	r5,r3,-32
   15ad4:	01000804 	movi	r4,32
   15ad8:	414ad83a 	srl	r5,r8,r5
   15adc:	19002426 	beq	r3,r4,15b70 <__adddf3+0x89c>
   15ae0:	01001004 	movi	r4,64
   15ae4:	20c7c83a 	sub	r3,r4,r3
   15ae8:	40c6983a 	sll	r3,r8,r3
   15aec:	1c46b03a 	or	r3,r3,r17
   15af0:	1806c03a 	cmpne	r3,r3,zero
   15af4:	28e2b03a 	or	r17,r5,r3
   15af8:	0007883a 	mov	r3,zero
   15afc:	003f2306 	br	1578c <_gp+0xffff3d3c>
   15b00:	0007883a 	mov	r3,zero
   15b04:	5811883a 	mov	r8,r11
   15b08:	00bfffc4 	movi	r2,-1
   15b0c:	0401ffc4 	movi	r16,2047
   15b10:	003e7806 	br	154f4 <_gp+0xffff3aa4>
   15b14:	4462b03a 	or	r17,r8,r17
   15b18:	8822c03a 	cmpne	r17,r17,zero
   15b1c:	0009883a 	mov	r4,zero
   15b20:	003fa006 	br	159a4 <_gp+0xffff3f54>
   15b24:	4811883a 	mov	r8,r9
   15b28:	3023883a 	mov	r17,r6
   15b2c:	0401ffc4 	movi	r16,2047
   15b30:	003e0706 	br	15350 <_gp+0xffff3900>
   15b34:	4811883a 	mov	r8,r9
   15b38:	3023883a 	mov	r17,r6
   15b3c:	003e0406 	br	15350 <_gp+0xffff3900>
   15b40:	21fff804 	addi	r7,r4,-32
   15b44:	01400804 	movi	r5,32
   15b48:	41ced83a 	srl	r7,r8,r7
   15b4c:	21400a26 	beq	r4,r5,15b78 <__adddf3+0x8a4>
   15b50:	01401004 	movi	r5,64
   15b54:	2909c83a 	sub	r4,r5,r4
   15b58:	4108983a 	sll	r4,r8,r4
   15b5c:	2448b03a 	or	r4,r4,r17
   15b60:	2008c03a 	cmpne	r4,r4,zero
   15b64:	3922b03a 	or	r17,r7,r4
   15b68:	0009883a 	mov	r4,zero
   15b6c:	003f8d06 	br	159a4 <_gp+0xffff3f54>
   15b70:	0007883a 	mov	r3,zero
   15b74:	003fdd06 	br	15aec <_gp+0xffff409c>
   15b78:	0009883a 	mov	r4,zero
   15b7c:	003ff706 	br	15b5c <_gp+0xffff410c>

00015b80 <__divdf3>:
   15b80:	defff004 	addi	sp,sp,-64
   15b84:	dc800815 	stw	r18,32(sp)
   15b88:	2824d53a 	srli	r18,r5,20
   15b8c:	dd800c15 	stw	r22,48(sp)
   15b90:	282cd7fa 	srli	r22,r5,31
   15b94:	dc000615 	stw	r16,24(sp)
   15b98:	04000434 	movhi	r16,16
   15b9c:	843fffc4 	addi	r16,r16,-1
   15ba0:	dfc00f15 	stw	ra,60(sp)
   15ba4:	df000e15 	stw	fp,56(sp)
   15ba8:	ddc00d15 	stw	r23,52(sp)
   15bac:	dd400b15 	stw	r21,44(sp)
   15bb0:	dd000a15 	stw	r20,40(sp)
   15bb4:	dcc00915 	stw	r19,36(sp)
   15bb8:	dc400715 	stw	r17,28(sp)
   15bbc:	9481ffcc 	andi	r18,r18,2047
   15bc0:	2c20703a 	and	r16,r5,r16
   15bc4:	b2003fcc 	andi	r8,r22,255
   15bc8:	90006126 	beq	r18,zero,15d50 <__divdf3+0x1d0>
   15bcc:	0081ffc4 	movi	r2,2047
   15bd0:	202b883a 	mov	r21,r4
   15bd4:	90803726 	beq	r18,r2,15cb4 <__divdf3+0x134>
   15bd8:	80800434 	orhi	r2,r16,16
   15bdc:	100490fa 	slli	r2,r2,3
   15be0:	2020d77a 	srli	r16,r4,29
   15be4:	202a90fa 	slli	r21,r4,3
   15be8:	94bf0044 	addi	r18,r18,-1023
   15bec:	80a0b03a 	or	r16,r16,r2
   15bf0:	0013883a 	mov	r9,zero
   15bf4:	000b883a 	mov	r5,zero
   15bf8:	3806d53a 	srli	r3,r7,20
   15bfc:	382ed7fa 	srli	r23,r7,31
   15c00:	04400434 	movhi	r17,16
   15c04:	8c7fffc4 	addi	r17,r17,-1
   15c08:	18c1ffcc 	andi	r3,r3,2047
   15c0c:	3029883a 	mov	r20,r6
   15c10:	3c62703a 	and	r17,r7,r17
   15c14:	bf003fcc 	andi	fp,r23,255
   15c18:	18006e26 	beq	r3,zero,15dd4 <__divdf3+0x254>
   15c1c:	0081ffc4 	movi	r2,2047
   15c20:	18806626 	beq	r3,r2,15dbc <__divdf3+0x23c>
   15c24:	88800434 	orhi	r2,r17,16
   15c28:	100490fa 	slli	r2,r2,3
   15c2c:	3022d77a 	srli	r17,r6,29
   15c30:	302890fa 	slli	r20,r6,3
   15c34:	18ff0044 	addi	r3,r3,-1023
   15c38:	88a2b03a 	or	r17,r17,r2
   15c3c:	000f883a 	mov	r7,zero
   15c40:	b5e6f03a 	xor	r19,r22,r23
   15c44:	3a4cb03a 	or	r6,r7,r9
   15c48:	008003c4 	movi	r2,15
   15c4c:	9809883a 	mov	r4,r19
   15c50:	90c7c83a 	sub	r3,r18,r3
   15c54:	9cc03fcc 	andi	r19,r19,255
   15c58:	11809636 	bltu	r2,r6,15eb4 <__divdf3+0x334>
   15c5c:	300c90ba 	slli	r6,r6,2
   15c60:	00800074 	movhi	r2,1
   15c64:	10971d04 	addi	r2,r2,23668
   15c68:	308d883a 	add	r6,r6,r2
   15c6c:	30800017 	ldw	r2,0(r6)
   15c70:	1000683a 	jmp	r2
   15c74:	00015eb4 	movhi	zero,1402
   15c78:	00015cec 	andhi	zero,zero,1395
   15c7c:	00015ea4 	muli	zero,zero,1402
   15c80:	00015ce0 	cmpeqi	zero,zero,1395
   15c84:	00015ea4 	muli	zero,zero,1402
   15c88:	00015e78 	rdprs	zero,zero,1401
   15c8c:	00015ea4 	muli	zero,zero,1402
   15c90:	00015ce0 	cmpeqi	zero,zero,1395
   15c94:	00015cec 	andhi	zero,zero,1395
   15c98:	00015cec 	andhi	zero,zero,1395
   15c9c:	00015e78 	rdprs	zero,zero,1401
   15ca0:	00015ce0 	cmpeqi	zero,zero,1395
   15ca4:	00015cd0 	cmplti	zero,zero,1395
   15ca8:	00015cd0 	cmplti	zero,zero,1395
   15cac:	00015cd0 	cmplti	zero,zero,1395
   15cb0:	0001623c 	xorhi	zero,zero,1416
   15cb4:	2404b03a 	or	r2,r4,r16
   15cb8:	10006c1e 	bne	r2,zero,15e6c <__divdf3+0x2ec>
   15cbc:	02400204 	movi	r9,8
   15cc0:	0021883a 	mov	r16,zero
   15cc4:	002b883a 	mov	r21,zero
   15cc8:	01400084 	movi	r5,2
   15ccc:	003fca06 	br	15bf8 <_gp+0xffff41a8>
   15cd0:	8023883a 	mov	r17,r16
   15cd4:	a829883a 	mov	r20,r21
   15cd8:	4039883a 	mov	fp,r8
   15cdc:	280f883a 	mov	r7,r5
   15ce0:	00800084 	movi	r2,2
   15ce4:	3881601e 	bne	r7,r2,16268 <__divdf3+0x6e8>
   15ce8:	e027883a 	mov	r19,fp
   15cec:	9900004c 	andi	r4,r19,1
   15cf0:	0081ffc4 	movi	r2,2047
   15cf4:	0021883a 	mov	r16,zero
   15cf8:	002b883a 	mov	r21,zero
   15cfc:	1004953a 	slli	r2,r2,20
   15d00:	20c03fcc 	andi	r3,r4,255
   15d04:	01400434 	movhi	r5,16
   15d08:	297fffc4 	addi	r5,r5,-1
   15d0c:	180697fa 	slli	r3,r3,31
   15d10:	8160703a 	and	r16,r16,r5
   15d14:	80a0b03a 	or	r16,r16,r2
   15d18:	80c6b03a 	or	r3,r16,r3
   15d1c:	a805883a 	mov	r2,r21
   15d20:	dfc00f17 	ldw	ra,60(sp)
   15d24:	df000e17 	ldw	fp,56(sp)
   15d28:	ddc00d17 	ldw	r23,52(sp)
   15d2c:	dd800c17 	ldw	r22,48(sp)
   15d30:	dd400b17 	ldw	r21,44(sp)
   15d34:	dd000a17 	ldw	r20,40(sp)
   15d38:	dcc00917 	ldw	r19,36(sp)
   15d3c:	dc800817 	ldw	r18,32(sp)
   15d40:	dc400717 	ldw	r17,28(sp)
   15d44:	dc000617 	ldw	r16,24(sp)
   15d48:	dec01004 	addi	sp,sp,64
   15d4c:	f800283a 	ret
   15d50:	2404b03a 	or	r2,r4,r16
   15d54:	2023883a 	mov	r17,r4
   15d58:	10003f26 	beq	r2,zero,15e58 <__divdf3+0x2d8>
   15d5c:	80015e26 	beq	r16,zero,162d8 <__divdf3+0x758>
   15d60:	8009883a 	mov	r4,r16
   15d64:	d9800215 	stw	r6,8(sp)
   15d68:	d9c00515 	stw	r7,20(sp)
   15d6c:	da000415 	stw	r8,16(sp)
   15d70:	001139c0 	call	1139c <__clzsi2>
   15d74:	d9800217 	ldw	r6,8(sp)
   15d78:	d9c00517 	ldw	r7,20(sp)
   15d7c:	da000417 	ldw	r8,16(sp)
   15d80:	113ffd44 	addi	r4,r2,-11
   15d84:	00c00704 	movi	r3,28
   15d88:	19014f16 	blt	r3,r4,162c8 <__divdf3+0x748>
   15d8c:	00c00744 	movi	r3,29
   15d90:	157ffe04 	addi	r21,r2,-8
   15d94:	1907c83a 	sub	r3,r3,r4
   15d98:	8560983a 	sll	r16,r16,r21
   15d9c:	88c6d83a 	srl	r3,r17,r3
   15da0:	8d6a983a 	sll	r21,r17,r21
   15da4:	1c20b03a 	or	r16,r3,r16
   15da8:	1080fcc4 	addi	r2,r2,1011
   15dac:	00a5c83a 	sub	r18,zero,r2
   15db0:	0013883a 	mov	r9,zero
   15db4:	000b883a 	mov	r5,zero
   15db8:	003f8f06 	br	15bf8 <_gp+0xffff41a8>
   15dbc:	3444b03a 	or	r2,r6,r17
   15dc0:	1000231e 	bne	r2,zero,15e50 <__divdf3+0x2d0>
   15dc4:	0023883a 	mov	r17,zero
   15dc8:	0029883a 	mov	r20,zero
   15dcc:	01c00084 	movi	r7,2
   15dd0:	003f9b06 	br	15c40 <_gp+0xffff41f0>
   15dd4:	3444b03a 	or	r2,r6,r17
   15dd8:	10001926 	beq	r2,zero,15e40 <__divdf3+0x2c0>
   15ddc:	88014b26 	beq	r17,zero,1630c <__divdf3+0x78c>
   15de0:	8809883a 	mov	r4,r17
   15de4:	d9400115 	stw	r5,4(sp)
   15de8:	d9800215 	stw	r6,8(sp)
   15dec:	da000415 	stw	r8,16(sp)
   15df0:	da400315 	stw	r9,12(sp)
   15df4:	001139c0 	call	1139c <__clzsi2>
   15df8:	d9400117 	ldw	r5,4(sp)
   15dfc:	d9800217 	ldw	r6,8(sp)
   15e00:	da000417 	ldw	r8,16(sp)
   15e04:	da400317 	ldw	r9,12(sp)
   15e08:	113ffd44 	addi	r4,r2,-11
   15e0c:	00c00704 	movi	r3,28
   15e10:	19013a16 	blt	r3,r4,162fc <__divdf3+0x77c>
   15e14:	00c00744 	movi	r3,29
   15e18:	153ffe04 	addi	r20,r2,-8
   15e1c:	1907c83a 	sub	r3,r3,r4
   15e20:	8d22983a 	sll	r17,r17,r20
   15e24:	30c6d83a 	srl	r3,r6,r3
   15e28:	3528983a 	sll	r20,r6,r20
   15e2c:	1c62b03a 	or	r17,r3,r17
   15e30:	1080fcc4 	addi	r2,r2,1011
   15e34:	0087c83a 	sub	r3,zero,r2
   15e38:	000f883a 	mov	r7,zero
   15e3c:	003f8006 	br	15c40 <_gp+0xffff41f0>
   15e40:	0023883a 	mov	r17,zero
   15e44:	0029883a 	mov	r20,zero
   15e48:	01c00044 	movi	r7,1
   15e4c:	003f7c06 	br	15c40 <_gp+0xffff41f0>
   15e50:	01c000c4 	movi	r7,3
   15e54:	003f7a06 	br	15c40 <_gp+0xffff41f0>
   15e58:	02400104 	movi	r9,4
   15e5c:	0021883a 	mov	r16,zero
   15e60:	002b883a 	mov	r21,zero
   15e64:	01400044 	movi	r5,1
   15e68:	003f6306 	br	15bf8 <_gp+0xffff41a8>
   15e6c:	02400304 	movi	r9,12
   15e70:	014000c4 	movi	r5,3
   15e74:	003f6006 	br	15bf8 <_gp+0xffff41a8>
   15e78:	04000434 	movhi	r16,16
   15e7c:	0009883a 	mov	r4,zero
   15e80:	843fffc4 	addi	r16,r16,-1
   15e84:	057fffc4 	movi	r21,-1
   15e88:	0081ffc4 	movi	r2,2047
   15e8c:	003f9b06 	br	15cfc <_gp+0xffff42ac>
   15e90:	00c00044 	movi	r3,1
   15e94:	1887c83a 	sub	r3,r3,r2
   15e98:	01000e04 	movi	r4,56
   15e9c:	20c1530e 	bge	r4,r3,163ec <__divdf3+0x86c>
   15ea0:	9900004c 	andi	r4,r19,1
   15ea4:	0005883a 	mov	r2,zero
   15ea8:	0021883a 	mov	r16,zero
   15eac:	002b883a 	mov	r21,zero
   15eb0:	003f9206 	br	15cfc <_gp+0xffff42ac>
   15eb4:	8c012e36 	bltu	r17,r16,16370 <__divdf3+0x7f0>
   15eb8:	84412c26 	beq	r16,r17,1636c <__divdf3+0x7ec>
   15ebc:	a82f883a 	mov	r23,r21
   15ec0:	18ffffc4 	addi	r3,r3,-1
   15ec4:	002b883a 	mov	r21,zero
   15ec8:	a004d63a 	srli	r2,r20,24
   15ecc:	8822923a 	slli	r17,r17,8
   15ed0:	a028923a 	slli	r20,r20,8
   15ed4:	8009883a 	mov	r4,r16
   15ed8:	88acb03a 	or	r22,r17,r2
   15edc:	dd000015 	stw	r20,0(sp)
   15ee0:	b028d43a 	srli	r20,r22,16
   15ee4:	d8c00215 	stw	r3,8(sp)
   15ee8:	b4bfffcc 	andi	r18,r22,65535
   15eec:	a00b883a 	mov	r5,r20
   15ef0:	00152180 	call	15218 <__udivsi3>
   15ef4:	100b883a 	mov	r5,r2
   15ef8:	9009883a 	mov	r4,r18
   15efc:	1023883a 	mov	r17,r2
   15f00:	00114000 	call	11400 <__mulsi3>
   15f04:	8009883a 	mov	r4,r16
   15f08:	a00b883a 	mov	r5,r20
   15f0c:	1039883a 	mov	fp,r2
   15f10:	001527c0 	call	1527c <__umodsi3>
   15f14:	1004943a 	slli	r2,r2,16
   15f18:	b808d43a 	srli	r4,r23,16
   15f1c:	d8c00217 	ldw	r3,8(sp)
   15f20:	2084b03a 	or	r2,r4,r2
   15f24:	1700062e 	bgeu	r2,fp,15f40 <__divdf3+0x3c0>
   15f28:	1585883a 	add	r2,r2,r22
   15f2c:	893fffc4 	addi	r4,r17,-1
   15f30:	15811d36 	bltu	r2,r22,163a8 <__divdf3+0x828>
   15f34:	17011c2e 	bgeu	r2,fp,163a8 <__divdf3+0x828>
   15f38:	8c7fff84 	addi	r17,r17,-2
   15f3c:	1585883a 	add	r2,r2,r22
   15f40:	1739c83a 	sub	fp,r2,fp
   15f44:	a00b883a 	mov	r5,r20
   15f48:	e009883a 	mov	r4,fp
   15f4c:	d8c00215 	stw	r3,8(sp)
   15f50:	00152180 	call	15218 <__udivsi3>
   15f54:	100b883a 	mov	r5,r2
   15f58:	9009883a 	mov	r4,r18
   15f5c:	1021883a 	mov	r16,r2
   15f60:	00114000 	call	11400 <__mulsi3>
   15f64:	a00b883a 	mov	r5,r20
   15f68:	e009883a 	mov	r4,fp
   15f6c:	d8800415 	stw	r2,16(sp)
   15f70:	001527c0 	call	1527c <__umodsi3>
   15f74:	1004943a 	slli	r2,r2,16
   15f78:	da000417 	ldw	r8,16(sp)
   15f7c:	bdffffcc 	andi	r23,r23,65535
   15f80:	b884b03a 	or	r2,r23,r2
   15f84:	d8c00217 	ldw	r3,8(sp)
   15f88:	1200062e 	bgeu	r2,r8,15fa4 <__divdf3+0x424>
   15f8c:	1585883a 	add	r2,r2,r22
   15f90:	813fffc4 	addi	r4,r16,-1
   15f94:	15810236 	bltu	r2,r22,163a0 <__divdf3+0x820>
   15f98:	1201012e 	bgeu	r2,r8,163a0 <__divdf3+0x820>
   15f9c:	843fff84 	addi	r16,r16,-2
   15fa0:	1585883a 	add	r2,r2,r22
   15fa4:	8822943a 	slli	r17,r17,16
   15fa8:	d9800017 	ldw	r6,0(sp)
   15fac:	1211c83a 	sub	r8,r2,r8
   15fb0:	8c22b03a 	or	r17,r17,r16
   15fb4:	373fffcc 	andi	fp,r6,65535
   15fb8:	8abfffcc 	andi	r10,r17,65535
   15fbc:	8820d43a 	srli	r16,r17,16
   15fc0:	5009883a 	mov	r4,r10
   15fc4:	e00b883a 	mov	r5,fp
   15fc8:	302ed43a 	srli	r23,r6,16
   15fcc:	d8c00215 	stw	r3,8(sp)
   15fd0:	da000415 	stw	r8,16(sp)
   15fd4:	da800115 	stw	r10,4(sp)
   15fd8:	00114000 	call	11400 <__mulsi3>
   15fdc:	800b883a 	mov	r5,r16
   15fe0:	e009883a 	mov	r4,fp
   15fe4:	d8800515 	stw	r2,20(sp)
   15fe8:	00114000 	call	11400 <__mulsi3>
   15fec:	8009883a 	mov	r4,r16
   15ff0:	b80b883a 	mov	r5,r23
   15ff4:	d8800315 	stw	r2,12(sp)
   15ff8:	00114000 	call	11400 <__mulsi3>
   15ffc:	da800117 	ldw	r10,4(sp)
   16000:	b80b883a 	mov	r5,r23
   16004:	1021883a 	mov	r16,r2
   16008:	5009883a 	mov	r4,r10
   1600c:	00114000 	call	11400 <__mulsi3>
   16010:	d9c00517 	ldw	r7,20(sp)
   16014:	da400317 	ldw	r9,12(sp)
   16018:	d8c00217 	ldw	r3,8(sp)
   1601c:	3808d43a 	srli	r4,r7,16
   16020:	1245883a 	add	r2,r2,r9
   16024:	da000417 	ldw	r8,16(sp)
   16028:	2085883a 	add	r2,r4,r2
   1602c:	1240022e 	bgeu	r2,r9,16038 <__divdf3+0x4b8>
   16030:	01000074 	movhi	r4,1
   16034:	8121883a 	add	r16,r16,r4
   16038:	1008d43a 	srli	r4,r2,16
   1603c:	1004943a 	slli	r2,r2,16
   16040:	39ffffcc 	andi	r7,r7,65535
   16044:	2409883a 	add	r4,r4,r16
   16048:	11c5883a 	add	r2,r2,r7
   1604c:	4100bb36 	bltu	r8,r4,1633c <__divdf3+0x7bc>
   16050:	4100d726 	beq	r8,r4,163b0 <__divdf3+0x830>
   16054:	4109c83a 	sub	r4,r8,r4
   16058:	a8a1c83a 	sub	r16,r21,r2
   1605c:	ac2b803a 	cmpltu	r21,r21,r16
   16060:	256bc83a 	sub	r21,r4,r21
   16064:	b540d926 	beq	r22,r21,163cc <__divdf3+0x84c>
   16068:	a00b883a 	mov	r5,r20
   1606c:	a809883a 	mov	r4,r21
   16070:	d8c00215 	stw	r3,8(sp)
   16074:	00152180 	call	15218 <__udivsi3>
   16078:	100b883a 	mov	r5,r2
   1607c:	9009883a 	mov	r4,r18
   16080:	d8800515 	stw	r2,20(sp)
   16084:	00114000 	call	11400 <__mulsi3>
   16088:	a809883a 	mov	r4,r21
   1608c:	a00b883a 	mov	r5,r20
   16090:	d8800415 	stw	r2,16(sp)
   16094:	001527c0 	call	1527c <__umodsi3>
   16098:	1004943a 	slli	r2,r2,16
   1609c:	8008d43a 	srli	r4,r16,16
   160a0:	da000417 	ldw	r8,16(sp)
   160a4:	d8c00217 	ldw	r3,8(sp)
   160a8:	2084b03a 	or	r2,r4,r2
   160ac:	d9c00517 	ldw	r7,20(sp)
   160b0:	1200062e 	bgeu	r2,r8,160cc <__divdf3+0x54c>
   160b4:	1585883a 	add	r2,r2,r22
   160b8:	393fffc4 	addi	r4,r7,-1
   160bc:	1580c536 	bltu	r2,r22,163d4 <__divdf3+0x854>
   160c0:	1200c42e 	bgeu	r2,r8,163d4 <__divdf3+0x854>
   160c4:	39ffff84 	addi	r7,r7,-2
   160c8:	1585883a 	add	r2,r2,r22
   160cc:	122bc83a 	sub	r21,r2,r8
   160d0:	a00b883a 	mov	r5,r20
   160d4:	a809883a 	mov	r4,r21
   160d8:	d8c00215 	stw	r3,8(sp)
   160dc:	d9c00515 	stw	r7,20(sp)
   160e0:	00152180 	call	15218 <__udivsi3>
   160e4:	9009883a 	mov	r4,r18
   160e8:	100b883a 	mov	r5,r2
   160ec:	d8800415 	stw	r2,16(sp)
   160f0:	00114000 	call	11400 <__mulsi3>
   160f4:	a809883a 	mov	r4,r21
   160f8:	a00b883a 	mov	r5,r20
   160fc:	1025883a 	mov	r18,r2
   16100:	001527c0 	call	1527c <__umodsi3>
   16104:	1004943a 	slli	r2,r2,16
   16108:	813fffcc 	andi	r4,r16,65535
   1610c:	d8c00217 	ldw	r3,8(sp)
   16110:	20a0b03a 	or	r16,r4,r2
   16114:	d9c00517 	ldw	r7,20(sp)
   16118:	da000417 	ldw	r8,16(sp)
   1611c:	8480062e 	bgeu	r16,r18,16138 <__divdf3+0x5b8>
   16120:	85a1883a 	add	r16,r16,r22
   16124:	40bfffc4 	addi	r2,r8,-1
   16128:	8580ac36 	bltu	r16,r22,163dc <__divdf3+0x85c>
   1612c:	8480ab2e 	bgeu	r16,r18,163dc <__divdf3+0x85c>
   16130:	423fff84 	addi	r8,r8,-2
   16134:	85a1883a 	add	r16,r16,r22
   16138:	3804943a 	slli	r2,r7,16
   1613c:	84a1c83a 	sub	r16,r16,r18
   16140:	e009883a 	mov	r4,fp
   16144:	1228b03a 	or	r20,r2,r8
   16148:	a1ffffcc 	andi	r7,r20,65535
   1614c:	a024d43a 	srli	r18,r20,16
   16150:	380b883a 	mov	r5,r7
   16154:	d8c00215 	stw	r3,8(sp)
   16158:	d9c00515 	stw	r7,20(sp)
   1615c:	00114000 	call	11400 <__mulsi3>
   16160:	900b883a 	mov	r5,r18
   16164:	e009883a 	mov	r4,fp
   16168:	102b883a 	mov	r21,r2
   1616c:	00114000 	call	11400 <__mulsi3>
   16170:	900b883a 	mov	r5,r18
   16174:	b809883a 	mov	r4,r23
   16178:	1039883a 	mov	fp,r2
   1617c:	00114000 	call	11400 <__mulsi3>
   16180:	d9c00517 	ldw	r7,20(sp)
   16184:	b80b883a 	mov	r5,r23
   16188:	1025883a 	mov	r18,r2
   1618c:	3809883a 	mov	r4,r7
   16190:	00114000 	call	11400 <__mulsi3>
   16194:	a808d43a 	srli	r4,r21,16
   16198:	1705883a 	add	r2,r2,fp
   1619c:	d8c00217 	ldw	r3,8(sp)
   161a0:	2085883a 	add	r2,r4,r2
   161a4:	1700022e 	bgeu	r2,fp,161b0 <__divdf3+0x630>
   161a8:	01000074 	movhi	r4,1
   161ac:	9125883a 	add	r18,r18,r4
   161b0:	1008d43a 	srli	r4,r2,16
   161b4:	1004943a 	slli	r2,r2,16
   161b8:	ad7fffcc 	andi	r21,r21,65535
   161bc:	2489883a 	add	r4,r4,r18
   161c0:	1545883a 	add	r2,r2,r21
   161c4:	81003836 	bltu	r16,r4,162a8 <__divdf3+0x728>
   161c8:	81003626 	beq	r16,r4,162a4 <__divdf3+0x724>
   161cc:	a5000054 	ori	r20,r20,1
   161d0:	1880ffc4 	addi	r2,r3,1023
   161d4:	00bf2e0e 	bge	zero,r2,15e90 <_gp+0xffff4440>
   161d8:	a10001cc 	andi	r4,r20,7
   161dc:	20000726 	beq	r4,zero,161fc <__divdf3+0x67c>
   161e0:	a10003cc 	andi	r4,r20,15
   161e4:	01400104 	movi	r5,4
   161e8:	21400426 	beq	r4,r5,161fc <__divdf3+0x67c>
   161ec:	a149883a 	add	r4,r20,r5
   161f0:	2529803a 	cmpltu	r20,r4,r20
   161f4:	8d23883a 	add	r17,r17,r20
   161f8:	2029883a 	mov	r20,r4
   161fc:	8900402c 	andhi	r4,r17,256
   16200:	20000426 	beq	r4,zero,16214 <__divdf3+0x694>
   16204:	18810004 	addi	r2,r3,1024
   16208:	00ffc034 	movhi	r3,65280
   1620c:	18ffffc4 	addi	r3,r3,-1
   16210:	88e2703a 	and	r17,r17,r3
   16214:	00c1ff84 	movi	r3,2046
   16218:	18beb416 	blt	r3,r2,15cec <_gp+0xffff429c>
   1621c:	a028d0fa 	srli	r20,r20,3
   16220:	882a977a 	slli	r21,r17,29
   16224:	8820927a 	slli	r16,r17,9
   16228:	1081ffcc 	andi	r2,r2,2047
   1622c:	ad2ab03a 	or	r21,r21,r20
   16230:	8020d33a 	srli	r16,r16,12
   16234:	9900004c 	andi	r4,r19,1
   16238:	003eb006 	br	15cfc <_gp+0xffff42ac>
   1623c:	8080022c 	andhi	r2,r16,8
   16240:	10001226 	beq	r2,zero,1628c <__divdf3+0x70c>
   16244:	8880022c 	andhi	r2,r17,8
   16248:	1000101e 	bne	r2,zero,1628c <__divdf3+0x70c>
   1624c:	00800434 	movhi	r2,16
   16250:	8c000234 	orhi	r16,r17,8
   16254:	10bfffc4 	addi	r2,r2,-1
   16258:	b809883a 	mov	r4,r23
   1625c:	80a0703a 	and	r16,r16,r2
   16260:	a02b883a 	mov	r21,r20
   16264:	003f0806 	br	15e88 <_gp+0xffff4438>
   16268:	008000c4 	movi	r2,3
   1626c:	3880b126 	beq	r7,r2,16534 <__divdf3+0x9b4>
   16270:	00800044 	movi	r2,1
   16274:	38805b1e 	bne	r7,r2,163e4 <__divdf3+0x864>
   16278:	e009883a 	mov	r4,fp
   1627c:	0005883a 	mov	r2,zero
   16280:	0021883a 	mov	r16,zero
   16284:	002b883a 	mov	r21,zero
   16288:	003e9c06 	br	15cfc <_gp+0xffff42ac>
   1628c:	00800434 	movhi	r2,16
   16290:	84000234 	orhi	r16,r16,8
   16294:	10bfffc4 	addi	r2,r2,-1
   16298:	b009883a 	mov	r4,r22
   1629c:	80a0703a 	and	r16,r16,r2
   162a0:	003ef906 	br	15e88 <_gp+0xffff4438>
   162a4:	103fca26 	beq	r2,zero,161d0 <_gp+0xffff4780>
   162a8:	b421883a 	add	r16,r22,r16
   162ac:	a17fffc4 	addi	r5,r20,-1
   162b0:	8580422e 	bgeu	r16,r22,163bc <__divdf3+0x83c>
   162b4:	2829883a 	mov	r20,r5
   162b8:	813fc41e 	bne	r16,r4,161cc <_gp+0xffff477c>
   162bc:	d9800017 	ldw	r6,0(sp)
   162c0:	30bfc21e 	bne	r6,r2,161cc <_gp+0xffff477c>
   162c4:	003fc206 	br	161d0 <_gp+0xffff4780>
   162c8:	143ff604 	addi	r16,r2,-40
   162cc:	8c20983a 	sll	r16,r17,r16
   162d0:	002b883a 	mov	r21,zero
   162d4:	003eb406 	br	15da8 <_gp+0xffff4358>
   162d8:	d9800215 	stw	r6,8(sp)
   162dc:	d9c00515 	stw	r7,20(sp)
   162e0:	da000415 	stw	r8,16(sp)
   162e4:	001139c0 	call	1139c <__clzsi2>
   162e8:	10800804 	addi	r2,r2,32
   162ec:	da000417 	ldw	r8,16(sp)
   162f0:	d9c00517 	ldw	r7,20(sp)
   162f4:	d9800217 	ldw	r6,8(sp)
   162f8:	003ea106 	br	15d80 <_gp+0xffff4330>
   162fc:	147ff604 	addi	r17,r2,-40
   16300:	3462983a 	sll	r17,r6,r17
   16304:	0029883a 	mov	r20,zero
   16308:	003ec906 	br	15e30 <_gp+0xffff43e0>
   1630c:	3009883a 	mov	r4,r6
   16310:	d9400115 	stw	r5,4(sp)
   16314:	d9800215 	stw	r6,8(sp)
   16318:	da000415 	stw	r8,16(sp)
   1631c:	da400315 	stw	r9,12(sp)
   16320:	001139c0 	call	1139c <__clzsi2>
   16324:	10800804 	addi	r2,r2,32
   16328:	da400317 	ldw	r9,12(sp)
   1632c:	da000417 	ldw	r8,16(sp)
   16330:	d9800217 	ldw	r6,8(sp)
   16334:	d9400117 	ldw	r5,4(sp)
   16338:	003eb306 	br	15e08 <_gp+0xffff43b8>
   1633c:	d9800017 	ldw	r6,0(sp)
   16340:	a9ab883a 	add	r21,r21,r6
   16344:	a98b803a 	cmpltu	r5,r21,r6
   16348:	2d8b883a 	add	r5,r5,r22
   1634c:	2a11883a 	add	r8,r5,r8
   16350:	897fffc4 	addi	r5,r17,-1
   16354:	b2000c2e 	bgeu	r22,r8,16388 <__divdf3+0x808>
   16358:	41003f36 	bltu	r8,r4,16458 <__divdf3+0x8d8>
   1635c:	22006c26 	beq	r4,r8,16510 <__divdf3+0x990>
   16360:	4109c83a 	sub	r4,r8,r4
   16364:	2823883a 	mov	r17,r5
   16368:	003f3b06 	br	16058 <_gp+0xffff4608>
   1636c:	ad3ed336 	bltu	r21,r20,15ebc <_gp+0xffff446c>
   16370:	a804d07a 	srli	r2,r21,1
   16374:	802e97fa 	slli	r23,r16,31
   16378:	a82a97fa 	slli	r21,r21,31
   1637c:	8020d07a 	srli	r16,r16,1
   16380:	b8aeb03a 	or	r23,r23,r2
   16384:	003ed006 	br	15ec8 <_gp+0xffff4478>
   16388:	b23ff51e 	bne	r22,r8,16360 <_gp+0xffff4910>
   1638c:	d9800017 	ldw	r6,0(sp)
   16390:	a9bff12e 	bgeu	r21,r6,16358 <_gp+0xffff4908>
   16394:	b109c83a 	sub	r4,r22,r4
   16398:	2823883a 	mov	r17,r5
   1639c:	003f2e06 	br	16058 <_gp+0xffff4608>
   163a0:	2021883a 	mov	r16,r4
   163a4:	003eff06 	br	15fa4 <_gp+0xffff4554>
   163a8:	2023883a 	mov	r17,r4
   163ac:	003ee406 	br	15f40 <_gp+0xffff44f0>
   163b0:	a8bfe236 	bltu	r21,r2,1633c <_gp+0xffff48ec>
   163b4:	0009883a 	mov	r4,zero
   163b8:	003f2706 	br	16058 <_gp+0xffff4608>
   163bc:	81002d36 	bltu	r16,r4,16474 <__divdf3+0x8f4>
   163c0:	24005626 	beq	r4,r16,1651c <__divdf3+0x99c>
   163c4:	2829883a 	mov	r20,r5
   163c8:	003f8006 	br	161cc <_gp+0xffff477c>
   163cc:	053fffc4 	movi	r20,-1
   163d0:	003f7f06 	br	161d0 <_gp+0xffff4780>
   163d4:	200f883a 	mov	r7,r4
   163d8:	003f3c06 	br	160cc <_gp+0xffff467c>
   163dc:	1011883a 	mov	r8,r2
   163e0:	003f5506 	br	16138 <_gp+0xffff46e8>
   163e4:	e027883a 	mov	r19,fp
   163e8:	003f7906 	br	161d0 <_gp+0xffff4780>
   163ec:	010007c4 	movi	r4,31
   163f0:	20c02816 	blt	r4,r3,16494 <__divdf3+0x914>
   163f4:	00800804 	movi	r2,32
   163f8:	10c5c83a 	sub	r2,r2,r3
   163fc:	888a983a 	sll	r5,r17,r2
   16400:	a0c8d83a 	srl	r4,r20,r3
   16404:	a084983a 	sll	r2,r20,r2
   16408:	88e2d83a 	srl	r17,r17,r3
   1640c:	2906b03a 	or	r3,r5,r4
   16410:	1004c03a 	cmpne	r2,r2,zero
   16414:	1886b03a 	or	r3,r3,r2
   16418:	188001cc 	andi	r2,r3,7
   1641c:	10000726 	beq	r2,zero,1643c <__divdf3+0x8bc>
   16420:	188003cc 	andi	r2,r3,15
   16424:	01000104 	movi	r4,4
   16428:	11000426 	beq	r2,r4,1643c <__divdf3+0x8bc>
   1642c:	1805883a 	mov	r2,r3
   16430:	10c00104 	addi	r3,r2,4
   16434:	1885803a 	cmpltu	r2,r3,r2
   16438:	88a3883a 	add	r17,r17,r2
   1643c:	8880202c 	andhi	r2,r17,128
   16440:	10002926 	beq	r2,zero,164e8 <__divdf3+0x968>
   16444:	9900004c 	andi	r4,r19,1
   16448:	00800044 	movi	r2,1
   1644c:	0021883a 	mov	r16,zero
   16450:	002b883a 	mov	r21,zero
   16454:	003e2906 	br	15cfc <_gp+0xffff42ac>
   16458:	d9800017 	ldw	r6,0(sp)
   1645c:	8c7fff84 	addi	r17,r17,-2
   16460:	a9ab883a 	add	r21,r21,r6
   16464:	a98b803a 	cmpltu	r5,r21,r6
   16468:	2d8b883a 	add	r5,r5,r22
   1646c:	2a11883a 	add	r8,r5,r8
   16470:	003ef806 	br	16054 <_gp+0xffff4604>
   16474:	d9800017 	ldw	r6,0(sp)
   16478:	318f883a 	add	r7,r6,r6
   1647c:	398b803a 	cmpltu	r5,r7,r6
   16480:	2d8d883a 	add	r6,r5,r22
   16484:	81a1883a 	add	r16,r16,r6
   16488:	a17fff84 	addi	r5,r20,-2
   1648c:	d9c00015 	stw	r7,0(sp)
   16490:	003f8806 	br	162b4 <_gp+0xffff4864>
   16494:	013ff844 	movi	r4,-31
   16498:	2085c83a 	sub	r2,r4,r2
   1649c:	8888d83a 	srl	r4,r17,r2
   164a0:	00800804 	movi	r2,32
   164a4:	18802126 	beq	r3,r2,1652c <__divdf3+0x9ac>
   164a8:	04001004 	movi	r16,64
   164ac:	80c7c83a 	sub	r3,r16,r3
   164b0:	88e0983a 	sll	r16,r17,r3
   164b4:	8504b03a 	or	r2,r16,r20
   164b8:	1004c03a 	cmpne	r2,r2,zero
   164bc:	2084b03a 	or	r2,r4,r2
   164c0:	144001cc 	andi	r17,r2,7
   164c4:	88000d1e 	bne	r17,zero,164fc <__divdf3+0x97c>
   164c8:	0021883a 	mov	r16,zero
   164cc:	102ad0fa 	srli	r21,r2,3
   164d0:	9900004c 	andi	r4,r19,1
   164d4:	0005883a 	mov	r2,zero
   164d8:	ac6ab03a 	or	r21,r21,r17
   164dc:	003e0706 	br	15cfc <_gp+0xffff42ac>
   164e0:	1007883a 	mov	r3,r2
   164e4:	0023883a 	mov	r17,zero
   164e8:	8820927a 	slli	r16,r17,9
   164ec:	1805883a 	mov	r2,r3
   164f0:	8822977a 	slli	r17,r17,29
   164f4:	8020d33a 	srli	r16,r16,12
   164f8:	003ff406 	br	164cc <_gp+0xffff4a7c>
   164fc:	10c003cc 	andi	r3,r2,15
   16500:	01000104 	movi	r4,4
   16504:	193ff626 	beq	r3,r4,164e0 <_gp+0xffff4a90>
   16508:	0023883a 	mov	r17,zero
   1650c:	003fc806 	br	16430 <_gp+0xffff49e0>
   16510:	a8bfd136 	bltu	r21,r2,16458 <_gp+0xffff4a08>
   16514:	2823883a 	mov	r17,r5
   16518:	003fa606 	br	163b4 <_gp+0xffff4964>
   1651c:	d9800017 	ldw	r6,0(sp)
   16520:	30bfd436 	bltu	r6,r2,16474 <_gp+0xffff4a24>
   16524:	2829883a 	mov	r20,r5
   16528:	003f6406 	br	162bc <_gp+0xffff486c>
   1652c:	0021883a 	mov	r16,zero
   16530:	003fe006 	br	164b4 <_gp+0xffff4a64>
   16534:	00800434 	movhi	r2,16
   16538:	8c000234 	orhi	r16,r17,8
   1653c:	10bfffc4 	addi	r2,r2,-1
   16540:	e009883a 	mov	r4,fp
   16544:	80a0703a 	and	r16,r16,r2
   16548:	a02b883a 	mov	r21,r20
   1654c:	003e4e06 	br	15e88 <_gp+0xffff4438>

00016550 <__eqdf2>:
   16550:	2804d53a 	srli	r2,r5,20
   16554:	3806d53a 	srli	r3,r7,20
   16558:	02000434 	movhi	r8,16
   1655c:	423fffc4 	addi	r8,r8,-1
   16560:	1081ffcc 	andi	r2,r2,2047
   16564:	0281ffc4 	movi	r10,2047
   16568:	2a12703a 	and	r9,r5,r8
   1656c:	18c1ffcc 	andi	r3,r3,2047
   16570:	3a10703a 	and	r8,r7,r8
   16574:	280ad7fa 	srli	r5,r5,31
   16578:	380ed7fa 	srli	r7,r7,31
   1657c:	12801026 	beq	r2,r10,165c0 <__eqdf2+0x70>
   16580:	0281ffc4 	movi	r10,2047
   16584:	1a800a26 	beq	r3,r10,165b0 <__eqdf2+0x60>
   16588:	10c00226 	beq	r2,r3,16594 <__eqdf2+0x44>
   1658c:	00800044 	movi	r2,1
   16590:	f800283a 	ret
   16594:	4a3ffd1e 	bne	r9,r8,1658c <_gp+0xffff4b3c>
   16598:	21bffc1e 	bne	r4,r6,1658c <_gp+0xffff4b3c>
   1659c:	29c00c26 	beq	r5,r7,165d0 <__eqdf2+0x80>
   165a0:	103ffa1e 	bne	r2,zero,1658c <_gp+0xffff4b3c>
   165a4:	2244b03a 	or	r2,r4,r9
   165a8:	1004c03a 	cmpne	r2,r2,zero
   165ac:	f800283a 	ret
   165b0:	3214b03a 	or	r10,r6,r8
   165b4:	503ff426 	beq	r10,zero,16588 <_gp+0xffff4b38>
   165b8:	00800044 	movi	r2,1
   165bc:	f800283a 	ret
   165c0:	2254b03a 	or	r10,r4,r9
   165c4:	503fee26 	beq	r10,zero,16580 <_gp+0xffff4b30>
   165c8:	00800044 	movi	r2,1
   165cc:	f800283a 	ret
   165d0:	0005883a 	mov	r2,zero
   165d4:	f800283a 	ret

000165d8 <__gedf2>:
   165d8:	2804d53a 	srli	r2,r5,20
   165dc:	3806d53a 	srli	r3,r7,20
   165e0:	02000434 	movhi	r8,16
   165e4:	423fffc4 	addi	r8,r8,-1
   165e8:	1081ffcc 	andi	r2,r2,2047
   165ec:	0241ffc4 	movi	r9,2047
   165f0:	2a14703a 	and	r10,r5,r8
   165f4:	18c1ffcc 	andi	r3,r3,2047
   165f8:	3a10703a 	and	r8,r7,r8
   165fc:	280ad7fa 	srli	r5,r5,31
   16600:	380ed7fa 	srli	r7,r7,31
   16604:	12401d26 	beq	r2,r9,1667c <__gedf2+0xa4>
   16608:	0241ffc4 	movi	r9,2047
   1660c:	1a401226 	beq	r3,r9,16658 <__gedf2+0x80>
   16610:	1000081e 	bne	r2,zero,16634 <__gedf2+0x5c>
   16614:	2296b03a 	or	r11,r4,r10
   16618:	5813003a 	cmpeq	r9,r11,zero
   1661c:	1800091e 	bne	r3,zero,16644 <__gedf2+0x6c>
   16620:	3218b03a 	or	r12,r6,r8
   16624:	6000071e 	bne	r12,zero,16644 <__gedf2+0x6c>
   16628:	0005883a 	mov	r2,zero
   1662c:	5800101e 	bne	r11,zero,16670 <__gedf2+0x98>
   16630:	f800283a 	ret
   16634:	18000c1e 	bne	r3,zero,16668 <__gedf2+0x90>
   16638:	3212b03a 	or	r9,r6,r8
   1663c:	48000c26 	beq	r9,zero,16670 <__gedf2+0x98>
   16640:	0013883a 	mov	r9,zero
   16644:	39c03fcc 	andi	r7,r7,255
   16648:	48000826 	beq	r9,zero,1666c <__gedf2+0x94>
   1664c:	38000926 	beq	r7,zero,16674 <__gedf2+0x9c>
   16650:	00800044 	movi	r2,1
   16654:	f800283a 	ret
   16658:	3212b03a 	or	r9,r6,r8
   1665c:	483fec26 	beq	r9,zero,16610 <_gp+0xffff4bc0>
   16660:	00bfff84 	movi	r2,-2
   16664:	f800283a 	ret
   16668:	39c03fcc 	andi	r7,r7,255
   1666c:	29c00626 	beq	r5,r7,16688 <__gedf2+0xb0>
   16670:	283ff726 	beq	r5,zero,16650 <_gp+0xffff4c00>
   16674:	00bfffc4 	movi	r2,-1
   16678:	f800283a 	ret
   1667c:	2292b03a 	or	r9,r4,r10
   16680:	483fe126 	beq	r9,zero,16608 <_gp+0xffff4bb8>
   16684:	003ff606 	br	16660 <_gp+0xffff4c10>
   16688:	18bff916 	blt	r3,r2,16670 <_gp+0xffff4c20>
   1668c:	10c00316 	blt	r2,r3,1669c <__gedf2+0xc4>
   16690:	42bff736 	bltu	r8,r10,16670 <_gp+0xffff4c20>
   16694:	52000326 	beq	r10,r8,166a4 <__gedf2+0xcc>
   16698:	5200042e 	bgeu	r10,r8,166ac <__gedf2+0xd4>
   1669c:	283fec1e 	bne	r5,zero,16650 <_gp+0xffff4c00>
   166a0:	003ff406 	br	16674 <_gp+0xffff4c24>
   166a4:	313ff236 	bltu	r6,r4,16670 <_gp+0xffff4c20>
   166a8:	21bffc36 	bltu	r4,r6,1669c <_gp+0xffff4c4c>
   166ac:	0005883a 	mov	r2,zero
   166b0:	f800283a 	ret

000166b4 <__ledf2>:
   166b4:	2804d53a 	srli	r2,r5,20
   166b8:	3810d53a 	srli	r8,r7,20
   166bc:	00c00434 	movhi	r3,16
   166c0:	18ffffc4 	addi	r3,r3,-1
   166c4:	1081ffcc 	andi	r2,r2,2047
   166c8:	0241ffc4 	movi	r9,2047
   166cc:	28d4703a 	and	r10,r5,r3
   166d0:	4201ffcc 	andi	r8,r8,2047
   166d4:	38c6703a 	and	r3,r7,r3
   166d8:	280ad7fa 	srli	r5,r5,31
   166dc:	380ed7fa 	srli	r7,r7,31
   166e0:	12401f26 	beq	r2,r9,16760 <__ledf2+0xac>
   166e4:	0241ffc4 	movi	r9,2047
   166e8:	42401426 	beq	r8,r9,1673c <__ledf2+0x88>
   166ec:	1000091e 	bne	r2,zero,16714 <__ledf2+0x60>
   166f0:	2296b03a 	or	r11,r4,r10
   166f4:	5813003a 	cmpeq	r9,r11,zero
   166f8:	29403fcc 	andi	r5,r5,255
   166fc:	40000a1e 	bne	r8,zero,16728 <__ledf2+0x74>
   16700:	30d8b03a 	or	r12,r6,r3
   16704:	6000081e 	bne	r12,zero,16728 <__ledf2+0x74>
   16708:	0005883a 	mov	r2,zero
   1670c:	5800111e 	bne	r11,zero,16754 <__ledf2+0xa0>
   16710:	f800283a 	ret
   16714:	29403fcc 	andi	r5,r5,255
   16718:	40000c1e 	bne	r8,zero,1674c <__ledf2+0x98>
   1671c:	30d2b03a 	or	r9,r6,r3
   16720:	48000c26 	beq	r9,zero,16754 <__ledf2+0xa0>
   16724:	0013883a 	mov	r9,zero
   16728:	39c03fcc 	andi	r7,r7,255
   1672c:	48000826 	beq	r9,zero,16750 <__ledf2+0x9c>
   16730:	38001126 	beq	r7,zero,16778 <__ledf2+0xc4>
   16734:	00800044 	movi	r2,1
   16738:	f800283a 	ret
   1673c:	30d2b03a 	or	r9,r6,r3
   16740:	483fea26 	beq	r9,zero,166ec <_gp+0xffff4c9c>
   16744:	00800084 	movi	r2,2
   16748:	f800283a 	ret
   1674c:	39c03fcc 	andi	r7,r7,255
   16750:	39400726 	beq	r7,r5,16770 <__ledf2+0xbc>
   16754:	2800081e 	bne	r5,zero,16778 <__ledf2+0xc4>
   16758:	00800044 	movi	r2,1
   1675c:	f800283a 	ret
   16760:	2292b03a 	or	r9,r4,r10
   16764:	483fdf26 	beq	r9,zero,166e4 <_gp+0xffff4c94>
   16768:	00800084 	movi	r2,2
   1676c:	f800283a 	ret
   16770:	4080030e 	bge	r8,r2,16780 <__ledf2+0xcc>
   16774:	383fef26 	beq	r7,zero,16734 <_gp+0xffff4ce4>
   16778:	00bfffc4 	movi	r2,-1
   1677c:	f800283a 	ret
   16780:	123feb16 	blt	r2,r8,16730 <_gp+0xffff4ce0>
   16784:	1abff336 	bltu	r3,r10,16754 <_gp+0xffff4d04>
   16788:	50c00326 	beq	r10,r3,16798 <__ledf2+0xe4>
   1678c:	50c0042e 	bgeu	r10,r3,167a0 <__ledf2+0xec>
   16790:	283fe81e 	bne	r5,zero,16734 <_gp+0xffff4ce4>
   16794:	003ff806 	br	16778 <_gp+0xffff4d28>
   16798:	313fee36 	bltu	r6,r4,16754 <_gp+0xffff4d04>
   1679c:	21bffc36 	bltu	r4,r6,16790 <_gp+0xffff4d40>
   167a0:	0005883a 	mov	r2,zero
   167a4:	f800283a 	ret

000167a8 <__muldf3>:
   167a8:	deffee04 	addi	sp,sp,-72
   167ac:	dd000c15 	stw	r20,48(sp)
   167b0:	2828d53a 	srli	r20,r5,20
   167b4:	ddc00f15 	stw	r23,60(sp)
   167b8:	282ed7fa 	srli	r23,r5,31
   167bc:	dc000815 	stw	r16,32(sp)
   167c0:	04000434 	movhi	r16,16
   167c4:	dcc00b15 	stw	r19,44(sp)
   167c8:	843fffc4 	addi	r16,r16,-1
   167cc:	dfc01115 	stw	ra,68(sp)
   167d0:	df001015 	stw	fp,64(sp)
   167d4:	dd800e15 	stw	r22,56(sp)
   167d8:	dd400d15 	stw	r21,52(sp)
   167dc:	dc800a15 	stw	r18,40(sp)
   167e0:	dc400915 	stw	r17,36(sp)
   167e4:	a501ffcc 	andi	r20,r20,2047
   167e8:	2c20703a 	and	r16,r5,r16
   167ec:	b827883a 	mov	r19,r23
   167f0:	ba403fcc 	andi	r9,r23,255
   167f4:	a0006026 	beq	r20,zero,16978 <__muldf3+0x1d0>
   167f8:	0081ffc4 	movi	r2,2047
   167fc:	202d883a 	mov	r22,r4
   16800:	a0803626 	beq	r20,r2,168dc <__muldf3+0x134>
   16804:	84000434 	orhi	r16,r16,16
   16808:	200ad77a 	srli	r5,r4,29
   1680c:	800490fa 	slli	r2,r16,3
   16810:	202c90fa 	slli	r22,r4,3
   16814:	a53f0044 	addi	r20,r20,-1023
   16818:	28a0b03a 	or	r16,r5,r2
   1681c:	002b883a 	mov	r21,zero
   16820:	000b883a 	mov	r5,zero
   16824:	3804d53a 	srli	r2,r7,20
   16828:	3838d7fa 	srli	fp,r7,31
   1682c:	04400434 	movhi	r17,16
   16830:	8c7fffc4 	addi	r17,r17,-1
   16834:	1081ffcc 	andi	r2,r2,2047
   16838:	3025883a 	mov	r18,r6
   1683c:	3c62703a 	and	r17,r7,r17
   16840:	e2803fcc 	andi	r10,fp,255
   16844:	10006d26 	beq	r2,zero,169fc <__muldf3+0x254>
   16848:	00c1ffc4 	movi	r3,2047
   1684c:	10c06526 	beq	r2,r3,169e4 <__muldf3+0x23c>
   16850:	8c400434 	orhi	r17,r17,16
   16854:	300ed77a 	srli	r7,r6,29
   16858:	880690fa 	slli	r3,r17,3
   1685c:	302490fa 	slli	r18,r6,3
   16860:	10bf0044 	addi	r2,r2,-1023
   16864:	38e2b03a 	or	r17,r7,r3
   16868:	000f883a 	mov	r7,zero
   1686c:	a087883a 	add	r3,r20,r2
   16870:	010003c4 	movi	r4,15
   16874:	3d44b03a 	or	r2,r7,r21
   16878:	e5ccf03a 	xor	r6,fp,r23
   1687c:	1a000044 	addi	r8,r3,1
   16880:	20809b36 	bltu	r4,r2,16af0 <__muldf3+0x348>
   16884:	100490ba 	slli	r2,r2,2
   16888:	01000074 	movhi	r4,1
   1688c:	211a2704 	addi	r4,r4,26780
   16890:	1105883a 	add	r2,r2,r4
   16894:	10800017 	ldw	r2,0(r2)
   16898:	1000683a 	jmp	r2
   1689c:	00016af0 	cmpltui	zero,zero,1451
   168a0:	000168fc 	xorhi	zero,zero,1443
   168a4:	000168fc 	xorhi	zero,zero,1443
   168a8:	000168f8 	rdprs	zero,zero,1443
   168ac:	00016acc 	andi	zero,zero,1451
   168b0:	00016acc 	andi	zero,zero,1451
   168b4:	00016ab4 	movhi	zero,1450
   168b8:	000168f8 	rdprs	zero,zero,1443
   168bc:	00016acc 	andi	zero,zero,1451
   168c0:	00016ab4 	movhi	zero,1450
   168c4:	00016acc 	andi	zero,zero,1451
   168c8:	000168f8 	rdprs	zero,zero,1443
   168cc:	00016adc 	xori	zero,zero,1451
   168d0:	00016adc 	xori	zero,zero,1451
   168d4:	00016adc 	xori	zero,zero,1451
   168d8:	00016e3c 	xorhi	zero,zero,1464
   168dc:	2404b03a 	or	r2,r4,r16
   168e0:	1000711e 	bne	r2,zero,16aa8 <__muldf3+0x300>
   168e4:	05400204 	movi	r21,8
   168e8:	0021883a 	mov	r16,zero
   168ec:	002d883a 	mov	r22,zero
   168f0:	01400084 	movi	r5,2
   168f4:	003fcb06 	br	16824 <_gp+0xffff4dd4>
   168f8:	500d883a 	mov	r6,r10
   168fc:	00800084 	movi	r2,2
   16900:	38805926 	beq	r7,r2,16a68 <__muldf3+0x2c0>
   16904:	008000c4 	movi	r2,3
   16908:	3881bb26 	beq	r7,r2,16ff8 <__muldf3+0x850>
   1690c:	00800044 	movi	r2,1
   16910:	3881961e 	bne	r7,r2,16f6c <__muldf3+0x7c4>
   16914:	3027883a 	mov	r19,r6
   16918:	0005883a 	mov	r2,zero
   1691c:	0021883a 	mov	r16,zero
   16920:	002d883a 	mov	r22,zero
   16924:	1004953a 	slli	r2,r2,20
   16928:	98c03fcc 	andi	r3,r19,255
   1692c:	04400434 	movhi	r17,16
   16930:	8c7fffc4 	addi	r17,r17,-1
   16934:	180697fa 	slli	r3,r3,31
   16938:	8460703a 	and	r16,r16,r17
   1693c:	80a0b03a 	or	r16,r16,r2
   16940:	80c6b03a 	or	r3,r16,r3
   16944:	b005883a 	mov	r2,r22
   16948:	dfc01117 	ldw	ra,68(sp)
   1694c:	df001017 	ldw	fp,64(sp)
   16950:	ddc00f17 	ldw	r23,60(sp)
   16954:	dd800e17 	ldw	r22,56(sp)
   16958:	dd400d17 	ldw	r21,52(sp)
   1695c:	dd000c17 	ldw	r20,48(sp)
   16960:	dcc00b17 	ldw	r19,44(sp)
   16964:	dc800a17 	ldw	r18,40(sp)
   16968:	dc400917 	ldw	r17,36(sp)
   1696c:	dc000817 	ldw	r16,32(sp)
   16970:	dec01204 	addi	sp,sp,72
   16974:	f800283a 	ret
   16978:	2404b03a 	or	r2,r4,r16
   1697c:	202b883a 	mov	r21,r4
   16980:	10004426 	beq	r2,zero,16a94 <__muldf3+0x2ec>
   16984:	80015126 	beq	r16,zero,16ecc <__muldf3+0x724>
   16988:	8009883a 	mov	r4,r16
   1698c:	d9800715 	stw	r6,28(sp)
   16990:	d9c00215 	stw	r7,8(sp)
   16994:	da400415 	stw	r9,16(sp)
   16998:	001139c0 	call	1139c <__clzsi2>
   1699c:	d9800717 	ldw	r6,28(sp)
   169a0:	d9c00217 	ldw	r7,8(sp)
   169a4:	da400417 	ldw	r9,16(sp)
   169a8:	113ffd44 	addi	r4,r2,-11
   169ac:	00c00704 	movi	r3,28
   169b0:	19014216 	blt	r3,r4,16ebc <__muldf3+0x714>
   169b4:	00c00744 	movi	r3,29
   169b8:	15bffe04 	addi	r22,r2,-8
   169bc:	1907c83a 	sub	r3,r3,r4
   169c0:	85a0983a 	sll	r16,r16,r22
   169c4:	a8c6d83a 	srl	r3,r21,r3
   169c8:	adac983a 	sll	r22,r21,r22
   169cc:	1c20b03a 	or	r16,r3,r16
   169d0:	1080fcc4 	addi	r2,r2,1011
   169d4:	00a9c83a 	sub	r20,zero,r2
   169d8:	002b883a 	mov	r21,zero
   169dc:	000b883a 	mov	r5,zero
   169e0:	003f9006 	br	16824 <_gp+0xffff4dd4>
   169e4:	3446b03a 	or	r3,r6,r17
   169e8:	1800281e 	bne	r3,zero,16a8c <__muldf3+0x2e4>
   169ec:	0023883a 	mov	r17,zero
   169f0:	0025883a 	mov	r18,zero
   169f4:	01c00084 	movi	r7,2
   169f8:	003f9c06 	br	1686c <_gp+0xffff4e1c>
   169fc:	3446b03a 	or	r3,r6,r17
   16a00:	18001e26 	beq	r3,zero,16a7c <__muldf3+0x2d4>
   16a04:	88012126 	beq	r17,zero,16e8c <__muldf3+0x6e4>
   16a08:	8809883a 	mov	r4,r17
   16a0c:	d9400215 	stw	r5,8(sp)
   16a10:	d9800715 	stw	r6,28(sp)
   16a14:	da400415 	stw	r9,16(sp)
   16a18:	da800315 	stw	r10,12(sp)
   16a1c:	001139c0 	call	1139c <__clzsi2>
   16a20:	d9400217 	ldw	r5,8(sp)
   16a24:	d9800717 	ldw	r6,28(sp)
   16a28:	da400417 	ldw	r9,16(sp)
   16a2c:	da800317 	ldw	r10,12(sp)
   16a30:	113ffd44 	addi	r4,r2,-11
   16a34:	00c00704 	movi	r3,28
   16a38:	19011016 	blt	r3,r4,16e7c <__muldf3+0x6d4>
   16a3c:	00c00744 	movi	r3,29
   16a40:	14bffe04 	addi	r18,r2,-8
   16a44:	1907c83a 	sub	r3,r3,r4
   16a48:	8ca2983a 	sll	r17,r17,r18
   16a4c:	30c6d83a 	srl	r3,r6,r3
   16a50:	34a4983a 	sll	r18,r6,r18
   16a54:	1c62b03a 	or	r17,r3,r17
   16a58:	1080fcc4 	addi	r2,r2,1011
   16a5c:	0085c83a 	sub	r2,zero,r2
   16a60:	000f883a 	mov	r7,zero
   16a64:	003f8106 	br	1686c <_gp+0xffff4e1c>
   16a68:	3027883a 	mov	r19,r6
   16a6c:	0081ffc4 	movi	r2,2047
   16a70:	0021883a 	mov	r16,zero
   16a74:	002d883a 	mov	r22,zero
   16a78:	003faa06 	br	16924 <_gp+0xffff4ed4>
   16a7c:	0023883a 	mov	r17,zero
   16a80:	0025883a 	mov	r18,zero
   16a84:	01c00044 	movi	r7,1
   16a88:	003f7806 	br	1686c <_gp+0xffff4e1c>
   16a8c:	01c000c4 	movi	r7,3
   16a90:	003f7606 	br	1686c <_gp+0xffff4e1c>
   16a94:	05400104 	movi	r21,4
   16a98:	0021883a 	mov	r16,zero
   16a9c:	002d883a 	mov	r22,zero
   16aa0:	01400044 	movi	r5,1
   16aa4:	003f5f06 	br	16824 <_gp+0xffff4dd4>
   16aa8:	05400304 	movi	r21,12
   16aac:	014000c4 	movi	r5,3
   16ab0:	003f5c06 	br	16824 <_gp+0xffff4dd4>
   16ab4:	04000434 	movhi	r16,16
   16ab8:	0027883a 	mov	r19,zero
   16abc:	843fffc4 	addi	r16,r16,-1
   16ac0:	05bfffc4 	movi	r22,-1
   16ac4:	0081ffc4 	movi	r2,2047
   16ac8:	003f9606 	br	16924 <_gp+0xffff4ed4>
   16acc:	8023883a 	mov	r17,r16
   16ad0:	b025883a 	mov	r18,r22
   16ad4:	280f883a 	mov	r7,r5
   16ad8:	003f8806 	br	168fc <_gp+0xffff4eac>
   16adc:	8023883a 	mov	r17,r16
   16ae0:	b025883a 	mov	r18,r22
   16ae4:	480d883a 	mov	r6,r9
   16ae8:	280f883a 	mov	r7,r5
   16aec:	003f8306 	br	168fc <_gp+0xffff4eac>
   16af0:	b026d43a 	srli	r19,r22,16
   16af4:	902ed43a 	srli	r23,r18,16
   16af8:	b5bfffcc 	andi	r22,r22,65535
   16afc:	94bfffcc 	andi	r18,r18,65535
   16b00:	b00b883a 	mov	r5,r22
   16b04:	9009883a 	mov	r4,r18
   16b08:	d8c00515 	stw	r3,20(sp)
   16b0c:	d9800715 	stw	r6,28(sp)
   16b10:	da000615 	stw	r8,24(sp)
   16b14:	00114000 	call	11400 <__mulsi3>
   16b18:	980b883a 	mov	r5,r19
   16b1c:	9009883a 	mov	r4,r18
   16b20:	1029883a 	mov	r20,r2
   16b24:	00114000 	call	11400 <__mulsi3>
   16b28:	b80b883a 	mov	r5,r23
   16b2c:	9809883a 	mov	r4,r19
   16b30:	102b883a 	mov	r21,r2
   16b34:	00114000 	call	11400 <__mulsi3>
   16b38:	b809883a 	mov	r4,r23
   16b3c:	b00b883a 	mov	r5,r22
   16b40:	1039883a 	mov	fp,r2
   16b44:	00114000 	call	11400 <__mulsi3>
   16b48:	a008d43a 	srli	r4,r20,16
   16b4c:	1545883a 	add	r2,r2,r21
   16b50:	d8c00517 	ldw	r3,20(sp)
   16b54:	2085883a 	add	r2,r4,r2
   16b58:	d9800717 	ldw	r6,28(sp)
   16b5c:	da000617 	ldw	r8,24(sp)
   16b60:	1540022e 	bgeu	r2,r21,16b6c <__muldf3+0x3c4>
   16b64:	01000074 	movhi	r4,1
   16b68:	e139883a 	add	fp,fp,r4
   16b6c:	100e943a 	slli	r7,r2,16
   16b70:	1004d43a 	srli	r2,r2,16
   16b74:	882ad43a 	srli	r21,r17,16
   16b78:	a53fffcc 	andi	r20,r20,65535
   16b7c:	8c7fffcc 	andi	r17,r17,65535
   16b80:	3d29883a 	add	r20,r7,r20
   16b84:	b00b883a 	mov	r5,r22
   16b88:	8809883a 	mov	r4,r17
   16b8c:	d8c00515 	stw	r3,20(sp)
   16b90:	d9800715 	stw	r6,28(sp)
   16b94:	da000615 	stw	r8,24(sp)
   16b98:	dd000115 	stw	r20,4(sp)
   16b9c:	d8800015 	stw	r2,0(sp)
   16ba0:	00114000 	call	11400 <__mulsi3>
   16ba4:	980b883a 	mov	r5,r19
   16ba8:	8809883a 	mov	r4,r17
   16bac:	d8800215 	stw	r2,8(sp)
   16bb0:	00114000 	call	11400 <__mulsi3>
   16bb4:	9809883a 	mov	r4,r19
   16bb8:	a80b883a 	mov	r5,r21
   16bbc:	1029883a 	mov	r20,r2
   16bc0:	00114000 	call	11400 <__mulsi3>
   16bc4:	b00b883a 	mov	r5,r22
   16bc8:	a809883a 	mov	r4,r21
   16bcc:	d8800415 	stw	r2,16(sp)
   16bd0:	00114000 	call	11400 <__mulsi3>
   16bd4:	d9c00217 	ldw	r7,8(sp)
   16bd8:	1505883a 	add	r2,r2,r20
   16bdc:	d8c00517 	ldw	r3,20(sp)
   16be0:	3826d43a 	srli	r19,r7,16
   16be4:	d9800717 	ldw	r6,28(sp)
   16be8:	da000617 	ldw	r8,24(sp)
   16bec:	9885883a 	add	r2,r19,r2
   16bf0:	da400417 	ldw	r9,16(sp)
   16bf4:	1500022e 	bgeu	r2,r20,16c00 <__muldf3+0x458>
   16bf8:	01000074 	movhi	r4,1
   16bfc:	4913883a 	add	r9,r9,r4
   16c00:	1028d43a 	srli	r20,r2,16
   16c04:	1004943a 	slli	r2,r2,16
   16c08:	802cd43a 	srli	r22,r16,16
   16c0c:	843fffcc 	andi	r16,r16,65535
   16c10:	3cffffcc 	andi	r19,r7,65535
   16c14:	9009883a 	mov	r4,r18
   16c18:	800b883a 	mov	r5,r16
   16c1c:	a269883a 	add	r20,r20,r9
   16c20:	d8c00515 	stw	r3,20(sp)
   16c24:	d9800715 	stw	r6,28(sp)
   16c28:	da000615 	stw	r8,24(sp)
   16c2c:	14e7883a 	add	r19,r2,r19
   16c30:	00114000 	call	11400 <__mulsi3>
   16c34:	9009883a 	mov	r4,r18
   16c38:	b00b883a 	mov	r5,r22
   16c3c:	d8800315 	stw	r2,12(sp)
   16c40:	00114000 	call	11400 <__mulsi3>
   16c44:	b809883a 	mov	r4,r23
   16c48:	b00b883a 	mov	r5,r22
   16c4c:	d8800215 	stw	r2,8(sp)
   16c50:	00114000 	call	11400 <__mulsi3>
   16c54:	b80b883a 	mov	r5,r23
   16c58:	8009883a 	mov	r4,r16
   16c5c:	d8800415 	stw	r2,16(sp)
   16c60:	00114000 	call	11400 <__mulsi3>
   16c64:	da800317 	ldw	r10,12(sp)
   16c68:	d9c00217 	ldw	r7,8(sp)
   16c6c:	d9000017 	ldw	r4,0(sp)
   16c70:	502ed43a 	srli	r23,r10,16
   16c74:	11c5883a 	add	r2,r2,r7
   16c78:	24e5883a 	add	r18,r4,r19
   16c7c:	b885883a 	add	r2,r23,r2
   16c80:	d8c00517 	ldw	r3,20(sp)
   16c84:	d9800717 	ldw	r6,28(sp)
   16c88:	da000617 	ldw	r8,24(sp)
   16c8c:	da400417 	ldw	r9,16(sp)
   16c90:	11c0022e 	bgeu	r2,r7,16c9c <__muldf3+0x4f4>
   16c94:	01000074 	movhi	r4,1
   16c98:	4913883a 	add	r9,r9,r4
   16c9c:	100ed43a 	srli	r7,r2,16
   16ca0:	1004943a 	slli	r2,r2,16
   16ca4:	55ffffcc 	andi	r23,r10,65535
   16ca8:	3a53883a 	add	r9,r7,r9
   16cac:	8809883a 	mov	r4,r17
   16cb0:	800b883a 	mov	r5,r16
   16cb4:	d8c00515 	stw	r3,20(sp)
   16cb8:	d9800715 	stw	r6,28(sp)
   16cbc:	da000615 	stw	r8,24(sp)
   16cc0:	da400415 	stw	r9,16(sp)
   16cc4:	15ef883a 	add	r23,r2,r23
   16cc8:	00114000 	call	11400 <__mulsi3>
   16ccc:	8809883a 	mov	r4,r17
   16cd0:	b00b883a 	mov	r5,r22
   16cd4:	d8800215 	stw	r2,8(sp)
   16cd8:	00114000 	call	11400 <__mulsi3>
   16cdc:	b00b883a 	mov	r5,r22
   16ce0:	a809883a 	mov	r4,r21
   16ce4:	d8800315 	stw	r2,12(sp)
   16ce8:	00114000 	call	11400 <__mulsi3>
   16cec:	8009883a 	mov	r4,r16
   16cf0:	a80b883a 	mov	r5,r21
   16cf4:	1023883a 	mov	r17,r2
   16cf8:	00114000 	call	11400 <__mulsi3>
   16cfc:	d9c00217 	ldw	r7,8(sp)
   16d00:	da800317 	ldw	r10,12(sp)
   16d04:	d8c00517 	ldw	r3,20(sp)
   16d08:	3808d43a 	srli	r4,r7,16
   16d0c:	1285883a 	add	r2,r2,r10
   16d10:	d9800717 	ldw	r6,28(sp)
   16d14:	2085883a 	add	r2,r4,r2
   16d18:	da000617 	ldw	r8,24(sp)
   16d1c:	da400417 	ldw	r9,16(sp)
   16d20:	1280022e 	bgeu	r2,r10,16d2c <__muldf3+0x584>
   16d24:	01000074 	movhi	r4,1
   16d28:	8923883a 	add	r17,r17,r4
   16d2c:	1008943a 	slli	r4,r2,16
   16d30:	39ffffcc 	andi	r7,r7,65535
   16d34:	e4b9883a 	add	fp,fp,r18
   16d38:	21cf883a 	add	r7,r4,r7
   16d3c:	e4e7803a 	cmpltu	r19,fp,r19
   16d40:	3d0f883a 	add	r7,r7,r20
   16d44:	bf39883a 	add	fp,r23,fp
   16d48:	99c9883a 	add	r4,r19,r7
   16d4c:	e5ef803a 	cmpltu	r23,fp,r23
   16d50:	490b883a 	add	r5,r9,r4
   16d54:	1004d43a 	srli	r2,r2,16
   16d58:	b965883a 	add	r18,r23,r5
   16d5c:	24c9803a 	cmpltu	r4,r4,r19
   16d60:	3d29803a 	cmpltu	r20,r7,r20
   16d64:	a128b03a 	or	r20,r20,r4
   16d68:	95ef803a 	cmpltu	r23,r18,r23
   16d6c:	2a53803a 	cmpltu	r9,r5,r9
   16d70:	a0a9883a 	add	r20,r20,r2
   16d74:	4deeb03a 	or	r23,r9,r23
   16d78:	a5ef883a 	add	r23,r20,r23
   16d7c:	bc63883a 	add	r17,r23,r17
   16d80:	e004927a 	slli	r2,fp,9
   16d84:	d9000117 	ldw	r4,4(sp)
   16d88:	882e927a 	slli	r23,r17,9
   16d8c:	9022d5fa 	srli	r17,r18,23
   16d90:	e038d5fa 	srli	fp,fp,23
   16d94:	1104b03a 	or	r2,r2,r4
   16d98:	9024927a 	slli	r18,r18,9
   16d9c:	1004c03a 	cmpne	r2,r2,zero
   16da0:	bc62b03a 	or	r17,r23,r17
   16da4:	1738b03a 	or	fp,r2,fp
   16da8:	8880402c 	andhi	r2,r17,256
   16dac:	e4a4b03a 	or	r18,fp,r18
   16db0:	10000726 	beq	r2,zero,16dd0 <__muldf3+0x628>
   16db4:	9006d07a 	srli	r3,r18,1
   16db8:	880497fa 	slli	r2,r17,31
   16dbc:	9480004c 	andi	r18,r18,1
   16dc0:	8822d07a 	srli	r17,r17,1
   16dc4:	1ca4b03a 	or	r18,r3,r18
   16dc8:	14a4b03a 	or	r18,r2,r18
   16dcc:	4007883a 	mov	r3,r8
   16dd0:	1880ffc4 	addi	r2,r3,1023
   16dd4:	0080460e 	bge	zero,r2,16ef0 <__muldf3+0x748>
   16dd8:	910001cc 	andi	r4,r18,7
   16ddc:	20000726 	beq	r4,zero,16dfc <__muldf3+0x654>
   16de0:	910003cc 	andi	r4,r18,15
   16de4:	01400104 	movi	r5,4
   16de8:	21400426 	beq	r4,r5,16dfc <__muldf3+0x654>
   16dec:	9149883a 	add	r4,r18,r5
   16df0:	24a5803a 	cmpltu	r18,r4,r18
   16df4:	8ca3883a 	add	r17,r17,r18
   16df8:	2025883a 	mov	r18,r4
   16dfc:	8900402c 	andhi	r4,r17,256
   16e00:	20000426 	beq	r4,zero,16e14 <__muldf3+0x66c>
   16e04:	18810004 	addi	r2,r3,1024
   16e08:	00ffc034 	movhi	r3,65280
   16e0c:	18ffffc4 	addi	r3,r3,-1
   16e10:	88e2703a 	and	r17,r17,r3
   16e14:	00c1ff84 	movi	r3,2046
   16e18:	18bf1316 	blt	r3,r2,16a68 <_gp+0xffff5018>
   16e1c:	882c977a 	slli	r22,r17,29
   16e20:	9024d0fa 	srli	r18,r18,3
   16e24:	8822927a 	slli	r17,r17,9
   16e28:	1081ffcc 	andi	r2,r2,2047
   16e2c:	b4acb03a 	or	r22,r22,r18
   16e30:	8820d33a 	srli	r16,r17,12
   16e34:	3027883a 	mov	r19,r6
   16e38:	003eba06 	br	16924 <_gp+0xffff4ed4>
   16e3c:	8080022c 	andhi	r2,r16,8
   16e40:	10000926 	beq	r2,zero,16e68 <__muldf3+0x6c0>
   16e44:	8880022c 	andhi	r2,r17,8
   16e48:	1000071e 	bne	r2,zero,16e68 <__muldf3+0x6c0>
   16e4c:	00800434 	movhi	r2,16
   16e50:	8c000234 	orhi	r16,r17,8
   16e54:	10bfffc4 	addi	r2,r2,-1
   16e58:	e027883a 	mov	r19,fp
   16e5c:	80a0703a 	and	r16,r16,r2
   16e60:	902d883a 	mov	r22,r18
   16e64:	003f1706 	br	16ac4 <_gp+0xffff5074>
   16e68:	00800434 	movhi	r2,16
   16e6c:	84000234 	orhi	r16,r16,8
   16e70:	10bfffc4 	addi	r2,r2,-1
   16e74:	80a0703a 	and	r16,r16,r2
   16e78:	003f1206 	br	16ac4 <_gp+0xffff5074>
   16e7c:	147ff604 	addi	r17,r2,-40
   16e80:	3462983a 	sll	r17,r6,r17
   16e84:	0025883a 	mov	r18,zero
   16e88:	003ef306 	br	16a58 <_gp+0xffff5008>
   16e8c:	3009883a 	mov	r4,r6
   16e90:	d9400215 	stw	r5,8(sp)
   16e94:	d9800715 	stw	r6,28(sp)
   16e98:	da400415 	stw	r9,16(sp)
   16e9c:	da800315 	stw	r10,12(sp)
   16ea0:	001139c0 	call	1139c <__clzsi2>
   16ea4:	10800804 	addi	r2,r2,32
   16ea8:	da800317 	ldw	r10,12(sp)
   16eac:	da400417 	ldw	r9,16(sp)
   16eb0:	d9800717 	ldw	r6,28(sp)
   16eb4:	d9400217 	ldw	r5,8(sp)
   16eb8:	003edd06 	br	16a30 <_gp+0xffff4fe0>
   16ebc:	143ff604 	addi	r16,r2,-40
   16ec0:	ac20983a 	sll	r16,r21,r16
   16ec4:	002d883a 	mov	r22,zero
   16ec8:	003ec106 	br	169d0 <_gp+0xffff4f80>
   16ecc:	d9800715 	stw	r6,28(sp)
   16ed0:	d9c00215 	stw	r7,8(sp)
   16ed4:	da400415 	stw	r9,16(sp)
   16ed8:	001139c0 	call	1139c <__clzsi2>
   16edc:	10800804 	addi	r2,r2,32
   16ee0:	da400417 	ldw	r9,16(sp)
   16ee4:	d9c00217 	ldw	r7,8(sp)
   16ee8:	d9800717 	ldw	r6,28(sp)
   16eec:	003eae06 	br	169a8 <_gp+0xffff4f58>
   16ef0:	00c00044 	movi	r3,1
   16ef4:	1887c83a 	sub	r3,r3,r2
   16ef8:	01000e04 	movi	r4,56
   16efc:	20fe8516 	blt	r4,r3,16914 <_gp+0xffff4ec4>
   16f00:	010007c4 	movi	r4,31
   16f04:	20c01b16 	blt	r4,r3,16f74 <__muldf3+0x7cc>
   16f08:	00800804 	movi	r2,32
   16f0c:	10c5c83a 	sub	r2,r2,r3
   16f10:	888a983a 	sll	r5,r17,r2
   16f14:	90c8d83a 	srl	r4,r18,r3
   16f18:	9084983a 	sll	r2,r18,r2
   16f1c:	88e2d83a 	srl	r17,r17,r3
   16f20:	2906b03a 	or	r3,r5,r4
   16f24:	1004c03a 	cmpne	r2,r2,zero
   16f28:	1886b03a 	or	r3,r3,r2
   16f2c:	188001cc 	andi	r2,r3,7
   16f30:	10000726 	beq	r2,zero,16f50 <__muldf3+0x7a8>
   16f34:	188003cc 	andi	r2,r3,15
   16f38:	01000104 	movi	r4,4
   16f3c:	11000426 	beq	r2,r4,16f50 <__muldf3+0x7a8>
   16f40:	1805883a 	mov	r2,r3
   16f44:	10c00104 	addi	r3,r2,4
   16f48:	1885803a 	cmpltu	r2,r3,r2
   16f4c:	88a3883a 	add	r17,r17,r2
   16f50:	8880202c 	andhi	r2,r17,128
   16f54:	10001c26 	beq	r2,zero,16fc8 <__muldf3+0x820>
   16f58:	3027883a 	mov	r19,r6
   16f5c:	00800044 	movi	r2,1
   16f60:	0021883a 	mov	r16,zero
   16f64:	002d883a 	mov	r22,zero
   16f68:	003e6e06 	br	16924 <_gp+0xffff4ed4>
   16f6c:	4007883a 	mov	r3,r8
   16f70:	003f9706 	br	16dd0 <_gp+0xffff5380>
   16f74:	017ff844 	movi	r5,-31
   16f78:	2885c83a 	sub	r2,r5,r2
   16f7c:	888ad83a 	srl	r5,r17,r2
   16f80:	00800804 	movi	r2,32
   16f84:	18801a26 	beq	r3,r2,16ff0 <__muldf3+0x848>
   16f88:	01001004 	movi	r4,64
   16f8c:	20c7c83a 	sub	r3,r4,r3
   16f90:	88e2983a 	sll	r17,r17,r3
   16f94:	8ca4b03a 	or	r18,r17,r18
   16f98:	9004c03a 	cmpne	r2,r18,zero
   16f9c:	2884b03a 	or	r2,r5,r2
   16fa0:	144001cc 	andi	r17,r2,7
   16fa4:	88000d1e 	bne	r17,zero,16fdc <__muldf3+0x834>
   16fa8:	0021883a 	mov	r16,zero
   16fac:	102cd0fa 	srli	r22,r2,3
   16fb0:	3027883a 	mov	r19,r6
   16fb4:	0005883a 	mov	r2,zero
   16fb8:	b46cb03a 	or	r22,r22,r17
   16fbc:	003e5906 	br	16924 <_gp+0xffff4ed4>
   16fc0:	1007883a 	mov	r3,r2
   16fc4:	0023883a 	mov	r17,zero
   16fc8:	8820927a 	slli	r16,r17,9
   16fcc:	1805883a 	mov	r2,r3
   16fd0:	8822977a 	slli	r17,r17,29
   16fd4:	8020d33a 	srli	r16,r16,12
   16fd8:	003ff406 	br	16fac <_gp+0xffff555c>
   16fdc:	10c003cc 	andi	r3,r2,15
   16fe0:	01000104 	movi	r4,4
   16fe4:	193ff626 	beq	r3,r4,16fc0 <_gp+0xffff5570>
   16fe8:	0023883a 	mov	r17,zero
   16fec:	003fd506 	br	16f44 <_gp+0xffff54f4>
   16ff0:	0023883a 	mov	r17,zero
   16ff4:	003fe706 	br	16f94 <_gp+0xffff5544>
   16ff8:	00800434 	movhi	r2,16
   16ffc:	8c000234 	orhi	r16,r17,8
   17000:	10bfffc4 	addi	r2,r2,-1
   17004:	3027883a 	mov	r19,r6
   17008:	80a0703a 	and	r16,r16,r2
   1700c:	902d883a 	mov	r22,r18
   17010:	003eac06 	br	16ac4 <_gp+0xffff5074>

00017014 <__subdf3>:
   17014:	02000434 	movhi	r8,16
   17018:	423fffc4 	addi	r8,r8,-1
   1701c:	defffb04 	addi	sp,sp,-20
   17020:	2a14703a 	and	r10,r5,r8
   17024:	3812d53a 	srli	r9,r7,20
   17028:	3a10703a 	and	r8,r7,r8
   1702c:	2006d77a 	srli	r3,r4,29
   17030:	3004d77a 	srli	r2,r6,29
   17034:	dc000015 	stw	r16,0(sp)
   17038:	501490fa 	slli	r10,r10,3
   1703c:	2820d53a 	srli	r16,r5,20
   17040:	401090fa 	slli	r8,r8,3
   17044:	dc800215 	stw	r18,8(sp)
   17048:	dc400115 	stw	r17,4(sp)
   1704c:	dfc00415 	stw	ra,16(sp)
   17050:	202290fa 	slli	r17,r4,3
   17054:	dcc00315 	stw	r19,12(sp)
   17058:	4a41ffcc 	andi	r9,r9,2047
   1705c:	0101ffc4 	movi	r4,2047
   17060:	2824d7fa 	srli	r18,r5,31
   17064:	8401ffcc 	andi	r16,r16,2047
   17068:	50c6b03a 	or	r3,r10,r3
   1706c:	380ed7fa 	srli	r7,r7,31
   17070:	408ab03a 	or	r5,r8,r2
   17074:	300c90fa 	slli	r6,r6,3
   17078:	49009626 	beq	r9,r4,172d4 <__subdf3+0x2c0>
   1707c:	39c0005c 	xori	r7,r7,1
   17080:	8245c83a 	sub	r2,r16,r9
   17084:	3c807426 	beq	r7,r18,17258 <__subdf3+0x244>
   17088:	0080af0e 	bge	zero,r2,17348 <__subdf3+0x334>
   1708c:	48002a1e 	bne	r9,zero,17138 <__subdf3+0x124>
   17090:	2988b03a 	or	r4,r5,r6
   17094:	20009a1e 	bne	r4,zero,17300 <__subdf3+0x2ec>
   17098:	888001cc 	andi	r2,r17,7
   1709c:	10000726 	beq	r2,zero,170bc <__subdf3+0xa8>
   170a0:	888003cc 	andi	r2,r17,15
   170a4:	01000104 	movi	r4,4
   170a8:	11000426 	beq	r2,r4,170bc <__subdf3+0xa8>
   170ac:	890b883a 	add	r5,r17,r4
   170b0:	2c63803a 	cmpltu	r17,r5,r17
   170b4:	1c47883a 	add	r3,r3,r17
   170b8:	2823883a 	mov	r17,r5
   170bc:	1880202c 	andhi	r2,r3,128
   170c0:	10005926 	beq	r2,zero,17228 <__subdf3+0x214>
   170c4:	84000044 	addi	r16,r16,1
   170c8:	0081ffc4 	movi	r2,2047
   170cc:	8080be26 	beq	r16,r2,173c8 <__subdf3+0x3b4>
   170d0:	017fe034 	movhi	r5,65408
   170d4:	297fffc4 	addi	r5,r5,-1
   170d8:	1946703a 	and	r3,r3,r5
   170dc:	1804977a 	slli	r2,r3,29
   170e0:	1806927a 	slli	r3,r3,9
   170e4:	8822d0fa 	srli	r17,r17,3
   170e8:	8401ffcc 	andi	r16,r16,2047
   170ec:	180ad33a 	srli	r5,r3,12
   170f0:	9100004c 	andi	r4,r18,1
   170f4:	1444b03a 	or	r2,r2,r17
   170f8:	80c1ffcc 	andi	r3,r16,2047
   170fc:	1820953a 	slli	r16,r3,20
   17100:	20c03fcc 	andi	r3,r4,255
   17104:	180897fa 	slli	r4,r3,31
   17108:	00c00434 	movhi	r3,16
   1710c:	18ffffc4 	addi	r3,r3,-1
   17110:	28c6703a 	and	r3,r5,r3
   17114:	1c06b03a 	or	r3,r3,r16
   17118:	1906b03a 	or	r3,r3,r4
   1711c:	dfc00417 	ldw	ra,16(sp)
   17120:	dcc00317 	ldw	r19,12(sp)
   17124:	dc800217 	ldw	r18,8(sp)
   17128:	dc400117 	ldw	r17,4(sp)
   1712c:	dc000017 	ldw	r16,0(sp)
   17130:	dec00504 	addi	sp,sp,20
   17134:	f800283a 	ret
   17138:	0101ffc4 	movi	r4,2047
   1713c:	813fd626 	beq	r16,r4,17098 <_gp+0xffff5648>
   17140:	29402034 	orhi	r5,r5,128
   17144:	01000e04 	movi	r4,56
   17148:	2080a316 	blt	r4,r2,173d8 <__subdf3+0x3c4>
   1714c:	010007c4 	movi	r4,31
   17150:	2080c616 	blt	r4,r2,1746c <__subdf3+0x458>
   17154:	01000804 	movi	r4,32
   17158:	2089c83a 	sub	r4,r4,r2
   1715c:	2910983a 	sll	r8,r5,r4
   17160:	308ed83a 	srl	r7,r6,r2
   17164:	3108983a 	sll	r4,r6,r4
   17168:	2884d83a 	srl	r2,r5,r2
   1716c:	41ccb03a 	or	r6,r8,r7
   17170:	2008c03a 	cmpne	r4,r4,zero
   17174:	310cb03a 	or	r6,r6,r4
   17178:	898dc83a 	sub	r6,r17,r6
   1717c:	89a3803a 	cmpltu	r17,r17,r6
   17180:	1887c83a 	sub	r3,r3,r2
   17184:	1c47c83a 	sub	r3,r3,r17
   17188:	3023883a 	mov	r17,r6
   1718c:	1880202c 	andhi	r2,r3,128
   17190:	10002326 	beq	r2,zero,17220 <__subdf3+0x20c>
   17194:	04c02034 	movhi	r19,128
   17198:	9cffffc4 	addi	r19,r19,-1
   1719c:	1ce6703a 	and	r19,r3,r19
   171a0:	98007a26 	beq	r19,zero,1738c <__subdf3+0x378>
   171a4:	9809883a 	mov	r4,r19
   171a8:	001139c0 	call	1139c <__clzsi2>
   171ac:	113ffe04 	addi	r4,r2,-8
   171b0:	00c007c4 	movi	r3,31
   171b4:	19007b16 	blt	r3,r4,173a4 <__subdf3+0x390>
   171b8:	00800804 	movi	r2,32
   171bc:	1105c83a 	sub	r2,r2,r4
   171c0:	8884d83a 	srl	r2,r17,r2
   171c4:	9906983a 	sll	r3,r19,r4
   171c8:	8922983a 	sll	r17,r17,r4
   171cc:	10c4b03a 	or	r2,r2,r3
   171d0:	24007816 	blt	r4,r16,173b4 <__subdf3+0x3a0>
   171d4:	2421c83a 	sub	r16,r4,r16
   171d8:	80c00044 	addi	r3,r16,1
   171dc:	010007c4 	movi	r4,31
   171e0:	20c09516 	blt	r4,r3,17438 <__subdf3+0x424>
   171e4:	01400804 	movi	r5,32
   171e8:	28cbc83a 	sub	r5,r5,r3
   171ec:	88c8d83a 	srl	r4,r17,r3
   171f0:	8962983a 	sll	r17,r17,r5
   171f4:	114a983a 	sll	r5,r2,r5
   171f8:	10c6d83a 	srl	r3,r2,r3
   171fc:	8804c03a 	cmpne	r2,r17,zero
   17200:	290ab03a 	or	r5,r5,r4
   17204:	28a2b03a 	or	r17,r5,r2
   17208:	0021883a 	mov	r16,zero
   1720c:	003fa206 	br	17098 <_gp+0xffff5648>
   17210:	2090b03a 	or	r8,r4,r2
   17214:	40018e26 	beq	r8,zero,17850 <__subdf3+0x83c>
   17218:	1007883a 	mov	r3,r2
   1721c:	2023883a 	mov	r17,r4
   17220:	888001cc 	andi	r2,r17,7
   17224:	103f9e1e 	bne	r2,zero,170a0 <_gp+0xffff5650>
   17228:	1804977a 	slli	r2,r3,29
   1722c:	8822d0fa 	srli	r17,r17,3
   17230:	1810d0fa 	srli	r8,r3,3
   17234:	9100004c 	andi	r4,r18,1
   17238:	1444b03a 	or	r2,r2,r17
   1723c:	00c1ffc4 	movi	r3,2047
   17240:	80c02826 	beq	r16,r3,172e4 <__subdf3+0x2d0>
   17244:	01400434 	movhi	r5,16
   17248:	297fffc4 	addi	r5,r5,-1
   1724c:	80e0703a 	and	r16,r16,r3
   17250:	414a703a 	and	r5,r8,r5
   17254:	003fa806 	br	170f8 <_gp+0xffff56a8>
   17258:	0080630e 	bge	zero,r2,173e8 <__subdf3+0x3d4>
   1725c:	48003026 	beq	r9,zero,17320 <__subdf3+0x30c>
   17260:	0101ffc4 	movi	r4,2047
   17264:	813f8c26 	beq	r16,r4,17098 <_gp+0xffff5648>
   17268:	29402034 	orhi	r5,r5,128
   1726c:	01000e04 	movi	r4,56
   17270:	2080a90e 	bge	r4,r2,17518 <__subdf3+0x504>
   17274:	298cb03a 	or	r6,r5,r6
   17278:	3012c03a 	cmpne	r9,r6,zero
   1727c:	0005883a 	mov	r2,zero
   17280:	4c53883a 	add	r9,r9,r17
   17284:	4c63803a 	cmpltu	r17,r9,r17
   17288:	10c7883a 	add	r3,r2,r3
   1728c:	88c7883a 	add	r3,r17,r3
   17290:	4823883a 	mov	r17,r9
   17294:	1880202c 	andhi	r2,r3,128
   17298:	1000d026 	beq	r2,zero,175dc <__subdf3+0x5c8>
   1729c:	84000044 	addi	r16,r16,1
   172a0:	0081ffc4 	movi	r2,2047
   172a4:	8080fe26 	beq	r16,r2,176a0 <__subdf3+0x68c>
   172a8:	00bfe034 	movhi	r2,65408
   172ac:	10bfffc4 	addi	r2,r2,-1
   172b0:	1886703a 	and	r3,r3,r2
   172b4:	880ad07a 	srli	r5,r17,1
   172b8:	180497fa 	slli	r2,r3,31
   172bc:	8900004c 	andi	r4,r17,1
   172c0:	2922b03a 	or	r17,r5,r4
   172c4:	1806d07a 	srli	r3,r3,1
   172c8:	1462b03a 	or	r17,r2,r17
   172cc:	3825883a 	mov	r18,r7
   172d0:	003f7106 	br	17098 <_gp+0xffff5648>
   172d4:	2984b03a 	or	r2,r5,r6
   172d8:	103f6826 	beq	r2,zero,1707c <_gp+0xffff562c>
   172dc:	39c03fcc 	andi	r7,r7,255
   172e0:	003f6706 	br	17080 <_gp+0xffff5630>
   172e4:	4086b03a 	or	r3,r8,r2
   172e8:	18015226 	beq	r3,zero,17834 <__subdf3+0x820>
   172ec:	00c00434 	movhi	r3,16
   172f0:	41400234 	orhi	r5,r8,8
   172f4:	18ffffc4 	addi	r3,r3,-1
   172f8:	28ca703a 	and	r5,r5,r3
   172fc:	003f7e06 	br	170f8 <_gp+0xffff56a8>
   17300:	10bfffc4 	addi	r2,r2,-1
   17304:	1000491e 	bne	r2,zero,1742c <__subdf3+0x418>
   17308:	898fc83a 	sub	r7,r17,r6
   1730c:	89e3803a 	cmpltu	r17,r17,r7
   17310:	1947c83a 	sub	r3,r3,r5
   17314:	1c47c83a 	sub	r3,r3,r17
   17318:	3823883a 	mov	r17,r7
   1731c:	003f9b06 	br	1718c <_gp+0xffff573c>
   17320:	2988b03a 	or	r4,r5,r6
   17324:	203f5c26 	beq	r4,zero,17098 <_gp+0xffff5648>
   17328:	10bfffc4 	addi	r2,r2,-1
   1732c:	1000931e 	bne	r2,zero,1757c <__subdf3+0x568>
   17330:	898d883a 	add	r6,r17,r6
   17334:	3463803a 	cmpltu	r17,r6,r17
   17338:	1947883a 	add	r3,r3,r5
   1733c:	88c7883a 	add	r3,r17,r3
   17340:	3023883a 	mov	r17,r6
   17344:	003fd306 	br	17294 <_gp+0xffff5844>
   17348:	1000541e 	bne	r2,zero,1749c <__subdf3+0x488>
   1734c:	80800044 	addi	r2,r16,1
   17350:	1081ffcc 	andi	r2,r2,2047
   17354:	01000044 	movi	r4,1
   17358:	2080a20e 	bge	r4,r2,175e4 <__subdf3+0x5d0>
   1735c:	8989c83a 	sub	r4,r17,r6
   17360:	8905803a 	cmpltu	r2,r17,r4
   17364:	1967c83a 	sub	r19,r3,r5
   17368:	98a7c83a 	sub	r19,r19,r2
   1736c:	9880202c 	andhi	r2,r19,128
   17370:	10006326 	beq	r2,zero,17500 <__subdf3+0x4ec>
   17374:	3463c83a 	sub	r17,r6,r17
   17378:	28c7c83a 	sub	r3,r5,r3
   1737c:	344d803a 	cmpltu	r6,r6,r17
   17380:	19a7c83a 	sub	r19,r3,r6
   17384:	3825883a 	mov	r18,r7
   17388:	983f861e 	bne	r19,zero,171a4 <_gp+0xffff5754>
   1738c:	8809883a 	mov	r4,r17
   17390:	001139c0 	call	1139c <__clzsi2>
   17394:	10800804 	addi	r2,r2,32
   17398:	113ffe04 	addi	r4,r2,-8
   1739c:	00c007c4 	movi	r3,31
   173a0:	193f850e 	bge	r3,r4,171b8 <_gp+0xffff5768>
   173a4:	10bff604 	addi	r2,r2,-40
   173a8:	8884983a 	sll	r2,r17,r2
   173ac:	0023883a 	mov	r17,zero
   173b0:	243f880e 	bge	r4,r16,171d4 <_gp+0xffff5784>
   173b4:	00ffe034 	movhi	r3,65408
   173b8:	18ffffc4 	addi	r3,r3,-1
   173bc:	8121c83a 	sub	r16,r16,r4
   173c0:	10c6703a 	and	r3,r2,r3
   173c4:	003f3406 	br	17098 <_gp+0xffff5648>
   173c8:	9100004c 	andi	r4,r18,1
   173cc:	000b883a 	mov	r5,zero
   173d0:	0005883a 	mov	r2,zero
   173d4:	003f4806 	br	170f8 <_gp+0xffff56a8>
   173d8:	298cb03a 	or	r6,r5,r6
   173dc:	300cc03a 	cmpne	r6,r6,zero
   173e0:	0005883a 	mov	r2,zero
   173e4:	003f6406 	br	17178 <_gp+0xffff5728>
   173e8:	10009a1e 	bne	r2,zero,17654 <__subdf3+0x640>
   173ec:	82400044 	addi	r9,r16,1
   173f0:	4881ffcc 	andi	r2,r9,2047
   173f4:	02800044 	movi	r10,1
   173f8:	5080670e 	bge	r10,r2,17598 <__subdf3+0x584>
   173fc:	0081ffc4 	movi	r2,2047
   17400:	4880af26 	beq	r9,r2,176c0 <__subdf3+0x6ac>
   17404:	898d883a 	add	r6,r17,r6
   17408:	1945883a 	add	r2,r3,r5
   1740c:	3447803a 	cmpltu	r3,r6,r17
   17410:	1887883a 	add	r3,r3,r2
   17414:	182297fa 	slli	r17,r3,31
   17418:	300cd07a 	srli	r6,r6,1
   1741c:	1806d07a 	srli	r3,r3,1
   17420:	4821883a 	mov	r16,r9
   17424:	89a2b03a 	or	r17,r17,r6
   17428:	003f1b06 	br	17098 <_gp+0xffff5648>
   1742c:	0101ffc4 	movi	r4,2047
   17430:	813f441e 	bne	r16,r4,17144 <_gp+0xffff56f4>
   17434:	003f1806 	br	17098 <_gp+0xffff5648>
   17438:	843ff844 	addi	r16,r16,-31
   1743c:	01400804 	movi	r5,32
   17440:	1408d83a 	srl	r4,r2,r16
   17444:	19405026 	beq	r3,r5,17588 <__subdf3+0x574>
   17448:	01401004 	movi	r5,64
   1744c:	28c7c83a 	sub	r3,r5,r3
   17450:	10c4983a 	sll	r2,r2,r3
   17454:	88a2b03a 	or	r17,r17,r2
   17458:	8822c03a 	cmpne	r17,r17,zero
   1745c:	2462b03a 	or	r17,r4,r17
   17460:	0007883a 	mov	r3,zero
   17464:	0021883a 	mov	r16,zero
   17468:	003f6d06 	br	17220 <_gp+0xffff57d0>
   1746c:	11fff804 	addi	r7,r2,-32
   17470:	01000804 	movi	r4,32
   17474:	29ced83a 	srl	r7,r5,r7
   17478:	11004526 	beq	r2,r4,17590 <__subdf3+0x57c>
   1747c:	01001004 	movi	r4,64
   17480:	2089c83a 	sub	r4,r4,r2
   17484:	2904983a 	sll	r2,r5,r4
   17488:	118cb03a 	or	r6,r2,r6
   1748c:	300cc03a 	cmpne	r6,r6,zero
   17490:	398cb03a 	or	r6,r7,r6
   17494:	0005883a 	mov	r2,zero
   17498:	003f3706 	br	17178 <_gp+0xffff5728>
   1749c:	80002a26 	beq	r16,zero,17548 <__subdf3+0x534>
   174a0:	0101ffc4 	movi	r4,2047
   174a4:	49006626 	beq	r9,r4,17640 <__subdf3+0x62c>
   174a8:	0085c83a 	sub	r2,zero,r2
   174ac:	18c02034 	orhi	r3,r3,128
   174b0:	01000e04 	movi	r4,56
   174b4:	20807e16 	blt	r4,r2,176b0 <__subdf3+0x69c>
   174b8:	010007c4 	movi	r4,31
   174bc:	2080e716 	blt	r4,r2,1785c <__subdf3+0x848>
   174c0:	01000804 	movi	r4,32
   174c4:	2089c83a 	sub	r4,r4,r2
   174c8:	1914983a 	sll	r10,r3,r4
   174cc:	8890d83a 	srl	r8,r17,r2
   174d0:	8908983a 	sll	r4,r17,r4
   174d4:	1884d83a 	srl	r2,r3,r2
   174d8:	5222b03a 	or	r17,r10,r8
   174dc:	2006c03a 	cmpne	r3,r4,zero
   174e0:	88e2b03a 	or	r17,r17,r3
   174e4:	3463c83a 	sub	r17,r6,r17
   174e8:	2885c83a 	sub	r2,r5,r2
   174ec:	344d803a 	cmpltu	r6,r6,r17
   174f0:	1187c83a 	sub	r3,r2,r6
   174f4:	4821883a 	mov	r16,r9
   174f8:	3825883a 	mov	r18,r7
   174fc:	003f2306 	br	1718c <_gp+0xffff573c>
   17500:	24d0b03a 	or	r8,r4,r19
   17504:	40001b1e 	bne	r8,zero,17574 <__subdf3+0x560>
   17508:	0005883a 	mov	r2,zero
   1750c:	0009883a 	mov	r4,zero
   17510:	0021883a 	mov	r16,zero
   17514:	003f4906 	br	1723c <_gp+0xffff57ec>
   17518:	010007c4 	movi	r4,31
   1751c:	20803a16 	blt	r4,r2,17608 <__subdf3+0x5f4>
   17520:	01000804 	movi	r4,32
   17524:	2089c83a 	sub	r4,r4,r2
   17528:	2912983a 	sll	r9,r5,r4
   1752c:	3090d83a 	srl	r8,r6,r2
   17530:	3108983a 	sll	r4,r6,r4
   17534:	2884d83a 	srl	r2,r5,r2
   17538:	4a12b03a 	or	r9,r9,r8
   1753c:	2008c03a 	cmpne	r4,r4,zero
   17540:	4912b03a 	or	r9,r9,r4
   17544:	003f4e06 	br	17280 <_gp+0xffff5830>
   17548:	1c48b03a 	or	r4,r3,r17
   1754c:	20003c26 	beq	r4,zero,17640 <__subdf3+0x62c>
   17550:	0084303a 	nor	r2,zero,r2
   17554:	1000381e 	bne	r2,zero,17638 <__subdf3+0x624>
   17558:	3463c83a 	sub	r17,r6,r17
   1755c:	28c5c83a 	sub	r2,r5,r3
   17560:	344d803a 	cmpltu	r6,r6,r17
   17564:	1187c83a 	sub	r3,r2,r6
   17568:	4821883a 	mov	r16,r9
   1756c:	3825883a 	mov	r18,r7
   17570:	003f0606 	br	1718c <_gp+0xffff573c>
   17574:	2023883a 	mov	r17,r4
   17578:	003f0906 	br	171a0 <_gp+0xffff5750>
   1757c:	0101ffc4 	movi	r4,2047
   17580:	813f3a1e 	bne	r16,r4,1726c <_gp+0xffff581c>
   17584:	003ec406 	br	17098 <_gp+0xffff5648>
   17588:	0005883a 	mov	r2,zero
   1758c:	003fb106 	br	17454 <_gp+0xffff5a04>
   17590:	0005883a 	mov	r2,zero
   17594:	003fbc06 	br	17488 <_gp+0xffff5a38>
   17598:	1c44b03a 	or	r2,r3,r17
   1759c:	80008e1e 	bne	r16,zero,177d8 <__subdf3+0x7c4>
   175a0:	1000c826 	beq	r2,zero,178c4 <__subdf3+0x8b0>
   175a4:	2984b03a 	or	r2,r5,r6
   175a8:	103ebb26 	beq	r2,zero,17098 <_gp+0xffff5648>
   175ac:	8989883a 	add	r4,r17,r6
   175b0:	1945883a 	add	r2,r3,r5
   175b4:	2447803a 	cmpltu	r3,r4,r17
   175b8:	1887883a 	add	r3,r3,r2
   175bc:	1880202c 	andhi	r2,r3,128
   175c0:	2023883a 	mov	r17,r4
   175c4:	103f1626 	beq	r2,zero,17220 <_gp+0xffff57d0>
   175c8:	00bfe034 	movhi	r2,65408
   175cc:	10bfffc4 	addi	r2,r2,-1
   175d0:	5021883a 	mov	r16,r10
   175d4:	1886703a 	and	r3,r3,r2
   175d8:	003eaf06 	br	17098 <_gp+0xffff5648>
   175dc:	3825883a 	mov	r18,r7
   175e0:	003f0f06 	br	17220 <_gp+0xffff57d0>
   175e4:	1c44b03a 	or	r2,r3,r17
   175e8:	8000251e 	bne	r16,zero,17680 <__subdf3+0x66c>
   175ec:	1000661e 	bne	r2,zero,17788 <__subdf3+0x774>
   175f0:	2990b03a 	or	r8,r5,r6
   175f4:	40009626 	beq	r8,zero,17850 <__subdf3+0x83c>
   175f8:	2807883a 	mov	r3,r5
   175fc:	3023883a 	mov	r17,r6
   17600:	3825883a 	mov	r18,r7
   17604:	003ea406 	br	17098 <_gp+0xffff5648>
   17608:	127ff804 	addi	r9,r2,-32
   1760c:	01000804 	movi	r4,32
   17610:	2a52d83a 	srl	r9,r5,r9
   17614:	11008c26 	beq	r2,r4,17848 <__subdf3+0x834>
   17618:	01001004 	movi	r4,64
   1761c:	2085c83a 	sub	r2,r4,r2
   17620:	2884983a 	sll	r2,r5,r2
   17624:	118cb03a 	or	r6,r2,r6
   17628:	300cc03a 	cmpne	r6,r6,zero
   1762c:	4992b03a 	or	r9,r9,r6
   17630:	0005883a 	mov	r2,zero
   17634:	003f1206 	br	17280 <_gp+0xffff5830>
   17638:	0101ffc4 	movi	r4,2047
   1763c:	493f9c1e 	bne	r9,r4,174b0 <_gp+0xffff5a60>
   17640:	2807883a 	mov	r3,r5
   17644:	3023883a 	mov	r17,r6
   17648:	4821883a 	mov	r16,r9
   1764c:	3825883a 	mov	r18,r7
   17650:	003e9106 	br	17098 <_gp+0xffff5648>
   17654:	80001f1e 	bne	r16,zero,176d4 <__subdf3+0x6c0>
   17658:	1c48b03a 	or	r4,r3,r17
   1765c:	20005a26 	beq	r4,zero,177c8 <__subdf3+0x7b4>
   17660:	0084303a 	nor	r2,zero,r2
   17664:	1000561e 	bne	r2,zero,177c0 <__subdf3+0x7ac>
   17668:	89a3883a 	add	r17,r17,r6
   1766c:	1945883a 	add	r2,r3,r5
   17670:	898d803a 	cmpltu	r6,r17,r6
   17674:	3087883a 	add	r3,r6,r2
   17678:	4821883a 	mov	r16,r9
   1767c:	003f0506 	br	17294 <_gp+0xffff5844>
   17680:	10002b1e 	bne	r2,zero,17730 <__subdf3+0x71c>
   17684:	2984b03a 	or	r2,r5,r6
   17688:	10008026 	beq	r2,zero,1788c <__subdf3+0x878>
   1768c:	2807883a 	mov	r3,r5
   17690:	3023883a 	mov	r17,r6
   17694:	3825883a 	mov	r18,r7
   17698:	0401ffc4 	movi	r16,2047
   1769c:	003e7e06 	br	17098 <_gp+0xffff5648>
   176a0:	3809883a 	mov	r4,r7
   176a4:	0011883a 	mov	r8,zero
   176a8:	0005883a 	mov	r2,zero
   176ac:	003ee306 	br	1723c <_gp+0xffff57ec>
   176b0:	1c62b03a 	or	r17,r3,r17
   176b4:	8822c03a 	cmpne	r17,r17,zero
   176b8:	0005883a 	mov	r2,zero
   176bc:	003f8906 	br	174e4 <_gp+0xffff5a94>
   176c0:	3809883a 	mov	r4,r7
   176c4:	4821883a 	mov	r16,r9
   176c8:	0011883a 	mov	r8,zero
   176cc:	0005883a 	mov	r2,zero
   176d0:	003eda06 	br	1723c <_gp+0xffff57ec>
   176d4:	0101ffc4 	movi	r4,2047
   176d8:	49003b26 	beq	r9,r4,177c8 <__subdf3+0x7b4>
   176dc:	0085c83a 	sub	r2,zero,r2
   176e0:	18c02034 	orhi	r3,r3,128
   176e4:	01000e04 	movi	r4,56
   176e8:	20806e16 	blt	r4,r2,178a4 <__subdf3+0x890>
   176ec:	010007c4 	movi	r4,31
   176f0:	20807716 	blt	r4,r2,178d0 <__subdf3+0x8bc>
   176f4:	01000804 	movi	r4,32
   176f8:	2089c83a 	sub	r4,r4,r2
   176fc:	1914983a 	sll	r10,r3,r4
   17700:	8890d83a 	srl	r8,r17,r2
   17704:	8908983a 	sll	r4,r17,r4
   17708:	1884d83a 	srl	r2,r3,r2
   1770c:	5222b03a 	or	r17,r10,r8
   17710:	2006c03a 	cmpne	r3,r4,zero
   17714:	88e2b03a 	or	r17,r17,r3
   17718:	89a3883a 	add	r17,r17,r6
   1771c:	1145883a 	add	r2,r2,r5
   17720:	898d803a 	cmpltu	r6,r17,r6
   17724:	3087883a 	add	r3,r6,r2
   17728:	4821883a 	mov	r16,r9
   1772c:	003ed906 	br	17294 <_gp+0xffff5844>
   17730:	2984b03a 	or	r2,r5,r6
   17734:	10004226 	beq	r2,zero,17840 <__subdf3+0x82c>
   17738:	1808d0fa 	srli	r4,r3,3
   1773c:	8822d0fa 	srli	r17,r17,3
   17740:	1806977a 	slli	r3,r3,29
   17744:	2080022c 	andhi	r2,r4,8
   17748:	1c62b03a 	or	r17,r3,r17
   1774c:	10000826 	beq	r2,zero,17770 <__subdf3+0x75c>
   17750:	2812d0fa 	srli	r9,r5,3
   17754:	4880022c 	andhi	r2,r9,8
   17758:	1000051e 	bne	r2,zero,17770 <__subdf3+0x75c>
   1775c:	300cd0fa 	srli	r6,r6,3
   17760:	2804977a 	slli	r2,r5,29
   17764:	4809883a 	mov	r4,r9
   17768:	3825883a 	mov	r18,r7
   1776c:	11a2b03a 	or	r17,r2,r6
   17770:	8806d77a 	srli	r3,r17,29
   17774:	200890fa 	slli	r4,r4,3
   17778:	882290fa 	slli	r17,r17,3
   1777c:	0401ffc4 	movi	r16,2047
   17780:	1906b03a 	or	r3,r3,r4
   17784:	003e4406 	br	17098 <_gp+0xffff5648>
   17788:	2984b03a 	or	r2,r5,r6
   1778c:	103e4226 	beq	r2,zero,17098 <_gp+0xffff5648>
   17790:	8989c83a 	sub	r4,r17,r6
   17794:	8911803a 	cmpltu	r8,r17,r4
   17798:	1945c83a 	sub	r2,r3,r5
   1779c:	1205c83a 	sub	r2,r2,r8
   177a0:	1200202c 	andhi	r8,r2,128
   177a4:	403e9a26 	beq	r8,zero,17210 <_gp+0xffff57c0>
   177a8:	3463c83a 	sub	r17,r6,r17
   177ac:	28c5c83a 	sub	r2,r5,r3
   177b0:	344d803a 	cmpltu	r6,r6,r17
   177b4:	1187c83a 	sub	r3,r2,r6
   177b8:	3825883a 	mov	r18,r7
   177bc:	003e3606 	br	17098 <_gp+0xffff5648>
   177c0:	0101ffc4 	movi	r4,2047
   177c4:	493fc71e 	bne	r9,r4,176e4 <_gp+0xffff5c94>
   177c8:	2807883a 	mov	r3,r5
   177cc:	3023883a 	mov	r17,r6
   177d0:	4821883a 	mov	r16,r9
   177d4:	003e3006 	br	17098 <_gp+0xffff5648>
   177d8:	10003626 	beq	r2,zero,178b4 <__subdf3+0x8a0>
   177dc:	2984b03a 	or	r2,r5,r6
   177e0:	10001726 	beq	r2,zero,17840 <__subdf3+0x82c>
   177e4:	1808d0fa 	srli	r4,r3,3
   177e8:	8822d0fa 	srli	r17,r17,3
   177ec:	1806977a 	slli	r3,r3,29
   177f0:	2080022c 	andhi	r2,r4,8
   177f4:	1c62b03a 	or	r17,r3,r17
   177f8:	10000726 	beq	r2,zero,17818 <__subdf3+0x804>
   177fc:	2812d0fa 	srli	r9,r5,3
   17800:	4880022c 	andhi	r2,r9,8
   17804:	1000041e 	bne	r2,zero,17818 <__subdf3+0x804>
   17808:	300cd0fa 	srli	r6,r6,3
   1780c:	2804977a 	slli	r2,r5,29
   17810:	4809883a 	mov	r4,r9
   17814:	11a2b03a 	or	r17,r2,r6
   17818:	8806d77a 	srli	r3,r17,29
   1781c:	200890fa 	slli	r4,r4,3
   17820:	882290fa 	slli	r17,r17,3
   17824:	3825883a 	mov	r18,r7
   17828:	1906b03a 	or	r3,r3,r4
   1782c:	0401ffc4 	movi	r16,2047
   17830:	003e1906 	br	17098 <_gp+0xffff5648>
   17834:	000b883a 	mov	r5,zero
   17838:	0005883a 	mov	r2,zero
   1783c:	003e2e06 	br	170f8 <_gp+0xffff56a8>
   17840:	0401ffc4 	movi	r16,2047
   17844:	003e1406 	br	17098 <_gp+0xffff5648>
   17848:	0005883a 	mov	r2,zero
   1784c:	003f7506 	br	17624 <_gp+0xffff5bd4>
   17850:	0005883a 	mov	r2,zero
   17854:	0009883a 	mov	r4,zero
   17858:	003e7806 	br	1723c <_gp+0xffff57ec>
   1785c:	123ff804 	addi	r8,r2,-32
   17860:	01000804 	movi	r4,32
   17864:	1a10d83a 	srl	r8,r3,r8
   17868:	11002526 	beq	r2,r4,17900 <__subdf3+0x8ec>
   1786c:	01001004 	movi	r4,64
   17870:	2085c83a 	sub	r2,r4,r2
   17874:	1884983a 	sll	r2,r3,r2
   17878:	1444b03a 	or	r2,r2,r17
   1787c:	1004c03a 	cmpne	r2,r2,zero
   17880:	40a2b03a 	or	r17,r8,r2
   17884:	0005883a 	mov	r2,zero
   17888:	003f1606 	br	174e4 <_gp+0xffff5a94>
   1788c:	02000434 	movhi	r8,16
   17890:	0009883a 	mov	r4,zero
   17894:	423fffc4 	addi	r8,r8,-1
   17898:	00bfffc4 	movi	r2,-1
   1789c:	0401ffc4 	movi	r16,2047
   178a0:	003e6606 	br	1723c <_gp+0xffff57ec>
   178a4:	1c62b03a 	or	r17,r3,r17
   178a8:	8822c03a 	cmpne	r17,r17,zero
   178ac:	0005883a 	mov	r2,zero
   178b0:	003f9906 	br	17718 <_gp+0xffff5cc8>
   178b4:	2807883a 	mov	r3,r5
   178b8:	3023883a 	mov	r17,r6
   178bc:	0401ffc4 	movi	r16,2047
   178c0:	003df506 	br	17098 <_gp+0xffff5648>
   178c4:	2807883a 	mov	r3,r5
   178c8:	3023883a 	mov	r17,r6
   178cc:	003df206 	br	17098 <_gp+0xffff5648>
   178d0:	123ff804 	addi	r8,r2,-32
   178d4:	01000804 	movi	r4,32
   178d8:	1a10d83a 	srl	r8,r3,r8
   178dc:	11000a26 	beq	r2,r4,17908 <__subdf3+0x8f4>
   178e0:	01001004 	movi	r4,64
   178e4:	2085c83a 	sub	r2,r4,r2
   178e8:	1884983a 	sll	r2,r3,r2
   178ec:	1444b03a 	or	r2,r2,r17
   178f0:	1004c03a 	cmpne	r2,r2,zero
   178f4:	40a2b03a 	or	r17,r8,r2
   178f8:	0005883a 	mov	r2,zero
   178fc:	003f8606 	br	17718 <_gp+0xffff5cc8>
   17900:	0005883a 	mov	r2,zero
   17904:	003fdc06 	br	17878 <_gp+0xffff5e28>
   17908:	0005883a 	mov	r2,zero
   1790c:	003ff706 	br	178ec <_gp+0xffff5e9c>

00017910 <__fixdfsi>:
   17910:	280cd53a 	srli	r6,r5,20
   17914:	00c00434 	movhi	r3,16
   17918:	18ffffc4 	addi	r3,r3,-1
   1791c:	3181ffcc 	andi	r6,r6,2047
   17920:	01c0ff84 	movi	r7,1022
   17924:	28c6703a 	and	r3,r5,r3
   17928:	280ad7fa 	srli	r5,r5,31
   1792c:	3980120e 	bge	r7,r6,17978 <__fixdfsi+0x68>
   17930:	00810744 	movi	r2,1053
   17934:	11800c16 	blt	r2,r6,17968 <__fixdfsi+0x58>
   17938:	00810cc4 	movi	r2,1075
   1793c:	1185c83a 	sub	r2,r2,r6
   17940:	01c007c4 	movi	r7,31
   17944:	18c00434 	orhi	r3,r3,16
   17948:	38800d16 	blt	r7,r2,17980 <__fixdfsi+0x70>
   1794c:	31befb44 	addi	r6,r6,-1043
   17950:	2084d83a 	srl	r2,r4,r2
   17954:	1986983a 	sll	r3,r3,r6
   17958:	1884b03a 	or	r2,r3,r2
   1795c:	28000726 	beq	r5,zero,1797c <__fixdfsi+0x6c>
   17960:	0085c83a 	sub	r2,zero,r2
   17964:	f800283a 	ret
   17968:	00a00034 	movhi	r2,32768
   1796c:	10bfffc4 	addi	r2,r2,-1
   17970:	2885883a 	add	r2,r5,r2
   17974:	f800283a 	ret
   17978:	0005883a 	mov	r2,zero
   1797c:	f800283a 	ret
   17980:	008104c4 	movi	r2,1043
   17984:	1185c83a 	sub	r2,r2,r6
   17988:	1884d83a 	srl	r2,r3,r2
   1798c:	003ff306 	br	1795c <_gp+0xffff5f0c>

00017990 <__floatsidf>:
   17990:	defffd04 	addi	sp,sp,-12
   17994:	dfc00215 	stw	ra,8(sp)
   17998:	dc400115 	stw	r17,4(sp)
   1799c:	dc000015 	stw	r16,0(sp)
   179a0:	20002b26 	beq	r4,zero,17a50 <__floatsidf+0xc0>
   179a4:	2023883a 	mov	r17,r4
   179a8:	2020d7fa 	srli	r16,r4,31
   179ac:	20002d16 	blt	r4,zero,17a64 <__floatsidf+0xd4>
   179b0:	8809883a 	mov	r4,r17
   179b4:	001139c0 	call	1139c <__clzsi2>
   179b8:	01410784 	movi	r5,1054
   179bc:	288bc83a 	sub	r5,r5,r2
   179c0:	01010cc4 	movi	r4,1075
   179c4:	2149c83a 	sub	r4,r4,r5
   179c8:	00c007c4 	movi	r3,31
   179cc:	1900160e 	bge	r3,r4,17a28 <__floatsidf+0x98>
   179d0:	00c104c4 	movi	r3,1043
   179d4:	1947c83a 	sub	r3,r3,r5
   179d8:	88c6983a 	sll	r3,r17,r3
   179dc:	00800434 	movhi	r2,16
   179e0:	10bfffc4 	addi	r2,r2,-1
   179e4:	1886703a 	and	r3,r3,r2
   179e8:	2941ffcc 	andi	r5,r5,2047
   179ec:	800d883a 	mov	r6,r16
   179f0:	0005883a 	mov	r2,zero
   179f4:	280a953a 	slli	r5,r5,20
   179f8:	31803fcc 	andi	r6,r6,255
   179fc:	01000434 	movhi	r4,16
   17a00:	300c97fa 	slli	r6,r6,31
   17a04:	213fffc4 	addi	r4,r4,-1
   17a08:	1906703a 	and	r3,r3,r4
   17a0c:	1946b03a 	or	r3,r3,r5
   17a10:	1986b03a 	or	r3,r3,r6
   17a14:	dfc00217 	ldw	ra,8(sp)
   17a18:	dc400117 	ldw	r17,4(sp)
   17a1c:	dc000017 	ldw	r16,0(sp)
   17a20:	dec00304 	addi	sp,sp,12
   17a24:	f800283a 	ret
   17a28:	00c002c4 	movi	r3,11
   17a2c:	1887c83a 	sub	r3,r3,r2
   17a30:	88c6d83a 	srl	r3,r17,r3
   17a34:	8904983a 	sll	r2,r17,r4
   17a38:	01000434 	movhi	r4,16
   17a3c:	213fffc4 	addi	r4,r4,-1
   17a40:	2941ffcc 	andi	r5,r5,2047
   17a44:	1906703a 	and	r3,r3,r4
   17a48:	800d883a 	mov	r6,r16
   17a4c:	003fe906 	br	179f4 <_gp+0xffff5fa4>
   17a50:	000d883a 	mov	r6,zero
   17a54:	000b883a 	mov	r5,zero
   17a58:	0007883a 	mov	r3,zero
   17a5c:	0005883a 	mov	r2,zero
   17a60:	003fe406 	br	179f4 <_gp+0xffff5fa4>
   17a64:	0123c83a 	sub	r17,zero,r4
   17a68:	003fd106 	br	179b0 <_gp+0xffff5f60>

00017a6c <__extendsfdf2>:
   17a6c:	200ad5fa 	srli	r5,r4,23
   17a70:	defffd04 	addi	sp,sp,-12
   17a74:	dc400115 	stw	r17,4(sp)
   17a78:	29403fcc 	andi	r5,r5,255
   17a7c:	29800044 	addi	r6,r5,1
   17a80:	04402034 	movhi	r17,128
   17a84:	dc000015 	stw	r16,0(sp)
   17a88:	8c7fffc4 	addi	r17,r17,-1
   17a8c:	dfc00215 	stw	ra,8(sp)
   17a90:	31803fcc 	andi	r6,r6,255
   17a94:	00800044 	movi	r2,1
   17a98:	8922703a 	and	r17,r17,r4
   17a9c:	2020d7fa 	srli	r16,r4,31
   17aa0:	1180110e 	bge	r2,r6,17ae8 <__extendsfdf2+0x7c>
   17aa4:	880cd0fa 	srli	r6,r17,3
   17aa8:	8822977a 	slli	r17,r17,29
   17aac:	2940e004 	addi	r5,r5,896
   17ab0:	2941ffcc 	andi	r5,r5,2047
   17ab4:	2804953a 	slli	r2,r5,20
   17ab8:	01400434 	movhi	r5,16
   17abc:	800697fa 	slli	r3,r16,31
   17ac0:	297fffc4 	addi	r5,r5,-1
   17ac4:	314a703a 	and	r5,r6,r5
   17ac8:	288ab03a 	or	r5,r5,r2
   17acc:	28c6b03a 	or	r3,r5,r3
   17ad0:	8805883a 	mov	r2,r17
   17ad4:	dfc00217 	ldw	ra,8(sp)
   17ad8:	dc400117 	ldw	r17,4(sp)
   17adc:	dc000017 	ldw	r16,0(sp)
   17ae0:	dec00304 	addi	sp,sp,12
   17ae4:	f800283a 	ret
   17ae8:	2800111e 	bne	r5,zero,17b30 <__extendsfdf2+0xc4>
   17aec:	88001c26 	beq	r17,zero,17b60 <__extendsfdf2+0xf4>
   17af0:	8809883a 	mov	r4,r17
   17af4:	001139c0 	call	1139c <__clzsi2>
   17af8:	00c00284 	movi	r3,10
   17afc:	18801b16 	blt	r3,r2,17b6c <__extendsfdf2+0x100>
   17b00:	018002c4 	movi	r6,11
   17b04:	308dc83a 	sub	r6,r6,r2
   17b08:	11000544 	addi	r4,r2,21
   17b0c:	8986d83a 	srl	r3,r17,r6
   17b10:	8922983a 	sll	r17,r17,r4
   17b14:	0180e244 	movi	r6,905
   17b18:	01400434 	movhi	r5,16
   17b1c:	3085c83a 	sub	r2,r6,r2
   17b20:	297fffc4 	addi	r5,r5,-1
   17b24:	194c703a 	and	r6,r3,r5
   17b28:	1141ffcc 	andi	r5,r2,2047
   17b2c:	003fe006 	br	17ab0 <_gp+0xffff6060>
   17b30:	88000826 	beq	r17,zero,17b54 <__extendsfdf2+0xe8>
   17b34:	880cd0fa 	srli	r6,r17,3
   17b38:	00800434 	movhi	r2,16
   17b3c:	10bfffc4 	addi	r2,r2,-1
   17b40:	31800234 	orhi	r6,r6,8
   17b44:	8822977a 	slli	r17,r17,29
   17b48:	308c703a 	and	r6,r6,r2
   17b4c:	0141ffc4 	movi	r5,2047
   17b50:	003fd706 	br	17ab0 <_gp+0xffff6060>
   17b54:	0141ffc4 	movi	r5,2047
   17b58:	000d883a 	mov	r6,zero
   17b5c:	003fd406 	br	17ab0 <_gp+0xffff6060>
   17b60:	000b883a 	mov	r5,zero
   17b64:	000d883a 	mov	r6,zero
   17b68:	003fd106 	br	17ab0 <_gp+0xffff6060>
   17b6c:	11bffd44 	addi	r6,r2,-11
   17b70:	8986983a 	sll	r3,r17,r6
   17b74:	0023883a 	mov	r17,zero
   17b78:	003fe606 	br	17b14 <_gp+0xffff60c4>

00017b7c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   17b7c:	defffc04 	addi	sp,sp,-16
   17b80:	df000315 	stw	fp,12(sp)
   17b84:	df000304 	addi	fp,sp,12
   17b88:	e13ffd15 	stw	r4,-12(fp)
   17b8c:	e17ffe15 	stw	r5,-8(fp)
   17b90:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   17b94:	e0fffe17 	ldw	r3,-8(fp)
   17b98:	e0bffd17 	ldw	r2,-12(fp)
   17b9c:	18800c26 	beq	r3,r2,17bd0 <alt_load_section+0x54>
  {
    while( to != end )
   17ba0:	00000806 	br	17bc4 <alt_load_section+0x48>
    {
      *to++ = *from++;
   17ba4:	e0bffe17 	ldw	r2,-8(fp)
   17ba8:	10c00104 	addi	r3,r2,4
   17bac:	e0fffe15 	stw	r3,-8(fp)
   17bb0:	e0fffd17 	ldw	r3,-12(fp)
   17bb4:	19000104 	addi	r4,r3,4
   17bb8:	e13ffd15 	stw	r4,-12(fp)
   17bbc:	18c00017 	ldw	r3,0(r3)
   17bc0:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   17bc4:	e0fffe17 	ldw	r3,-8(fp)
   17bc8:	e0bfff17 	ldw	r2,-4(fp)
   17bcc:	18bff51e 	bne	r3,r2,17ba4 <_gp+0xffff6154>
    {
      *to++ = *from++;
    }
  }
}
   17bd0:	0001883a 	nop
   17bd4:	e037883a 	mov	sp,fp
   17bd8:	df000017 	ldw	fp,0(sp)
   17bdc:	dec00104 	addi	sp,sp,4
   17be0:	f800283a 	ret

00017be4 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   17be4:	defffe04 	addi	sp,sp,-8
   17be8:	dfc00115 	stw	ra,4(sp)
   17bec:	df000015 	stw	fp,0(sp)
   17bf0:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   17bf4:	018000b4 	movhi	r6,2
   17bf8:	31a6a004 	addi	r6,r6,-25984
   17bfc:	014000b4 	movhi	r5,2
   17c00:	2965e704 	addi	r5,r5,-26724
   17c04:	010000b4 	movhi	r4,2
   17c08:	2126a004 	addi	r4,r4,-25984
   17c0c:	0017b7c0 	call	17b7c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   17c10:	01800074 	movhi	r6,1
   17c14:	31809104 	addi	r6,r6,580
   17c18:	01400074 	movhi	r5,1
   17c1c:	29400804 	addi	r5,r5,32
   17c20:	01000074 	movhi	r4,1
   17c24:	21000804 	addi	r4,r4,32
   17c28:	0017b7c0 	call	17b7c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   17c2c:	018000b4 	movhi	r6,2
   17c30:	31a5e704 	addi	r6,r6,-26724
   17c34:	014000b4 	movhi	r5,2
   17c38:	29654004 	addi	r5,r5,-27392
   17c3c:	010000b4 	movhi	r4,2
   17c40:	21254004 	addi	r4,r4,-27392
   17c44:	0017b7c0 	call	17b7c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   17c48:	00184b40 	call	184b4 <alt_dcache_flush_all>
  alt_icache_flush_all();
   17c4c:	00186080 	call	18608 <alt_icache_flush_all>
}
   17c50:	0001883a 	nop
   17c54:	e037883a 	mov	sp,fp
   17c58:	dfc00117 	ldw	ra,4(sp)
   17c5c:	df000017 	ldw	fp,0(sp)
   17c60:	dec00204 	addi	sp,sp,8
   17c64:	f800283a 	ret

00017c68 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   17c68:	defffd04 	addi	sp,sp,-12
   17c6c:	dfc00215 	stw	ra,8(sp)
   17c70:	df000115 	stw	fp,4(sp)
   17c74:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   17c78:	0009883a 	mov	r4,zero
   17c7c:	0017fe40 	call	17fe4 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   17c80:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   17c84:	001801c0 	call	1801c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   17c88:	018000b4 	movhi	r6,2
   17c8c:	31a5dc04 	addi	r6,r6,-26768
   17c90:	014000b4 	movhi	r5,2
   17c94:	2965dc04 	addi	r5,r5,-26768
   17c98:	010000b4 	movhi	r4,2
   17c9c:	2125dc04 	addi	r4,r4,-26768
   17ca0:	00189c00 	call	189c0 <alt_io_redirect>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   17ca4:	d0a0c817 	ldw	r2,-31968(gp)
   17ca8:	d0e0c917 	ldw	r3,-31964(gp)
   17cac:	d120ca17 	ldw	r4,-31960(gp)
   17cb0:	200d883a 	mov	r6,r4
   17cb4:	180b883a 	mov	r5,r3
   17cb8:	1009883a 	mov	r4,r2
   17cbc:	001043c0 	call	1043c <main>
   17cc0:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   17cc4:	01000044 	movi	r4,1
   17cc8:	00183dc0 	call	183dc <close>
  exit (result);
   17ccc:	e13fff17 	ldw	r4,-4(fp)
   17cd0:	00192940 	call	19294 <exit>

00017cd4 <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
   17cd4:	defffd04 	addi	sp,sp,-12
   17cd8:	dfc00215 	stw	ra,8(sp)
   17cdc:	df000115 	stw	fp,4(sp)
   17ce0:	df000104 	addi	fp,sp,4
   17ce4:	e13fff15 	stw	r4,-4(fp)
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
#else
    return fputs(str, stdout);
   17ce8:	d0a00117 	ldw	r2,-32764(gp)
   17cec:	10800217 	ldw	r2,8(r2)
   17cf0:	100b883a 	mov	r5,r2
   17cf4:	e13fff17 	ldw	r4,-4(fp)
   17cf8:	00192b40 	call	192b4 <fputs>
#endif
#endif
}
   17cfc:	e037883a 	mov	sp,fp
   17d00:	dfc00117 	ldw	ra,4(sp)
   17d04:	df000017 	ldw	fp,0(sp)
   17d08:	dec00204 	addi	sp,sp,8
   17d0c:	f800283a 	ret

00017d10 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   17d10:	defff904 	addi	sp,sp,-28
   17d14:	df000615 	stw	fp,24(sp)
   17d18:	df000604 	addi	fp,sp,24
   17d1c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17d20:	0005303a 	rdctl	r2,status
   17d24:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17d28:	e0fffe17 	ldw	r3,-8(fp)
   17d2c:	00bfff84 	movi	r2,-2
   17d30:	1884703a 	and	r2,r3,r2
   17d34:	1001703a 	wrctl	status,r2
  
  return context;
   17d38:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   17d3c:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   17d40:	d0a00217 	ldw	r2,-32760(gp)
   17d44:	10c000c4 	addi	r3,r2,3
   17d48:	00bfff04 	movi	r2,-4
   17d4c:	1884703a 	and	r2,r3,r2
   17d50:	d0a00215 	stw	r2,-32760(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   17d54:	d0e00217 	ldw	r3,-32760(gp)
   17d58:	e0bfff17 	ldw	r2,-4(fp)
   17d5c:	1887883a 	add	r3,r3,r2
   17d60:	008000b4 	movhi	r2,2
   17d64:	10800004 	addi	r2,r2,0
   17d68:	10c0062e 	bgeu	r2,r3,17d84 <sbrk+0x74>
   17d6c:	e0bffb17 	ldw	r2,-20(fp)
   17d70:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17d74:	e0bffa17 	ldw	r2,-24(fp)
   17d78:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   17d7c:	00bfffc4 	movi	r2,-1
   17d80:	00000b06 	br	17db0 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   17d84:	d0a00217 	ldw	r2,-32760(gp)
   17d88:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
   17d8c:	d0e00217 	ldw	r3,-32760(gp)
   17d90:	e0bfff17 	ldw	r2,-4(fp)
   17d94:	1885883a 	add	r2,r3,r2
   17d98:	d0a00215 	stw	r2,-32760(gp)
   17d9c:	e0bffb17 	ldw	r2,-20(fp)
   17da0:	e0bffc15 	stw	r2,-16(fp)
   17da4:	e0bffc17 	ldw	r2,-16(fp)
   17da8:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   17dac:	e0bffd17 	ldw	r2,-12(fp)
} 
   17db0:	e037883a 	mov	sp,fp
   17db4:	df000017 	ldw	fp,0(sp)
   17db8:	dec00104 	addi	sp,sp,4
   17dbc:	f800283a 	ret

00017dc0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   17dc0:	defffe04 	addi	sp,sp,-8
   17dc4:	dfc00115 	stw	ra,4(sp)
   17dc8:	df000015 	stw	fp,0(sp)
   17dcc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   17dd0:	d0a00817 	ldw	r2,-32736(gp)
   17dd4:	10000326 	beq	r2,zero,17de4 <alt_get_errno+0x24>
   17dd8:	d0a00817 	ldw	r2,-32736(gp)
   17ddc:	103ee83a 	callr	r2
   17de0:	00000106 	br	17de8 <alt_get_errno+0x28>
   17de4:	d0a0c704 	addi	r2,gp,-31972
}
   17de8:	e037883a 	mov	sp,fp
   17dec:	dfc00117 	ldw	ra,4(sp)
   17df0:	df000017 	ldw	fp,0(sp)
   17df4:	dec00204 	addi	sp,sp,8
   17df8:	f800283a 	ret

00017dfc <times>:
 *
 * ALT_TIMES is mapped onto the times() system call in alt_syscall.h
 */
 
clock_t ALT_TIMES (struct tms *buf)
{
   17dfc:	defffc04 	addi	sp,sp,-16
   17e00:	dfc00315 	stw	ra,12(sp)
   17e04:	df000215 	stw	fp,8(sp)
   17e08:	df000204 	addi	fp,sp,8
   17e0c:	e13fff15 	stw	r4,-4(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   17e10:	d0a0cd17 	ldw	r2,-31948(gp)
  clock_t ticks = alt_nticks(); 
   17e14:	e0bffe15 	stw	r2,-8(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   17e18:	d0a0cc17 	ldw	r2,-31952(gp)

  /* If there is no system clock present, generate an error */

  if (!alt_ticks_per_second())
   17e1c:	1000061e 	bne	r2,zero,17e38 <times+0x3c>
  {
    ALT_ERRNO = ENOSYS;
   17e20:	0017dc00 	call	17dc0 <alt_get_errno>
   17e24:	1007883a 	mov	r3,r2
   17e28:	00801604 	movi	r2,88
   17e2c:	18800015 	stw	r2,0(r3)
    return 0;
   17e30:	0005883a 	mov	r2,zero
   17e34:	00000a06 	br	17e60 <times+0x64>
  }

  /* Otherwise return the elapsed time */

  buf->tms_utime  = 0;
   17e38:	e0bfff17 	ldw	r2,-4(fp)
   17e3c:	10000015 	stw	zero,0(r2)
  buf->tms_stime  = ticks;
   17e40:	e0bfff17 	ldw	r2,-4(fp)
   17e44:	e0fffe17 	ldw	r3,-8(fp)
   17e48:	10c00115 	stw	r3,4(r2)
  buf->tms_cutime = 0;
   17e4c:	e0bfff17 	ldw	r2,-4(fp)
   17e50:	10000215 	stw	zero,8(r2)
  buf->tms_cstime = 0;
   17e54:	e0bfff17 	ldw	r2,-4(fp)
   17e58:	10000315 	stw	zero,12(r2)

  return ticks;
   17e5c:	e0bffe17 	ldw	r2,-8(fp)
}
   17e60:	e037883a 	mov	sp,fp
   17e64:	dfc00117 	ldw	ra,4(sp)
   17e68:	df000017 	ldw	fp,0(sp)
   17e6c:	dec00204 	addi	sp,sp,8
   17e70:	f800283a 	ret

00017e74 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   17e74:	defffe04 	addi	sp,sp,-8
   17e78:	dfc00115 	stw	ra,4(sp)
   17e7c:	df000015 	stw	fp,0(sp)
   17e80:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   17e84:	d0a00817 	ldw	r2,-32736(gp)
   17e88:	10000326 	beq	r2,zero,17e98 <alt_get_errno+0x24>
   17e8c:	d0a00817 	ldw	r2,-32736(gp)
   17e90:	103ee83a 	callr	r2
   17e94:	00000106 	br	17e9c <alt_get_errno+0x28>
   17e98:	d0a0c704 	addi	r2,gp,-31972
}
   17e9c:	e037883a 	mov	sp,fp
   17ea0:	dfc00117 	ldw	ra,4(sp)
   17ea4:	df000017 	ldw	fp,0(sp)
   17ea8:	dec00204 	addi	sp,sp,8
   17eac:	f800283a 	ret

00017eb0 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   17eb0:	defff904 	addi	sp,sp,-28
   17eb4:	dfc00615 	stw	ra,24(sp)
   17eb8:	df000515 	stw	fp,20(sp)
   17ebc:	df000504 	addi	fp,sp,20
   17ec0:	e13ffd15 	stw	r4,-12(fp)
   17ec4:	e17ffe15 	stw	r5,-8(fp)
   17ec8:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   17ecc:	e0bffd17 	ldw	r2,-12(fp)
   17ed0:	10000816 	blt	r2,zero,17ef4 <write+0x44>
   17ed4:	01400304 	movi	r5,12
   17ed8:	e13ffd17 	ldw	r4,-12(fp)
   17edc:	00114000 	call	11400 <__mulsi3>
   17ee0:	1007883a 	mov	r3,r2
   17ee4:	008000b4 	movhi	r2,2
   17ee8:	10a63404 	addi	r2,r2,-26416
   17eec:	1885883a 	add	r2,r3,r2
   17ef0:	00000106 	br	17ef8 <write+0x48>
   17ef4:	0005883a 	mov	r2,zero
   17ef8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   17efc:	e0bffb17 	ldw	r2,-20(fp)
   17f00:	10002126 	beq	r2,zero,17f88 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   17f04:	e0bffb17 	ldw	r2,-20(fp)
   17f08:	10800217 	ldw	r2,8(r2)
   17f0c:	108000cc 	andi	r2,r2,3
   17f10:	10001826 	beq	r2,zero,17f74 <write+0xc4>
   17f14:	e0bffb17 	ldw	r2,-20(fp)
   17f18:	10800017 	ldw	r2,0(r2)
   17f1c:	10800617 	ldw	r2,24(r2)
   17f20:	10001426 	beq	r2,zero,17f74 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   17f24:	e0bffb17 	ldw	r2,-20(fp)
   17f28:	10800017 	ldw	r2,0(r2)
   17f2c:	10800617 	ldw	r2,24(r2)
   17f30:	e0ffff17 	ldw	r3,-4(fp)
   17f34:	180d883a 	mov	r6,r3
   17f38:	e17ffe17 	ldw	r5,-8(fp)
   17f3c:	e13ffb17 	ldw	r4,-20(fp)
   17f40:	103ee83a 	callr	r2
   17f44:	e0bffc15 	stw	r2,-16(fp)
   17f48:	e0bffc17 	ldw	r2,-16(fp)
   17f4c:	1000070e 	bge	r2,zero,17f6c <write+0xbc>
      {
        ALT_ERRNO = -rval;
   17f50:	0017e740 	call	17e74 <alt_get_errno>
   17f54:	1007883a 	mov	r3,r2
   17f58:	e0bffc17 	ldw	r2,-16(fp)
   17f5c:	0085c83a 	sub	r2,zero,r2
   17f60:	18800015 	stw	r2,0(r3)
        return -1;
   17f64:	00bfffc4 	movi	r2,-1
   17f68:	00000c06 	br	17f9c <write+0xec>
      }
      return rval;
   17f6c:	e0bffc17 	ldw	r2,-16(fp)
   17f70:	00000a06 	br	17f9c <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
   17f74:	0017e740 	call	17e74 <alt_get_errno>
   17f78:	1007883a 	mov	r3,r2
   17f7c:	00800344 	movi	r2,13
   17f80:	18800015 	stw	r2,0(r3)
   17f84:	00000406 	br	17f98 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   17f88:	0017e740 	call	17e74 <alt_get_errno>
   17f8c:	1007883a 	mov	r3,r2
   17f90:	00801444 	movi	r2,81
   17f94:	18800015 	stw	r2,0(r3)
  }
  return -1;
   17f98:	00bfffc4 	movi	r2,-1
}
   17f9c:	e037883a 	mov	sp,fp
   17fa0:	dfc00117 	ldw	ra,4(sp)
   17fa4:	df000017 	ldw	fp,0(sp)
   17fa8:	dec00204 	addi	sp,sp,8
   17fac:	f800283a 	ret

00017fb0 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   17fb0:	defffd04 	addi	sp,sp,-12
   17fb4:	dfc00215 	stw	ra,8(sp)
   17fb8:	df000115 	stw	fp,4(sp)
   17fbc:	df000104 	addi	fp,sp,4
   17fc0:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   17fc4:	d1600504 	addi	r5,gp,-32748
   17fc8:	e13fff17 	ldw	r4,-4(fp)
   17fcc:	00185640 	call	18564 <alt_dev_llist_insert>
}
   17fd0:	e037883a 	mov	sp,fp
   17fd4:	dfc00117 	ldw	ra,4(sp)
   17fd8:	df000017 	ldw	fp,0(sp)
   17fdc:	dec00204 	addi	sp,sp,8
   17fe0:	f800283a 	ret

00017fe4 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   17fe4:	defffd04 	addi	sp,sp,-12
   17fe8:	dfc00215 	stw	ra,8(sp)
   17fec:	df000115 	stw	fp,4(sp)
   17ff0:	df000104 	addi	fp,sp,4
   17ff4:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
   17ff8:	0018ee80 	call	18ee8 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   17ffc:	00800044 	movi	r2,1
   18000:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   18004:	0001883a 	nop
   18008:	e037883a 	mov	sp,fp
   1800c:	dfc00117 	ldw	ra,4(sp)
   18010:	df000017 	ldw	fp,0(sp)
   18014:	dec00204 	addi	sp,sp,8
   18018:	f800283a 	ret

0001801c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   1801c:	defffe04 	addi	sp,sp,-8
   18020:	dfc00115 	stw	ra,4(sp)
   18024:	df000015 	stw	fp,0(sp)
   18028:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( SYS_CLK_TIMER, sys_clk_timer);
   1802c:	01c0fa04 	movi	r7,1000
   18030:	01800044 	movi	r6,1
   18034:	000b883a 	mov	r5,zero
   18038:	010000b4 	movhi	r4,2
   1803c:	21040004 	addi	r4,r4,4096
   18040:	00183240 	call	18324 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
   18044:	010000b4 	movhi	r4,2
   18048:	21261f04 	addi	r4,r4,-26500
   1804c:	0017fb00 	call	17fb0 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
   18050:	0001883a 	nop
}
   18054:	0001883a 	nop
   18058:	e037883a 	mov	sp,fp
   1805c:	dfc00117 	ldw	ra,4(sp)
   18060:	df000017 	ldw	fp,0(sp)
   18064:	dec00204 	addi	sp,sp,8
   18068:	f800283a 	ret

0001806c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   1806c:	defffa04 	addi	sp,sp,-24
   18070:	dfc00515 	stw	ra,20(sp)
   18074:	df000415 	stw	fp,16(sp)
   18078:	df000404 	addi	fp,sp,16
   1807c:	e13ffd15 	stw	r4,-12(fp)
   18080:	e17ffe15 	stw	r5,-8(fp)
   18084:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   18088:	e0bffd17 	ldw	r2,-12(fp)
   1808c:	10800017 	ldw	r2,0(r2)
   18090:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   18094:	e0bffc17 	ldw	r2,-16(fp)
   18098:	10c00a04 	addi	r3,r2,40
   1809c:	e0bffd17 	ldw	r2,-12(fp)
   180a0:	10800217 	ldw	r2,8(r2)
   180a4:	100f883a 	mov	r7,r2
   180a8:	e1bfff17 	ldw	r6,-4(fp)
   180ac:	e17ffe17 	ldw	r5,-8(fp)
   180b0:	1809883a 	mov	r4,r3
   180b4:	001812c0 	call	1812c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   180b8:	e037883a 	mov	sp,fp
   180bc:	dfc00117 	ldw	ra,4(sp)
   180c0:	df000017 	ldw	fp,0(sp)
   180c4:	dec00204 	addi	sp,sp,8
   180c8:	f800283a 	ret

000180cc <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   180cc:	defffa04 	addi	sp,sp,-24
   180d0:	dfc00515 	stw	ra,20(sp)
   180d4:	df000415 	stw	fp,16(sp)
   180d8:	df000404 	addi	fp,sp,16
   180dc:	e13ffd15 	stw	r4,-12(fp)
   180e0:	e17ffe15 	stw	r5,-8(fp)
   180e4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   180e8:	e0bffd17 	ldw	r2,-12(fp)
   180ec:	10800017 	ldw	r2,0(r2)
   180f0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   180f4:	e0bffc17 	ldw	r2,-16(fp)
   180f8:	10c00a04 	addi	r3,r2,40
   180fc:	e0bffd17 	ldw	r2,-12(fp)
   18100:	10800217 	ldw	r2,8(r2)
   18104:	100f883a 	mov	r7,r2
   18108:	e1bfff17 	ldw	r6,-4(fp)
   1810c:	e17ffe17 	ldw	r5,-8(fp)
   18110:	1809883a 	mov	r4,r3
   18114:	00182180 	call	18218 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   18118:	e037883a 	mov	sp,fp
   1811c:	dfc00117 	ldw	ra,4(sp)
   18120:	df000017 	ldw	fp,0(sp)
   18124:	dec00204 	addi	sp,sp,8
   18128:	f800283a 	ret

0001812c <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
   1812c:	defff704 	addi	sp,sp,-36
   18130:	df000815 	stw	fp,32(sp)
   18134:	df000804 	addi	fp,sp,32
   18138:	e13ffc15 	stw	r4,-16(fp)
   1813c:	e17ffd15 	stw	r5,-12(fp)
   18140:	e1bffe15 	stw	r6,-8(fp)
   18144:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
   18148:	e0bffc17 	ldw	r2,-16(fp)
   1814c:	10800017 	ldw	r2,0(r2)
   18150:	e0bff915 	stw	r2,-28(fp)

  char * ptr = buffer;
   18154:	e0bffd17 	ldw	r2,-12(fp)
   18158:	e0bff815 	stw	r2,-32(fp)
  char * end = buffer + space;
   1815c:	e0bffe17 	ldw	r2,-8(fp)
   18160:	e0fffd17 	ldw	r3,-12(fp)
   18164:	1885883a 	add	r2,r3,r2
   18168:	e0bffa15 	stw	r2,-24(fp)

  while (ptr < end)
   1816c:	00001206 	br	181b8 <altera_avalon_jtag_uart_read+0x8c>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   18170:	e0bff917 	ldw	r2,-28(fp)
   18174:	10800037 	ldwio	r2,0(r2)
   18178:	e0bffb15 	stw	r2,-20(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
   1817c:	e0bffb17 	ldw	r2,-20(fp)
   18180:	10a0000c 	andi	r2,r2,32768
   18184:	10000626 	beq	r2,zero,181a0 <altera_avalon_jtag_uart_read+0x74>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   18188:	e0bff817 	ldw	r2,-32(fp)
   1818c:	10c00044 	addi	r3,r2,1
   18190:	e0fff815 	stw	r3,-32(fp)
   18194:	e0fffb17 	ldw	r3,-20(fp)
   18198:	10c00005 	stb	r3,0(r2)
   1819c:	00000606 	br	181b8 <altera_avalon_jtag_uart_read+0x8c>
    else if (ptr != buffer)
   181a0:	e0fff817 	ldw	r3,-32(fp)
   181a4:	e0bffd17 	ldw	r2,-12(fp)
   181a8:	1880071e 	bne	r3,r2,181c8 <altera_avalon_jtag_uart_read+0x9c>
      break;
    else if(flags & O_NONBLOCK)
   181ac:	e0bfff17 	ldw	r2,-4(fp)
   181b0:	1090000c 	andi	r2,r2,16384
   181b4:	1000061e 	bne	r2,zero,181d0 <altera_avalon_jtag_uart_read+0xa4>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
   181b8:	e0fff817 	ldw	r3,-32(fp)
   181bc:	e0bffa17 	ldw	r2,-24(fp)
   181c0:	18bfeb36 	bltu	r3,r2,18170 <_gp+0xffff6720>
   181c4:	00000306 	br	181d4 <altera_avalon_jtag_uart_read+0xa8>
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
   181c8:	0001883a 	nop
   181cc:	00000106 	br	181d4 <altera_avalon_jtag_uart_read+0xa8>
    else if(flags & O_NONBLOCK)
      break;   
   181d0:	0001883a 	nop
    
  }

  if (ptr != buffer)
   181d4:	e0fff817 	ldw	r3,-32(fp)
   181d8:	e0bffd17 	ldw	r2,-12(fp)
   181dc:	18800426 	beq	r3,r2,181f0 <altera_avalon_jtag_uart_read+0xc4>
    return ptr - buffer;
   181e0:	e0fff817 	ldw	r3,-32(fp)
   181e4:	e0bffd17 	ldw	r2,-12(fp)
   181e8:	1885c83a 	sub	r2,r3,r2
   181ec:	00000606 	br	18208 <altera_avalon_jtag_uart_read+0xdc>
  else if (flags & O_NONBLOCK)
   181f0:	e0bfff17 	ldw	r2,-4(fp)
   181f4:	1090000c 	andi	r2,r2,16384
   181f8:	10000226 	beq	r2,zero,18204 <altera_avalon_jtag_uart_read+0xd8>
    return -EWOULDBLOCK;
   181fc:	00bffd44 	movi	r2,-11
   18200:	00000106 	br	18208 <altera_avalon_jtag_uart_read+0xdc>
  else
    return -EIO;
   18204:	00bffec4 	movi	r2,-5
}
   18208:	e037883a 	mov	sp,fp
   1820c:	df000017 	ldw	fp,0(sp)
   18210:	dec00104 	addi	sp,sp,4
   18214:	f800283a 	ret

00018218 <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   18218:	defff904 	addi	sp,sp,-28
   1821c:	df000615 	stw	fp,24(sp)
   18220:	df000604 	addi	fp,sp,24
   18224:	e13ffc15 	stw	r4,-16(fp)
   18228:	e17ffd15 	stw	r5,-12(fp)
   1822c:	e1bffe15 	stw	r6,-8(fp)
   18230:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
   18234:	e0bffc17 	ldw	r2,-16(fp)
   18238:	10800017 	ldw	r2,0(r2)
   1823c:	e0bffa15 	stw	r2,-24(fp)

  const char * end = ptr + count;
   18240:	e0bffe17 	ldw	r2,-8(fp)
   18244:	e0fffd17 	ldw	r3,-12(fp)
   18248:	1885883a 	add	r2,r3,r2
   1824c:	e0bffb15 	stw	r2,-20(fp)

  while (ptr < end)
   18250:	00000e06 	br	1828c <altera_avalon_jtag_uart_write+0x74>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   18254:	e0bffa17 	ldw	r2,-24(fp)
   18258:	10800104 	addi	r2,r2,4
   1825c:	10800037 	ldwio	r2,0(r2)
   18260:	10bfffec 	andhi	r2,r2,65535
   18264:	10000926 	beq	r2,zero,1828c <altera_avalon_jtag_uart_write+0x74>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
   18268:	e0fffa17 	ldw	r3,-24(fp)
   1826c:	e0bffd17 	ldw	r2,-12(fp)
   18270:	11000044 	addi	r4,r2,1
   18274:	e13ffd15 	stw	r4,-12(fp)
   18278:	10800003 	ldbu	r2,0(r2)
   1827c:	10803fcc 	andi	r2,r2,255
   18280:	1080201c 	xori	r2,r2,128
   18284:	10bfe004 	addi	r2,r2,-128
   18288:	18800035 	stwio	r2,0(r3)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
   1828c:	e0fffd17 	ldw	r3,-12(fp)
   18290:	e0bffb17 	ldw	r2,-20(fp)
   18294:	18bfef36 	bltu	r3,r2,18254 <_gp+0xffff6804>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
   18298:	e0bffe17 	ldw	r2,-8(fp)
}
   1829c:	e037883a 	mov	sp,fp
   182a0:	df000017 	ldw	fp,0(sp)
   182a4:	dec00104 	addi	sp,sp,4
   182a8:	f800283a 	ret

000182ac <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   182ac:	defffa04 	addi	sp,sp,-24
   182b0:	dfc00515 	stw	ra,20(sp)
   182b4:	df000415 	stw	fp,16(sp)
   182b8:	df000404 	addi	fp,sp,16
   182bc:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   182c0:	0007883a 	mov	r3,zero
   182c4:	e0bfff17 	ldw	r2,-4(fp)
   182c8:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   182cc:	e0bfff17 	ldw	r2,-4(fp)
   182d0:	10800104 	addi	r2,r2,4
   182d4:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   182d8:	0005303a 	rdctl	r2,status
   182dc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   182e0:	e0fffd17 	ldw	r3,-12(fp)
   182e4:	00bfff84 	movi	r2,-2
   182e8:	1884703a 	and	r2,r3,r2
   182ec:	1001703a 	wrctl	status,r2
  
  return context;
   182f0:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   182f4:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
   182f8:	0018de00 	call	18de0 <alt_tick>
   182fc:	e0bffc17 	ldw	r2,-16(fp)
   18300:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   18304:	e0bffe17 	ldw	r2,-8(fp)
   18308:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   1830c:	0001883a 	nop
   18310:	e037883a 	mov	sp,fp
   18314:	dfc00117 	ldw	ra,4(sp)
   18318:	df000017 	ldw	fp,0(sp)
   1831c:	dec00204 	addi	sp,sp,8
   18320:	f800283a 	ret

00018324 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   18324:	defff804 	addi	sp,sp,-32
   18328:	dfc00715 	stw	ra,28(sp)
   1832c:	df000615 	stw	fp,24(sp)
   18330:	df000604 	addi	fp,sp,24
   18334:	e13ffc15 	stw	r4,-16(fp)
   18338:	e17ffd15 	stw	r5,-12(fp)
   1833c:	e1bffe15 	stw	r6,-8(fp)
   18340:	e1ffff15 	stw	r7,-4(fp)
   18344:	e0bfff17 	ldw	r2,-4(fp)
   18348:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   1834c:	d0a0cc17 	ldw	r2,-31952(gp)
   18350:	1000021e 	bne	r2,zero,1835c <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
   18354:	e0bffb17 	ldw	r2,-20(fp)
   18358:	d0a0cc15 	stw	r2,-31952(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   1835c:	e0bffc17 	ldw	r2,-16(fp)
   18360:	10800104 	addi	r2,r2,4
   18364:	00c001c4 	movi	r3,7
   18368:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   1836c:	d8000015 	stw	zero,0(sp)
   18370:	e1fffc17 	ldw	r7,-16(fp)
   18374:	018000b4 	movhi	r6,2
   18378:	31a0ab04 	addi	r6,r6,-32084
   1837c:	e17ffe17 	ldw	r5,-8(fp)
   18380:	e13ffd17 	ldw	r4,-12(fp)
   18384:	001863c0 	call	1863c <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   18388:	0001883a 	nop
   1838c:	e037883a 	mov	sp,fp
   18390:	dfc00117 	ldw	ra,4(sp)
   18394:	df000017 	ldw	fp,0(sp)
   18398:	dec00204 	addi	sp,sp,8
   1839c:	f800283a 	ret

000183a0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   183a0:	defffe04 	addi	sp,sp,-8
   183a4:	dfc00115 	stw	ra,4(sp)
   183a8:	df000015 	stw	fp,0(sp)
   183ac:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   183b0:	d0a00817 	ldw	r2,-32736(gp)
   183b4:	10000326 	beq	r2,zero,183c4 <alt_get_errno+0x24>
   183b8:	d0a00817 	ldw	r2,-32736(gp)
   183bc:	103ee83a 	callr	r2
   183c0:	00000106 	br	183c8 <alt_get_errno+0x28>
   183c4:	d0a0c704 	addi	r2,gp,-31972
}
   183c8:	e037883a 	mov	sp,fp
   183cc:	dfc00117 	ldw	ra,4(sp)
   183d0:	df000017 	ldw	fp,0(sp)
   183d4:	dec00204 	addi	sp,sp,8
   183d8:	f800283a 	ret

000183dc <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   183dc:	defffb04 	addi	sp,sp,-20
   183e0:	dfc00415 	stw	ra,16(sp)
   183e4:	df000315 	stw	fp,12(sp)
   183e8:	df000304 	addi	fp,sp,12
   183ec:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   183f0:	e0bfff17 	ldw	r2,-4(fp)
   183f4:	10000816 	blt	r2,zero,18418 <close+0x3c>
   183f8:	01400304 	movi	r5,12
   183fc:	e13fff17 	ldw	r4,-4(fp)
   18400:	00114000 	call	11400 <__mulsi3>
   18404:	1007883a 	mov	r3,r2
   18408:	008000b4 	movhi	r2,2
   1840c:	10a63404 	addi	r2,r2,-26416
   18410:	1885883a 	add	r2,r3,r2
   18414:	00000106 	br	1841c <close+0x40>
   18418:	0005883a 	mov	r2,zero
   1841c:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   18420:	e0bffd17 	ldw	r2,-12(fp)
   18424:	10001926 	beq	r2,zero,1848c <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   18428:	e0bffd17 	ldw	r2,-12(fp)
   1842c:	10800017 	ldw	r2,0(r2)
   18430:	10800417 	ldw	r2,16(r2)
   18434:	10000626 	beq	r2,zero,18450 <close+0x74>
   18438:	e0bffd17 	ldw	r2,-12(fp)
   1843c:	10800017 	ldw	r2,0(r2)
   18440:	10800417 	ldw	r2,16(r2)
   18444:	e13ffd17 	ldw	r4,-12(fp)
   18448:	103ee83a 	callr	r2
   1844c:	00000106 	br	18454 <close+0x78>
   18450:	0005883a 	mov	r2,zero
   18454:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   18458:	e13fff17 	ldw	r4,-4(fp)
   1845c:	0018cc00 	call	18cc0 <alt_release_fd>
    if (rval < 0)
   18460:	e0bffe17 	ldw	r2,-8(fp)
   18464:	1000070e 	bge	r2,zero,18484 <close+0xa8>
    {
      ALT_ERRNO = -rval;
   18468:	00183a00 	call	183a0 <alt_get_errno>
   1846c:	1007883a 	mov	r3,r2
   18470:	e0bffe17 	ldw	r2,-8(fp)
   18474:	0085c83a 	sub	r2,zero,r2
   18478:	18800015 	stw	r2,0(r3)
      return -1;
   1847c:	00bfffc4 	movi	r2,-1
   18480:	00000706 	br	184a0 <close+0xc4>
    }
    return 0;
   18484:	0005883a 	mov	r2,zero
   18488:	00000506 	br	184a0 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   1848c:	00183a00 	call	183a0 <alt_get_errno>
   18490:	1007883a 	mov	r3,r2
   18494:	00801444 	movi	r2,81
   18498:	18800015 	stw	r2,0(r3)
    return -1;
   1849c:	00bfffc4 	movi	r2,-1
  }
}
   184a0:	e037883a 	mov	sp,fp
   184a4:	dfc00117 	ldw	ra,4(sp)
   184a8:	df000017 	ldw	fp,0(sp)
   184ac:	dec00204 	addi	sp,sp,8
   184b0:	f800283a 	ret

000184b4 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   184b4:	defffe04 	addi	sp,sp,-8
   184b8:	df000115 	stw	fp,4(sp)
   184bc:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   184c0:	e03fff15 	stw	zero,-4(fp)
   184c4:	00000506 	br	184dc <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
   184c8:	e0bfff17 	ldw	r2,-4(fp)
   184cc:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   184d0:	e0bfff17 	ldw	r2,-4(fp)
   184d4:	10800804 	addi	r2,r2,32
   184d8:	e0bfff15 	stw	r2,-4(fp)
   184dc:	e0bfff17 	ldw	r2,-4(fp)
   184e0:	10820030 	cmpltui	r2,r2,2048
   184e4:	103ff81e 	bne	r2,zero,184c8 <_gp+0xffff6a78>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   184e8:	0001883a 	nop
   184ec:	e037883a 	mov	sp,fp
   184f0:	df000017 	ldw	fp,0(sp)
   184f4:	dec00104 	addi	sp,sp,4
   184f8:	f800283a 	ret

000184fc <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   184fc:	defffc04 	addi	sp,sp,-16
   18500:	df000315 	stw	fp,12(sp)
   18504:	df000304 	addi	fp,sp,12
   18508:	e13ffd15 	stw	r4,-12(fp)
   1850c:	e17ffe15 	stw	r5,-8(fp)
   18510:	e1bfff15 	stw	r6,-4(fp)
  return len;
   18514:	e0bfff17 	ldw	r2,-4(fp)
}
   18518:	e037883a 	mov	sp,fp
   1851c:	df000017 	ldw	fp,0(sp)
   18520:	dec00104 	addi	sp,sp,4
   18524:	f800283a 	ret

00018528 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   18528:	defffe04 	addi	sp,sp,-8
   1852c:	dfc00115 	stw	ra,4(sp)
   18530:	df000015 	stw	fp,0(sp)
   18534:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   18538:	d0a00817 	ldw	r2,-32736(gp)
   1853c:	10000326 	beq	r2,zero,1854c <alt_get_errno+0x24>
   18540:	d0a00817 	ldw	r2,-32736(gp)
   18544:	103ee83a 	callr	r2
   18548:	00000106 	br	18550 <alt_get_errno+0x28>
   1854c:	d0a0c704 	addi	r2,gp,-31972
}
   18550:	e037883a 	mov	sp,fp
   18554:	dfc00117 	ldw	ra,4(sp)
   18558:	df000017 	ldw	fp,0(sp)
   1855c:	dec00204 	addi	sp,sp,8
   18560:	f800283a 	ret

00018564 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   18564:	defffa04 	addi	sp,sp,-24
   18568:	dfc00515 	stw	ra,20(sp)
   1856c:	df000415 	stw	fp,16(sp)
   18570:	df000404 	addi	fp,sp,16
   18574:	e13ffe15 	stw	r4,-8(fp)
   18578:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   1857c:	e0bffe17 	ldw	r2,-8(fp)
   18580:	10000326 	beq	r2,zero,18590 <alt_dev_llist_insert+0x2c>
   18584:	e0bffe17 	ldw	r2,-8(fp)
   18588:	10800217 	ldw	r2,8(r2)
   1858c:	1000061e 	bne	r2,zero,185a8 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   18590:	00185280 	call	18528 <alt_get_errno>
   18594:	1007883a 	mov	r3,r2
   18598:	00800584 	movi	r2,22
   1859c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   185a0:	00bffa84 	movi	r2,-22
   185a4:	00001306 	br	185f4 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   185a8:	e0bffe17 	ldw	r2,-8(fp)
   185ac:	e0ffff17 	ldw	r3,-4(fp)
   185b0:	e0fffc15 	stw	r3,-16(fp)
   185b4:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   185b8:	e0bffd17 	ldw	r2,-12(fp)
   185bc:	e0fffc17 	ldw	r3,-16(fp)
   185c0:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   185c4:	e0bffc17 	ldw	r2,-16(fp)
   185c8:	10c00017 	ldw	r3,0(r2)
   185cc:	e0bffd17 	ldw	r2,-12(fp)
   185d0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   185d4:	e0bffc17 	ldw	r2,-16(fp)
   185d8:	10800017 	ldw	r2,0(r2)
   185dc:	e0fffd17 	ldw	r3,-12(fp)
   185e0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   185e4:	e0bffc17 	ldw	r2,-16(fp)
   185e8:	e0fffd17 	ldw	r3,-12(fp)
   185ec:	10c00015 	stw	r3,0(r2)

  return 0;  
   185f0:	0005883a 	mov	r2,zero
}
   185f4:	e037883a 	mov	sp,fp
   185f8:	dfc00117 	ldw	ra,4(sp)
   185fc:	df000017 	ldw	fp,0(sp)
   18600:	dec00204 	addi	sp,sp,8
   18604:	f800283a 	ret

00018608 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   18608:	defffe04 	addi	sp,sp,-8
   1860c:	dfc00115 	stw	ra,4(sp)
   18610:	df000015 	stw	fp,0(sp)
   18614:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   18618:	01408004 	movi	r5,512
   1861c:	0009883a 	mov	r4,zero
   18620:	00191680 	call	19168 <alt_icache_flush>
#endif
}
   18624:	0001883a 	nop
   18628:	e037883a 	mov	sp,fp
   1862c:	dfc00117 	ldw	ra,4(sp)
   18630:	df000017 	ldw	fp,0(sp)
   18634:	dec00204 	addi	sp,sp,8
   18638:	f800283a 	ret

0001863c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   1863c:	defff904 	addi	sp,sp,-28
   18640:	dfc00615 	stw	ra,24(sp)
   18644:	df000515 	stw	fp,20(sp)
   18648:	df000504 	addi	fp,sp,20
   1864c:	e13ffc15 	stw	r4,-16(fp)
   18650:	e17ffd15 	stw	r5,-12(fp)
   18654:	e1bffe15 	stw	r6,-8(fp)
   18658:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   1865c:	e0800217 	ldw	r2,8(fp)
   18660:	d8800015 	stw	r2,0(sp)
   18664:	e1ffff17 	ldw	r7,-4(fp)
   18668:	e1bffe17 	ldw	r6,-8(fp)
   1866c:	e17ffd17 	ldw	r5,-12(fp)
   18670:	e13ffc17 	ldw	r4,-16(fp)
   18674:	00187ec0 	call	187ec <alt_iic_isr_register>
}  
   18678:	e037883a 	mov	sp,fp
   1867c:	dfc00117 	ldw	ra,4(sp)
   18680:	df000017 	ldw	fp,0(sp)
   18684:	dec00204 	addi	sp,sp,8
   18688:	f800283a 	ret

0001868c <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   1868c:	defff904 	addi	sp,sp,-28
   18690:	df000615 	stw	fp,24(sp)
   18694:	df000604 	addi	fp,sp,24
   18698:	e13ffe15 	stw	r4,-8(fp)
   1869c:	e17fff15 	stw	r5,-4(fp)
   186a0:	e0bfff17 	ldw	r2,-4(fp)
   186a4:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   186a8:	0005303a 	rdctl	r2,status
   186ac:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   186b0:	e0fffb17 	ldw	r3,-20(fp)
   186b4:	00bfff84 	movi	r2,-2
   186b8:	1884703a 	and	r2,r3,r2
   186bc:	1001703a 	wrctl	status,r2
  
  return context;
   186c0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   186c4:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   186c8:	00c00044 	movi	r3,1
   186cc:	e0bffa17 	ldw	r2,-24(fp)
   186d0:	1884983a 	sll	r2,r3,r2
   186d4:	1007883a 	mov	r3,r2
   186d8:	d0a0cb17 	ldw	r2,-31956(gp)
   186dc:	1884b03a 	or	r2,r3,r2
   186e0:	d0a0cb15 	stw	r2,-31956(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   186e4:	d0a0cb17 	ldw	r2,-31956(gp)
   186e8:	100170fa 	wrctl	ienable,r2
   186ec:	e0bffc17 	ldw	r2,-16(fp)
   186f0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   186f4:	e0bffd17 	ldw	r2,-12(fp)
   186f8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   186fc:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   18700:	0001883a 	nop
}
   18704:	e037883a 	mov	sp,fp
   18708:	df000017 	ldw	fp,0(sp)
   1870c:	dec00104 	addi	sp,sp,4
   18710:	f800283a 	ret

00018714 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   18714:	defff904 	addi	sp,sp,-28
   18718:	df000615 	stw	fp,24(sp)
   1871c:	df000604 	addi	fp,sp,24
   18720:	e13ffe15 	stw	r4,-8(fp)
   18724:	e17fff15 	stw	r5,-4(fp)
   18728:	e0bfff17 	ldw	r2,-4(fp)
   1872c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18730:	0005303a 	rdctl	r2,status
   18734:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18738:	e0fffb17 	ldw	r3,-20(fp)
   1873c:	00bfff84 	movi	r2,-2
   18740:	1884703a 	and	r2,r3,r2
   18744:	1001703a 	wrctl	status,r2
  
  return context;
   18748:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   1874c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   18750:	00c00044 	movi	r3,1
   18754:	e0bffa17 	ldw	r2,-24(fp)
   18758:	1884983a 	sll	r2,r3,r2
   1875c:	0084303a 	nor	r2,zero,r2
   18760:	1007883a 	mov	r3,r2
   18764:	d0a0cb17 	ldw	r2,-31956(gp)
   18768:	1884703a 	and	r2,r3,r2
   1876c:	d0a0cb15 	stw	r2,-31956(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   18770:	d0a0cb17 	ldw	r2,-31956(gp)
   18774:	100170fa 	wrctl	ienable,r2
   18778:	e0bffc17 	ldw	r2,-16(fp)
   1877c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   18780:	e0bffd17 	ldw	r2,-12(fp)
   18784:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   18788:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   1878c:	0001883a 	nop
}
   18790:	e037883a 	mov	sp,fp
   18794:	df000017 	ldw	fp,0(sp)
   18798:	dec00104 	addi	sp,sp,4
   1879c:	f800283a 	ret

000187a0 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   187a0:	defffc04 	addi	sp,sp,-16
   187a4:	df000315 	stw	fp,12(sp)
   187a8:	df000304 	addi	fp,sp,12
   187ac:	e13ffe15 	stw	r4,-8(fp)
   187b0:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   187b4:	000530fa 	rdctl	r2,ienable
   187b8:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   187bc:	00c00044 	movi	r3,1
   187c0:	e0bfff17 	ldw	r2,-4(fp)
   187c4:	1884983a 	sll	r2,r3,r2
   187c8:	1007883a 	mov	r3,r2
   187cc:	e0bffd17 	ldw	r2,-12(fp)
   187d0:	1884703a 	and	r2,r3,r2
   187d4:	1004c03a 	cmpne	r2,r2,zero
   187d8:	10803fcc 	andi	r2,r2,255
}
   187dc:	e037883a 	mov	sp,fp
   187e0:	df000017 	ldw	fp,0(sp)
   187e4:	dec00104 	addi	sp,sp,4
   187e8:	f800283a 	ret

000187ec <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   187ec:	defff504 	addi	sp,sp,-44
   187f0:	dfc00a15 	stw	ra,40(sp)
   187f4:	df000915 	stw	fp,36(sp)
   187f8:	df000904 	addi	fp,sp,36
   187fc:	e13ffc15 	stw	r4,-16(fp)
   18800:	e17ffd15 	stw	r5,-12(fp)
   18804:	e1bffe15 	stw	r6,-8(fp)
   18808:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   1880c:	00bffa84 	movi	r2,-22
   18810:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   18814:	e0bffd17 	ldw	r2,-12(fp)
   18818:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   1881c:	e0bff817 	ldw	r2,-32(fp)
   18820:	10800808 	cmpgei	r2,r2,32
   18824:	1000271e 	bne	r2,zero,188c4 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18828:	0005303a 	rdctl	r2,status
   1882c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18830:	e0fffb17 	ldw	r3,-20(fp)
   18834:	00bfff84 	movi	r2,-2
   18838:	1884703a 	and	r2,r3,r2
   1883c:	1001703a 	wrctl	status,r2
  
  return context;
   18840:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   18844:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   18848:	008000b4 	movhi	r2,2
   1884c:	10a76304 	addi	r2,r2,-25204
   18850:	e0fff817 	ldw	r3,-32(fp)
   18854:	180690fa 	slli	r3,r3,3
   18858:	10c5883a 	add	r2,r2,r3
   1885c:	e0fffe17 	ldw	r3,-8(fp)
   18860:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   18864:	008000b4 	movhi	r2,2
   18868:	10a76304 	addi	r2,r2,-25204
   1886c:	e0fff817 	ldw	r3,-32(fp)
   18870:	180690fa 	slli	r3,r3,3
   18874:	10c5883a 	add	r2,r2,r3
   18878:	10800104 	addi	r2,r2,4
   1887c:	e0ffff17 	ldw	r3,-4(fp)
   18880:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   18884:	e0bffe17 	ldw	r2,-8(fp)
   18888:	10000526 	beq	r2,zero,188a0 <alt_iic_isr_register+0xb4>
   1888c:	e0bff817 	ldw	r2,-32(fp)
   18890:	100b883a 	mov	r5,r2
   18894:	e13ffc17 	ldw	r4,-16(fp)
   18898:	001868c0 	call	1868c <alt_ic_irq_enable>
   1889c:	00000406 	br	188b0 <alt_iic_isr_register+0xc4>
   188a0:	e0bff817 	ldw	r2,-32(fp)
   188a4:	100b883a 	mov	r5,r2
   188a8:	e13ffc17 	ldw	r4,-16(fp)
   188ac:	00187140 	call	18714 <alt_ic_irq_disable>
   188b0:	e0bff715 	stw	r2,-36(fp)
   188b4:	e0bffa17 	ldw	r2,-24(fp)
   188b8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   188bc:	e0bff917 	ldw	r2,-28(fp)
   188c0:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   188c4:	e0bff717 	ldw	r2,-36(fp)
}
   188c8:	e037883a 	mov	sp,fp
   188cc:	dfc00117 	ldw	ra,4(sp)
   188d0:	df000017 	ldw	fp,0(sp)
   188d4:	dec00204 	addi	sp,sp,8
   188d8:	f800283a 	ret

000188dc <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   188dc:	defff804 	addi	sp,sp,-32
   188e0:	dfc00715 	stw	ra,28(sp)
   188e4:	df000615 	stw	fp,24(sp)
   188e8:	dc000515 	stw	r16,20(sp)
   188ec:	df000604 	addi	fp,sp,24
   188f0:	e13ffb15 	stw	r4,-20(fp)
   188f4:	e17ffc15 	stw	r5,-16(fp)
   188f8:	e1bffd15 	stw	r6,-12(fp)
   188fc:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
   18900:	e1bffe17 	ldw	r6,-8(fp)
   18904:	e17ffd17 	ldw	r5,-12(fp)
   18908:	e13ffc17 	ldw	r4,-16(fp)
   1890c:	0018b640 	call	18b64 <open>
   18910:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
   18914:	e0bffa17 	ldw	r2,-24(fp)
   18918:	10002216 	blt	r2,zero,189a4 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   1891c:	040000b4 	movhi	r16,2
   18920:	84263404 	addi	r16,r16,-26416
   18924:	e0bffa17 	ldw	r2,-24(fp)
   18928:	01400304 	movi	r5,12
   1892c:	1009883a 	mov	r4,r2
   18930:	00114000 	call	11400 <__mulsi3>
   18934:	8085883a 	add	r2,r16,r2
   18938:	10c00017 	ldw	r3,0(r2)
   1893c:	e0bffb17 	ldw	r2,-20(fp)
   18940:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   18944:	040000b4 	movhi	r16,2
   18948:	84263404 	addi	r16,r16,-26416
   1894c:	e0bffa17 	ldw	r2,-24(fp)
   18950:	01400304 	movi	r5,12
   18954:	1009883a 	mov	r4,r2
   18958:	00114000 	call	11400 <__mulsi3>
   1895c:	8085883a 	add	r2,r16,r2
   18960:	10800104 	addi	r2,r2,4
   18964:	10c00017 	ldw	r3,0(r2)
   18968:	e0bffb17 	ldw	r2,-20(fp)
   1896c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   18970:	040000b4 	movhi	r16,2
   18974:	84263404 	addi	r16,r16,-26416
   18978:	e0bffa17 	ldw	r2,-24(fp)
   1897c:	01400304 	movi	r5,12
   18980:	1009883a 	mov	r4,r2
   18984:	00114000 	call	11400 <__mulsi3>
   18988:	8085883a 	add	r2,r16,r2
   1898c:	10800204 	addi	r2,r2,8
   18990:	10c00017 	ldw	r3,0(r2)
   18994:	e0bffb17 	ldw	r2,-20(fp)
   18998:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   1899c:	e13ffa17 	ldw	r4,-24(fp)
   189a0:	0018cc00 	call	18cc0 <alt_release_fd>
  }
} 
   189a4:	0001883a 	nop
   189a8:	e6ffff04 	addi	sp,fp,-4
   189ac:	dfc00217 	ldw	ra,8(sp)
   189b0:	df000117 	ldw	fp,4(sp)
   189b4:	dc000017 	ldw	r16,0(sp)
   189b8:	dec00304 	addi	sp,sp,12
   189bc:	f800283a 	ret

000189c0 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   189c0:	defffb04 	addi	sp,sp,-20
   189c4:	dfc00415 	stw	ra,16(sp)
   189c8:	df000315 	stw	fp,12(sp)
   189cc:	df000304 	addi	fp,sp,12
   189d0:	e13ffd15 	stw	r4,-12(fp)
   189d4:	e17ffe15 	stw	r5,-8(fp)
   189d8:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   189dc:	01c07fc4 	movi	r7,511
   189e0:	01800044 	movi	r6,1
   189e4:	e17ffd17 	ldw	r5,-12(fp)
   189e8:	010000b4 	movhi	r4,2
   189ec:	21263704 	addi	r4,r4,-26404
   189f0:	00188dc0 	call	188dc <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   189f4:	01c07fc4 	movi	r7,511
   189f8:	000d883a 	mov	r6,zero
   189fc:	e17ffe17 	ldw	r5,-8(fp)
   18a00:	010000b4 	movhi	r4,2
   18a04:	21263404 	addi	r4,r4,-26416
   18a08:	00188dc0 	call	188dc <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   18a0c:	01c07fc4 	movi	r7,511
   18a10:	01800044 	movi	r6,1
   18a14:	e17fff17 	ldw	r5,-4(fp)
   18a18:	010000b4 	movhi	r4,2
   18a1c:	21263a04 	addi	r4,r4,-26392
   18a20:	00188dc0 	call	188dc <alt_open_fd>
}  
   18a24:	0001883a 	nop
   18a28:	e037883a 	mov	sp,fp
   18a2c:	dfc00117 	ldw	ra,4(sp)
   18a30:	df000017 	ldw	fp,0(sp)
   18a34:	dec00204 	addi	sp,sp,8
   18a38:	f800283a 	ret

00018a3c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   18a3c:	defffe04 	addi	sp,sp,-8
   18a40:	dfc00115 	stw	ra,4(sp)
   18a44:	df000015 	stw	fp,0(sp)
   18a48:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   18a4c:	d0a00817 	ldw	r2,-32736(gp)
   18a50:	10000326 	beq	r2,zero,18a60 <alt_get_errno+0x24>
   18a54:	d0a00817 	ldw	r2,-32736(gp)
   18a58:	103ee83a 	callr	r2
   18a5c:	00000106 	br	18a64 <alt_get_errno+0x28>
   18a60:	d0a0c704 	addi	r2,gp,-31972
}
   18a64:	e037883a 	mov	sp,fp
   18a68:	dfc00117 	ldw	ra,4(sp)
   18a6c:	df000017 	ldw	fp,0(sp)
   18a70:	dec00204 	addi	sp,sp,8
   18a74:	f800283a 	ret

00018a78 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   18a78:	defffb04 	addi	sp,sp,-20
   18a7c:	dfc00415 	stw	ra,16(sp)
   18a80:	df000315 	stw	fp,12(sp)
   18a84:	dc000215 	stw	r16,8(sp)
   18a88:	df000304 	addi	fp,sp,12
   18a8c:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   18a90:	e0bffe17 	ldw	r2,-8(fp)
   18a94:	10800217 	ldw	r2,8(r2)
   18a98:	10d00034 	orhi	r3,r2,16384
   18a9c:	e0bffe17 	ldw	r2,-8(fp)
   18aa0:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   18aa4:	e03ffd15 	stw	zero,-12(fp)
   18aa8:	00002306 	br	18b38 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   18aac:	040000b4 	movhi	r16,2
   18ab0:	84263404 	addi	r16,r16,-26416
   18ab4:	e0bffd17 	ldw	r2,-12(fp)
   18ab8:	01400304 	movi	r5,12
   18abc:	1009883a 	mov	r4,r2
   18ac0:	00114000 	call	11400 <__mulsi3>
   18ac4:	8085883a 	add	r2,r16,r2
   18ac8:	10c00017 	ldw	r3,0(r2)
   18acc:	e0bffe17 	ldw	r2,-8(fp)
   18ad0:	10800017 	ldw	r2,0(r2)
   18ad4:	1880151e 	bne	r3,r2,18b2c <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   18ad8:	040000b4 	movhi	r16,2
   18adc:	84263404 	addi	r16,r16,-26416
   18ae0:	e0bffd17 	ldw	r2,-12(fp)
   18ae4:	01400304 	movi	r5,12
   18ae8:	1009883a 	mov	r4,r2
   18aec:	00114000 	call	11400 <__mulsi3>
   18af0:	8085883a 	add	r2,r16,r2
   18af4:	10800204 	addi	r2,r2,8
   18af8:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   18afc:	10000b0e 	bge	r2,zero,18b2c <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   18b00:	01400304 	movi	r5,12
   18b04:	e13ffd17 	ldw	r4,-12(fp)
   18b08:	00114000 	call	11400 <__mulsi3>
   18b0c:	1007883a 	mov	r3,r2
   18b10:	008000b4 	movhi	r2,2
   18b14:	10a63404 	addi	r2,r2,-26416
   18b18:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   18b1c:	e0bffe17 	ldw	r2,-8(fp)
   18b20:	18800226 	beq	r3,r2,18b2c <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   18b24:	00bffcc4 	movi	r2,-13
   18b28:	00000806 	br	18b4c <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   18b2c:	e0bffd17 	ldw	r2,-12(fp)
   18b30:	10800044 	addi	r2,r2,1
   18b34:	e0bffd15 	stw	r2,-12(fp)
   18b38:	d0a00717 	ldw	r2,-32740(gp)
   18b3c:	1007883a 	mov	r3,r2
   18b40:	e0bffd17 	ldw	r2,-12(fp)
   18b44:	18bfd92e 	bgeu	r3,r2,18aac <_gp+0xffff705c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   18b48:	0005883a 	mov	r2,zero
}
   18b4c:	e6ffff04 	addi	sp,fp,-4
   18b50:	dfc00217 	ldw	ra,8(sp)
   18b54:	df000117 	ldw	fp,4(sp)
   18b58:	dc000017 	ldw	r16,0(sp)
   18b5c:	dec00304 	addi	sp,sp,12
   18b60:	f800283a 	ret

00018b64 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   18b64:	defff604 	addi	sp,sp,-40
   18b68:	dfc00915 	stw	ra,36(sp)
   18b6c:	df000815 	stw	fp,32(sp)
   18b70:	df000804 	addi	fp,sp,32
   18b74:	e13ffd15 	stw	r4,-12(fp)
   18b78:	e17ffe15 	stw	r5,-8(fp)
   18b7c:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   18b80:	00bfffc4 	movi	r2,-1
   18b84:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   18b88:	00bffb44 	movi	r2,-19
   18b8c:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   18b90:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   18b94:	d1600504 	addi	r5,gp,-32748
   18b98:	e13ffd17 	ldw	r4,-12(fp)
   18b9c:	0018f0c0 	call	18f0c <alt_find_dev>
   18ba0:	e0bff815 	stw	r2,-32(fp)
   18ba4:	e0bff817 	ldw	r2,-32(fp)
   18ba8:	1000051e 	bne	r2,zero,18bc0 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   18bac:	e13ffd17 	ldw	r4,-12(fp)
   18bb0:	0018f9c0 	call	18f9c <alt_find_file>
   18bb4:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   18bb8:	00800044 	movi	r2,1
   18bbc:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   18bc0:	e0bff817 	ldw	r2,-32(fp)
   18bc4:	10002b26 	beq	r2,zero,18c74 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
   18bc8:	e13ff817 	ldw	r4,-32(fp)
   18bcc:	00190a40 	call	190a4 <alt_get_fd>
   18bd0:	e0bff915 	stw	r2,-28(fp)
   18bd4:	e0bff917 	ldw	r2,-28(fp)
   18bd8:	1000030e 	bge	r2,zero,18be8 <open+0x84>
    {
      status = index;
   18bdc:	e0bff917 	ldw	r2,-28(fp)
   18be0:	e0bffa15 	stw	r2,-24(fp)
   18be4:	00002506 	br	18c7c <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
   18be8:	01400304 	movi	r5,12
   18bec:	e13ff917 	ldw	r4,-28(fp)
   18bf0:	00114000 	call	11400 <__mulsi3>
   18bf4:	1007883a 	mov	r3,r2
   18bf8:	008000b4 	movhi	r2,2
   18bfc:	10a63404 	addi	r2,r2,-26416
   18c00:	1885883a 	add	r2,r3,r2
   18c04:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   18c08:	e0fffe17 	ldw	r3,-8(fp)
   18c0c:	00900034 	movhi	r2,16384
   18c10:	10bfffc4 	addi	r2,r2,-1
   18c14:	1886703a 	and	r3,r3,r2
   18c18:	e0bffc17 	ldw	r2,-16(fp)
   18c1c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   18c20:	e0bffb17 	ldw	r2,-20(fp)
   18c24:	1000051e 	bne	r2,zero,18c3c <open+0xd8>
   18c28:	e13ffc17 	ldw	r4,-16(fp)
   18c2c:	0018a780 	call	18a78 <alt_file_locked>
   18c30:	e0bffa15 	stw	r2,-24(fp)
   18c34:	e0bffa17 	ldw	r2,-24(fp)
   18c38:	10001016 	blt	r2,zero,18c7c <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   18c3c:	e0bff817 	ldw	r2,-32(fp)
   18c40:	10800317 	ldw	r2,12(r2)
   18c44:	10000826 	beq	r2,zero,18c68 <open+0x104>
   18c48:	e0bff817 	ldw	r2,-32(fp)
   18c4c:	10800317 	ldw	r2,12(r2)
   18c50:	e1ffff17 	ldw	r7,-4(fp)
   18c54:	e1bffe17 	ldw	r6,-8(fp)
   18c58:	e17ffd17 	ldw	r5,-12(fp)
   18c5c:	e13ffc17 	ldw	r4,-16(fp)
   18c60:	103ee83a 	callr	r2
   18c64:	00000106 	br	18c6c <open+0x108>
   18c68:	0005883a 	mov	r2,zero
   18c6c:	e0bffa15 	stw	r2,-24(fp)
   18c70:	00000206 	br	18c7c <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
   18c74:	00bffb44 	movi	r2,-19
   18c78:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   18c7c:	e0bffa17 	ldw	r2,-24(fp)
   18c80:	1000090e 	bge	r2,zero,18ca8 <open+0x144>
  {
    alt_release_fd (index);  
   18c84:	e13ff917 	ldw	r4,-28(fp)
   18c88:	0018cc00 	call	18cc0 <alt_release_fd>
    ALT_ERRNO = -status;
   18c8c:	0018a3c0 	call	18a3c <alt_get_errno>
   18c90:	1007883a 	mov	r3,r2
   18c94:	e0bffa17 	ldw	r2,-24(fp)
   18c98:	0085c83a 	sub	r2,zero,r2
   18c9c:	18800015 	stw	r2,0(r3)
    return -1;
   18ca0:	00bfffc4 	movi	r2,-1
   18ca4:	00000106 	br	18cac <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
   18ca8:	e0bff917 	ldw	r2,-28(fp)
}
   18cac:	e037883a 	mov	sp,fp
   18cb0:	dfc00117 	ldw	ra,4(sp)
   18cb4:	df000017 	ldw	fp,0(sp)
   18cb8:	dec00204 	addi	sp,sp,8
   18cbc:	f800283a 	ret

00018cc0 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   18cc0:	defffc04 	addi	sp,sp,-16
   18cc4:	dfc00315 	stw	ra,12(sp)
   18cc8:	df000215 	stw	fp,8(sp)
   18ccc:	dc000115 	stw	r16,4(sp)
   18cd0:	df000204 	addi	fp,sp,8
   18cd4:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
   18cd8:	e0bffe17 	ldw	r2,-8(fp)
   18cdc:	108000d0 	cmplti	r2,r2,3
   18ce0:	1000111e 	bne	r2,zero,18d28 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
   18ce4:	040000b4 	movhi	r16,2
   18ce8:	84263404 	addi	r16,r16,-26416
   18cec:	e0bffe17 	ldw	r2,-8(fp)
   18cf0:	01400304 	movi	r5,12
   18cf4:	1009883a 	mov	r4,r2
   18cf8:	00114000 	call	11400 <__mulsi3>
   18cfc:	8085883a 	add	r2,r16,r2
   18d00:	10800204 	addi	r2,r2,8
   18d04:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   18d08:	040000b4 	movhi	r16,2
   18d0c:	84263404 	addi	r16,r16,-26416
   18d10:	e0bffe17 	ldw	r2,-8(fp)
   18d14:	01400304 	movi	r5,12
   18d18:	1009883a 	mov	r4,r2
   18d1c:	00114000 	call	11400 <__mulsi3>
   18d20:	8085883a 	add	r2,r16,r2
   18d24:	10000015 	stw	zero,0(r2)
  }
}
   18d28:	0001883a 	nop
   18d2c:	e6ffff04 	addi	sp,fp,-4
   18d30:	dfc00217 	ldw	ra,8(sp)
   18d34:	df000117 	ldw	fp,4(sp)
   18d38:	dc000017 	ldw	r16,0(sp)
   18d3c:	dec00304 	addi	sp,sp,12
   18d40:	f800283a 	ret

00018d44 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   18d44:	defffa04 	addi	sp,sp,-24
   18d48:	df000515 	stw	fp,20(sp)
   18d4c:	df000504 	addi	fp,sp,20
   18d50:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18d54:	0005303a 	rdctl	r2,status
   18d58:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18d5c:	e0fffc17 	ldw	r3,-16(fp)
   18d60:	00bfff84 	movi	r2,-2
   18d64:	1884703a 	and	r2,r3,r2
   18d68:	1001703a 	wrctl	status,r2
  
  return context;
   18d6c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   18d70:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   18d74:	e0bfff17 	ldw	r2,-4(fp)
   18d78:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   18d7c:	e0bffd17 	ldw	r2,-12(fp)
   18d80:	10800017 	ldw	r2,0(r2)
   18d84:	e0fffd17 	ldw	r3,-12(fp)
   18d88:	18c00117 	ldw	r3,4(r3)
   18d8c:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   18d90:	e0bffd17 	ldw	r2,-12(fp)
   18d94:	10800117 	ldw	r2,4(r2)
   18d98:	e0fffd17 	ldw	r3,-12(fp)
   18d9c:	18c00017 	ldw	r3,0(r3)
   18da0:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   18da4:	e0bffd17 	ldw	r2,-12(fp)
   18da8:	e0fffd17 	ldw	r3,-12(fp)
   18dac:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   18db0:	e0bffd17 	ldw	r2,-12(fp)
   18db4:	e0fffd17 	ldw	r3,-12(fp)
   18db8:	10c00015 	stw	r3,0(r2)
   18dbc:	e0bffb17 	ldw	r2,-20(fp)
   18dc0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   18dc4:	e0bffe17 	ldw	r2,-8(fp)
   18dc8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   18dcc:	0001883a 	nop
   18dd0:	e037883a 	mov	sp,fp
   18dd4:	df000017 	ldw	fp,0(sp)
   18dd8:	dec00104 	addi	sp,sp,4
   18ddc:	f800283a 	ret

00018de0 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   18de0:	defffb04 	addi	sp,sp,-20
   18de4:	dfc00415 	stw	ra,16(sp)
   18de8:	df000315 	stw	fp,12(sp)
   18dec:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   18df0:	d0a00a17 	ldw	r2,-32728(gp)
   18df4:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   18df8:	d0a0cd17 	ldw	r2,-31948(gp)
   18dfc:	10800044 	addi	r2,r2,1
   18e00:	d0a0cd15 	stw	r2,-31948(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   18e04:	00002e06 	br	18ec0 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   18e08:	e0bffd17 	ldw	r2,-12(fp)
   18e0c:	10800017 	ldw	r2,0(r2)
   18e10:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   18e14:	e0bffd17 	ldw	r2,-12(fp)
   18e18:	10800403 	ldbu	r2,16(r2)
   18e1c:	10803fcc 	andi	r2,r2,255
   18e20:	10000426 	beq	r2,zero,18e34 <alt_tick+0x54>
   18e24:	d0a0cd17 	ldw	r2,-31948(gp)
   18e28:	1000021e 	bne	r2,zero,18e34 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   18e2c:	e0bffd17 	ldw	r2,-12(fp)
   18e30:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   18e34:	e0bffd17 	ldw	r2,-12(fp)
   18e38:	10800217 	ldw	r2,8(r2)
   18e3c:	d0e0cd17 	ldw	r3,-31948(gp)
   18e40:	18801d36 	bltu	r3,r2,18eb8 <alt_tick+0xd8>
   18e44:	e0bffd17 	ldw	r2,-12(fp)
   18e48:	10800403 	ldbu	r2,16(r2)
   18e4c:	10803fcc 	andi	r2,r2,255
   18e50:	1000191e 	bne	r2,zero,18eb8 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   18e54:	e0bffd17 	ldw	r2,-12(fp)
   18e58:	10800317 	ldw	r2,12(r2)
   18e5c:	e0fffd17 	ldw	r3,-12(fp)
   18e60:	18c00517 	ldw	r3,20(r3)
   18e64:	1809883a 	mov	r4,r3
   18e68:	103ee83a 	callr	r2
   18e6c:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   18e70:	e0bfff17 	ldw	r2,-4(fp)
   18e74:	1000031e 	bne	r2,zero,18e84 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   18e78:	e13ffd17 	ldw	r4,-12(fp)
   18e7c:	0018d440 	call	18d44 <alt_alarm_stop>
   18e80:	00000d06 	br	18eb8 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   18e84:	e0bffd17 	ldw	r2,-12(fp)
   18e88:	10c00217 	ldw	r3,8(r2)
   18e8c:	e0bfff17 	ldw	r2,-4(fp)
   18e90:	1887883a 	add	r3,r3,r2
   18e94:	e0bffd17 	ldw	r2,-12(fp)
   18e98:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   18e9c:	e0bffd17 	ldw	r2,-12(fp)
   18ea0:	10c00217 	ldw	r3,8(r2)
   18ea4:	d0a0cd17 	ldw	r2,-31948(gp)
   18ea8:	1880032e 	bgeu	r3,r2,18eb8 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   18eac:	e0bffd17 	ldw	r2,-12(fp)
   18eb0:	00c00044 	movi	r3,1
   18eb4:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   18eb8:	e0bffe17 	ldw	r2,-8(fp)
   18ebc:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   18ec0:	e0fffd17 	ldw	r3,-12(fp)
   18ec4:	d0a00a04 	addi	r2,gp,-32728
   18ec8:	18bfcf1e 	bne	r3,r2,18e08 <_gp+0xffff73b8>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   18ecc:	0001883a 	nop
}
   18ed0:	0001883a 	nop
   18ed4:	e037883a 	mov	sp,fp
   18ed8:	dfc00117 	ldw	ra,4(sp)
   18edc:	df000017 	ldw	fp,0(sp)
   18ee0:	dec00204 	addi	sp,sp,8
   18ee4:	f800283a 	ret

00018ee8 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   18ee8:	deffff04 	addi	sp,sp,-4
   18eec:	df000015 	stw	fp,0(sp)
   18ef0:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   18ef4:	000170fa 	wrctl	ienable,zero
}
   18ef8:	0001883a 	nop
   18efc:	e037883a 	mov	sp,fp
   18f00:	df000017 	ldw	fp,0(sp)
   18f04:	dec00104 	addi	sp,sp,4
   18f08:	f800283a 	ret

00018f0c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   18f0c:	defffa04 	addi	sp,sp,-24
   18f10:	dfc00515 	stw	ra,20(sp)
   18f14:	df000415 	stw	fp,16(sp)
   18f18:	df000404 	addi	fp,sp,16
   18f1c:	e13ffe15 	stw	r4,-8(fp)
   18f20:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   18f24:	e0bfff17 	ldw	r2,-4(fp)
   18f28:	10800017 	ldw	r2,0(r2)
   18f2c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   18f30:	e13ffe17 	ldw	r4,-8(fp)
   18f34:	00117140 	call	11714 <strlen>
   18f38:	10800044 	addi	r2,r2,1
   18f3c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   18f40:	00000d06 	br	18f78 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   18f44:	e0bffc17 	ldw	r2,-16(fp)
   18f48:	10800217 	ldw	r2,8(r2)
   18f4c:	e0fffd17 	ldw	r3,-12(fp)
   18f50:	180d883a 	mov	r6,r3
   18f54:	e17ffe17 	ldw	r5,-8(fp)
   18f58:	1009883a 	mov	r4,r2
   18f5c:	001930c0 	call	1930c <memcmp>
   18f60:	1000021e 	bne	r2,zero,18f6c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   18f64:	e0bffc17 	ldw	r2,-16(fp)
   18f68:	00000706 	br	18f88 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   18f6c:	e0bffc17 	ldw	r2,-16(fp)
   18f70:	10800017 	ldw	r2,0(r2)
   18f74:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   18f78:	e0fffc17 	ldw	r3,-16(fp)
   18f7c:	e0bfff17 	ldw	r2,-4(fp)
   18f80:	18bff01e 	bne	r3,r2,18f44 <_gp+0xffff74f4>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   18f84:	0005883a 	mov	r2,zero
}
   18f88:	e037883a 	mov	sp,fp
   18f8c:	dfc00117 	ldw	ra,4(sp)
   18f90:	df000017 	ldw	fp,0(sp)
   18f94:	dec00204 	addi	sp,sp,8
   18f98:	f800283a 	ret

00018f9c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   18f9c:	defffb04 	addi	sp,sp,-20
   18fa0:	dfc00415 	stw	ra,16(sp)
   18fa4:	df000315 	stw	fp,12(sp)
   18fa8:	df000304 	addi	fp,sp,12
   18fac:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   18fb0:	d0a00317 	ldw	r2,-32756(gp)
   18fb4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   18fb8:	00003106 	br	19080 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   18fbc:	e0bffd17 	ldw	r2,-12(fp)
   18fc0:	10800217 	ldw	r2,8(r2)
   18fc4:	1009883a 	mov	r4,r2
   18fc8:	00117140 	call	11714 <strlen>
   18fcc:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   18fd0:	e0bffd17 	ldw	r2,-12(fp)
   18fd4:	10c00217 	ldw	r3,8(r2)
   18fd8:	e0bffe17 	ldw	r2,-8(fp)
   18fdc:	10bfffc4 	addi	r2,r2,-1
   18fe0:	1885883a 	add	r2,r3,r2
   18fe4:	10800003 	ldbu	r2,0(r2)
   18fe8:	10803fcc 	andi	r2,r2,255
   18fec:	1080201c 	xori	r2,r2,128
   18ff0:	10bfe004 	addi	r2,r2,-128
   18ff4:	10800bd8 	cmpnei	r2,r2,47
   18ff8:	1000031e 	bne	r2,zero,19008 <alt_find_file+0x6c>
    {
      len -= 1;
   18ffc:	e0bffe17 	ldw	r2,-8(fp)
   19000:	10bfffc4 	addi	r2,r2,-1
   19004:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   19008:	e0bffe17 	ldw	r2,-8(fp)
   1900c:	e0ffff17 	ldw	r3,-4(fp)
   19010:	1885883a 	add	r2,r3,r2
   19014:	10800003 	ldbu	r2,0(r2)
   19018:	10803fcc 	andi	r2,r2,255
   1901c:	1080201c 	xori	r2,r2,128
   19020:	10bfe004 	addi	r2,r2,-128
   19024:	10800be0 	cmpeqi	r2,r2,47
   19028:	1000081e 	bne	r2,zero,1904c <alt_find_file+0xb0>
   1902c:	e0bffe17 	ldw	r2,-8(fp)
   19030:	e0ffff17 	ldw	r3,-4(fp)
   19034:	1885883a 	add	r2,r3,r2
   19038:	10800003 	ldbu	r2,0(r2)
   1903c:	10803fcc 	andi	r2,r2,255
   19040:	1080201c 	xori	r2,r2,128
   19044:	10bfe004 	addi	r2,r2,-128
   19048:	10000a1e 	bne	r2,zero,19074 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   1904c:	e0bffd17 	ldw	r2,-12(fp)
   19050:	10800217 	ldw	r2,8(r2)
   19054:	e0fffe17 	ldw	r3,-8(fp)
   19058:	180d883a 	mov	r6,r3
   1905c:	e17fff17 	ldw	r5,-4(fp)
   19060:	1009883a 	mov	r4,r2
   19064:	001930c0 	call	1930c <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   19068:	1000021e 	bne	r2,zero,19074 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   1906c:	e0bffd17 	ldw	r2,-12(fp)
   19070:	00000706 	br	19090 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   19074:	e0bffd17 	ldw	r2,-12(fp)
   19078:	10800017 	ldw	r2,0(r2)
   1907c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   19080:	e0fffd17 	ldw	r3,-12(fp)
   19084:	d0a00304 	addi	r2,gp,-32756
   19088:	18bfcc1e 	bne	r3,r2,18fbc <_gp+0xffff756c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   1908c:	0005883a 	mov	r2,zero
}
   19090:	e037883a 	mov	sp,fp
   19094:	dfc00117 	ldw	ra,4(sp)
   19098:	df000017 	ldw	fp,0(sp)
   1909c:	dec00204 	addi	sp,sp,8
   190a0:	f800283a 	ret

000190a4 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   190a4:	defffa04 	addi	sp,sp,-24
   190a8:	dfc00515 	stw	ra,20(sp)
   190ac:	df000415 	stw	fp,16(sp)
   190b0:	dc000315 	stw	r16,12(sp)
   190b4:	df000404 	addi	fp,sp,16
   190b8:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
   190bc:	00bffa04 	movi	r2,-24
   190c0:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   190c4:	e03ffc15 	stw	zero,-16(fp)
   190c8:	00001d06 	br	19140 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
   190cc:	040000b4 	movhi	r16,2
   190d0:	84263404 	addi	r16,r16,-26416
   190d4:	e0bffc17 	ldw	r2,-16(fp)
   190d8:	01400304 	movi	r5,12
   190dc:	1009883a 	mov	r4,r2
   190e0:	00114000 	call	11400 <__mulsi3>
   190e4:	8085883a 	add	r2,r16,r2
   190e8:	10800017 	ldw	r2,0(r2)
   190ec:	1000111e 	bne	r2,zero,19134 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
   190f0:	040000b4 	movhi	r16,2
   190f4:	84263404 	addi	r16,r16,-26416
   190f8:	e0bffc17 	ldw	r2,-16(fp)
   190fc:	01400304 	movi	r5,12
   19100:	1009883a 	mov	r4,r2
   19104:	00114000 	call	11400 <__mulsi3>
   19108:	8085883a 	add	r2,r16,r2
   1910c:	e0fffe17 	ldw	r3,-8(fp)
   19110:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   19114:	d0e00717 	ldw	r3,-32740(gp)
   19118:	e0bffc17 	ldw	r2,-16(fp)
   1911c:	1880020e 	bge	r3,r2,19128 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
   19120:	e0bffc17 	ldw	r2,-16(fp)
   19124:	d0a00715 	stw	r2,-32740(gp)
      }
      rc = i;
   19128:	e0bffc17 	ldw	r2,-16(fp)
   1912c:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   19130:	00000606 	br	1914c <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   19134:	e0bffc17 	ldw	r2,-16(fp)
   19138:	10800044 	addi	r2,r2,1
   1913c:	e0bffc15 	stw	r2,-16(fp)
   19140:	e0bffc17 	ldw	r2,-16(fp)
   19144:	10800810 	cmplti	r2,r2,32
   19148:	103fe01e 	bne	r2,zero,190cc <_gp+0xffff767c>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   1914c:	e0bffd17 	ldw	r2,-12(fp)
}
   19150:	e6ffff04 	addi	sp,fp,-4
   19154:	dfc00217 	ldw	ra,8(sp)
   19158:	df000117 	ldw	fp,4(sp)
   1915c:	dc000017 	ldw	r16,0(sp)
   19160:	dec00304 	addi	sp,sp,12
   19164:	f800283a 	ret

00019168 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   19168:	defffb04 	addi	sp,sp,-20
   1916c:	df000415 	stw	fp,16(sp)
   19170:	df000404 	addi	fp,sp,16
   19174:	e13ffe15 	stw	r4,-8(fp)
   19178:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   1917c:	e0bfff17 	ldw	r2,-4(fp)
   19180:	10808070 	cmpltui	r2,r2,513
   19184:	1000021e 	bne	r2,zero,19190 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   19188:	00808004 	movi	r2,512
   1918c:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   19190:	e0fffe17 	ldw	r3,-8(fp)
   19194:	e0bfff17 	ldw	r2,-4(fp)
   19198:	1885883a 	add	r2,r3,r2
   1919c:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   191a0:	e0bffe17 	ldw	r2,-8(fp)
   191a4:	e0bffc15 	stw	r2,-16(fp)
   191a8:	00000506 	br	191c0 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   191ac:	e0bffc17 	ldw	r2,-16(fp)
   191b0:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   191b4:	e0bffc17 	ldw	r2,-16(fp)
   191b8:	10800804 	addi	r2,r2,32
   191bc:	e0bffc15 	stw	r2,-16(fp)
   191c0:	e0fffc17 	ldw	r3,-16(fp)
   191c4:	e0bffd17 	ldw	r2,-12(fp)
   191c8:	18bff836 	bltu	r3,r2,191ac <_gp+0xffff775c>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   191cc:	e0bffe17 	ldw	r2,-8(fp)
   191d0:	108007cc 	andi	r2,r2,31
   191d4:	10000226 	beq	r2,zero,191e0 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   191d8:	e0bffc17 	ldw	r2,-16(fp)
   191dc:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   191e0:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   191e4:	0001883a 	nop
   191e8:	e037883a 	mov	sp,fp
   191ec:	df000017 	ldw	fp,0(sp)
   191f0:	dec00104 	addi	sp,sp,4
   191f4:	f800283a 	ret

000191f8 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   191f8:	defffe04 	addi	sp,sp,-8
   191fc:	df000115 	stw	fp,4(sp)
   19200:	df000104 	addi	fp,sp,4
   19204:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   19208:	e0bfff17 	ldw	r2,-4(fp)
   1920c:	10bffe84 	addi	r2,r2,-6
   19210:	10c00428 	cmpgeui	r3,r2,16
   19214:	18001a1e 	bne	r3,zero,19280 <alt_exception_cause_generated_bad_addr+0x88>
   19218:	100690ba 	slli	r3,r2,2
   1921c:	008000b4 	movhi	r2,2
   19220:	10a48c04 	addi	r2,r2,-28112
   19224:	1885883a 	add	r2,r3,r2
   19228:	10800017 	ldw	r2,0(r2)
   1922c:	1000683a 	jmp	r2
   19230:	00019270 	cmpltui	zero,zero,1609
   19234:	00019270 	cmpltui	zero,zero,1609
   19238:	00019280 	call	1928 <__alt_mem_onchip_mem-0xe6d8>
   1923c:	00019280 	call	1928 <__alt_mem_onchip_mem-0xe6d8>
   19240:	00019280 	call	1928 <__alt_mem_onchip_mem-0xe6d8>
   19244:	00019270 	cmpltui	zero,zero,1609
   19248:	00019278 	rdprs	zero,zero,1609
   1924c:	00019280 	call	1928 <__alt_mem_onchip_mem-0xe6d8>
   19250:	00019270 	cmpltui	zero,zero,1609
   19254:	00019270 	cmpltui	zero,zero,1609
   19258:	00019280 	call	1928 <__alt_mem_onchip_mem-0xe6d8>
   1925c:	00019270 	cmpltui	zero,zero,1609
   19260:	00019278 	rdprs	zero,zero,1609
   19264:	00019280 	call	1928 <__alt_mem_onchip_mem-0xe6d8>
   19268:	00019280 	call	1928 <__alt_mem_onchip_mem-0xe6d8>
   1926c:	00019270 	cmpltui	zero,zero,1609
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   19270:	00800044 	movi	r2,1
   19274:	00000306 	br	19284 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   19278:	0005883a 	mov	r2,zero
   1927c:	00000106 	br	19284 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   19280:	0005883a 	mov	r2,zero
  }
}
   19284:	e037883a 	mov	sp,fp
   19288:	df000017 	ldw	fp,0(sp)
   1928c:	dec00104 	addi	sp,sp,4
   19290:	f800283a 	ret

00019294 <exit>:
   19294:	defffe04 	addi	sp,sp,-8
   19298:	000b883a 	mov	r5,zero
   1929c:	dc000015 	stw	r16,0(sp)
   192a0:	dfc00115 	stw	ra,4(sp)
   192a4:	2021883a 	mov	r16,r4
   192a8:	001933c0 	call	1933c <__call_exitprocs>
   192ac:	8009883a 	mov	r4,r16
   192b0:	00194cc0 	call	194cc <_exit>

000192b4 <fputs>:
   192b4:	defffd04 	addi	sp,sp,-12
   192b8:	dfc00215 	stw	ra,8(sp)
   192bc:	dc000115 	stw	r16,4(sp)
   192c0:	d9400015 	stw	r5,0(sp)
   192c4:	2021883a 	mov	r16,r4
   192c8:	00117140 	call	11714 <strlen>
   192cc:	100f883a 	mov	r7,r2
   192d0:	008000b4 	movhi	r2,2
   192d4:	d9400017 	ldw	r5,0(sp)
   192d8:	10a69504 	addi	r2,r2,-26028
   192dc:	11000017 	ldw	r4,0(r2)
   192e0:	00c00074 	movhi	r3,1
   192e4:	18c9a804 	addi	r3,r3,9888
   192e8:	28c00115 	stw	r3,4(r5)
   192ec:	800d883a 	mov	r6,r16
   192f0:	00126a00 	call	126a0 <__sfvwrite_small_dev>
   192f4:	10bfffe0 	cmpeqi	r2,r2,-1
   192f8:	0085c83a 	sub	r2,zero,r2
   192fc:	dfc00217 	ldw	ra,8(sp)
   19300:	dc000117 	ldw	r16,4(sp)
   19304:	dec00304 	addi	sp,sp,12
   19308:	f800283a 	ret

0001930c <memcmp>:
   1930c:	218d883a 	add	r6,r4,r6
   19310:	21800826 	beq	r4,r6,19334 <memcmp+0x28>
   19314:	20800003 	ldbu	r2,0(r4)
   19318:	28c00003 	ldbu	r3,0(r5)
   1931c:	10c00226 	beq	r2,r3,19328 <memcmp+0x1c>
   19320:	10c5c83a 	sub	r2,r2,r3
   19324:	f800283a 	ret
   19328:	21000044 	addi	r4,r4,1
   1932c:	29400044 	addi	r5,r5,1
   19330:	003ff706 	br	19310 <_gp+0xffff78c0>
   19334:	0005883a 	mov	r2,zero
   19338:	f800283a 	ret

0001933c <__call_exitprocs>:
   1933c:	defff504 	addi	sp,sp,-44
   19340:	dd000515 	stw	r20,20(sp)
   19344:	050000b4 	movhi	r20,2
   19348:	dc800315 	stw	r18,12(sp)
   1934c:	dfc00a15 	stw	ra,40(sp)
   19350:	df000915 	stw	fp,36(sp)
   19354:	ddc00815 	stw	r23,32(sp)
   19358:	dd800715 	stw	r22,28(sp)
   1935c:	dd400615 	stw	r21,24(sp)
   19360:	dcc00415 	stw	r19,16(sp)
   19364:	dc400215 	stw	r17,8(sp)
   19368:	dc000115 	stw	r16,4(sp)
   1936c:	d9000015 	stw	r4,0(sp)
   19370:	2825883a 	mov	r18,r5
   19374:	a5269404 	addi	r20,r20,-26032
   19378:	a4400017 	ldw	r17,0(r20)
   1937c:	8cc00c17 	ldw	r19,48(r17)
   19380:	8c400c04 	addi	r17,r17,48
   19384:	98004526 	beq	r19,zero,1949c <__call_exitprocs+0x160>
   19388:	9c000117 	ldw	r16,4(r19)
   1938c:	00900034 	movhi	r2,16384
   19390:	10bfffc4 	addi	r2,r2,-1
   19394:	9d402217 	ldw	r21,136(r19)
   19398:	85bfffc4 	addi	r22,r16,-1
   1939c:	80a1883a 	add	r16,r16,r2
   193a0:	8421883a 	add	r16,r16,r16
   193a4:	8421883a 	add	r16,r16,r16
   193a8:	ac2f883a 	add	r23,r21,r16
   193ac:	84000204 	addi	r16,r16,8
   193b0:	9c21883a 	add	r16,r19,r16
   193b4:	b0002716 	blt	r22,zero,19454 <__call_exitprocs+0x118>
   193b8:	90000726 	beq	r18,zero,193d8 <__call_exitprocs+0x9c>
   193bc:	a800041e 	bne	r21,zero,193d0 <__call_exitprocs+0x94>
   193c0:	b5bfffc4 	addi	r22,r22,-1
   193c4:	bdffff04 	addi	r23,r23,-4
   193c8:	843fff04 	addi	r16,r16,-4
   193cc:	003ff906 	br	193b4 <_gp+0xffff7964>
   193d0:	b9002017 	ldw	r4,128(r23)
   193d4:	913ffa1e 	bne	r18,r4,193c0 <_gp+0xffff7970>
   193d8:	99000117 	ldw	r4,4(r19)
   193dc:	82000017 	ldw	r8,0(r16)
   193e0:	213fffc4 	addi	r4,r4,-1
   193e4:	b100021e 	bne	r22,r4,193f0 <__call_exitprocs+0xb4>
   193e8:	9d800115 	stw	r22,4(r19)
   193ec:	00000106 	br	193f4 <__call_exitprocs+0xb8>
   193f0:	80000015 	stw	zero,0(r16)
   193f4:	403ff226 	beq	r8,zero,193c0 <_gp+0xffff7970>
   193f8:	9f000117 	ldw	fp,4(r19)
   193fc:	a8000526 	beq	r21,zero,19414 <__call_exitprocs+0xd8>
   19400:	00800044 	movi	r2,1
   19404:	1592983a 	sll	r9,r2,r22
   19408:	a9404017 	ldw	r5,256(r21)
   1940c:	494a703a 	and	r5,r9,r5
   19410:	2800021e 	bne	r5,zero,1941c <__call_exitprocs+0xe0>
   19414:	403ee83a 	callr	r8
   19418:	00000906 	br	19440 <__call_exitprocs+0x104>
   1941c:	a9004117 	ldw	r4,260(r21)
   19420:	4908703a 	and	r4,r9,r4
   19424:	2000041e 	bne	r4,zero,19438 <__call_exitprocs+0xfc>
   19428:	b9400017 	ldw	r5,0(r23)
   1942c:	d9000017 	ldw	r4,0(sp)
   19430:	403ee83a 	callr	r8
   19434:	00000206 	br	19440 <__call_exitprocs+0x104>
   19438:	b9000017 	ldw	r4,0(r23)
   1943c:	403ee83a 	callr	r8
   19440:	99000117 	ldw	r4,4(r19)
   19444:	e13fcc1e 	bne	fp,r4,19378 <_gp+0xffff7928>
   19448:	89000017 	ldw	r4,0(r17)
   1944c:	993fdc26 	beq	r19,r4,193c0 <_gp+0xffff7970>
   19450:	003fc906 	br	19378 <_gp+0xffff7928>
   19454:	00800074 	movhi	r2,1
   19458:	1093f104 	addi	r2,r2,20420
   1945c:	10000f26 	beq	r2,zero,1949c <__call_exitprocs+0x160>
   19460:	99400117 	ldw	r5,4(r19)
   19464:	99000017 	ldw	r4,0(r19)
   19468:	2800091e 	bne	r5,zero,19490 <__call_exitprocs+0x154>
   1946c:	20000826 	beq	r4,zero,19490 <__call_exitprocs+0x154>
   19470:	89000015 	stw	r4,0(r17)
   19474:	a8000226 	beq	r21,zero,19480 <__call_exitprocs+0x144>
   19478:	a809883a 	mov	r4,r21
   1947c:	0014fc40 	call	14fc4 <free>
   19480:	9809883a 	mov	r4,r19
   19484:	0014fc40 	call	14fc4 <free>
   19488:	8cc00017 	ldw	r19,0(r17)
   1948c:	003fbd06 	br	19384 <_gp+0xffff7934>
   19490:	9823883a 	mov	r17,r19
   19494:	2027883a 	mov	r19,r4
   19498:	003fba06 	br	19384 <_gp+0xffff7934>
   1949c:	dfc00a17 	ldw	ra,40(sp)
   194a0:	df000917 	ldw	fp,36(sp)
   194a4:	ddc00817 	ldw	r23,32(sp)
   194a8:	dd800717 	ldw	r22,28(sp)
   194ac:	dd400617 	ldw	r21,24(sp)
   194b0:	dd000517 	ldw	r20,20(sp)
   194b4:	dcc00417 	ldw	r19,16(sp)
   194b8:	dc800317 	ldw	r18,12(sp)
   194bc:	dc400217 	ldw	r17,8(sp)
   194c0:	dc000117 	ldw	r16,4(sp)
   194c4:	dec00b04 	addi	sp,sp,44
   194c8:	f800283a 	ret

000194cc <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   194cc:	defffd04 	addi	sp,sp,-12
   194d0:	df000215 	stw	fp,8(sp)
   194d4:	df000204 	addi	fp,sp,8
   194d8:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   194dc:	0001883a 	nop
   194e0:	e0bfff17 	ldw	r2,-4(fp)
   194e4:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   194e8:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   194ec:	10000226 	beq	r2,zero,194f8 <_exit+0x2c>
    ALT_SIM_FAIL();
   194f0:	002af070 	cmpltui	zero,zero,43969
   194f4:	00000106 	br	194fc <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   194f8:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   194fc:	003fff06 	br	194fc <_gp+0xffff7aac>
